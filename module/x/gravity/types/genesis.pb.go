// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The slashing fractions for the various gravity related slashing conditions. The first three
// refer to not submitting a particular message, the third for submitting a different claim
// for the same Ethereum event
//
// unbond_slashing_valsets_window
//
// The unbond slashing valsets window is used to determine how many blocks after starting to unbond
// a validator needs to continue signing blocks. The goal of this paramater is that when a validator leaves
// the set, if their leaving creates enough change in the validator set to justify an update they will sign
// a validator set update for the Ethereum bridge that does not include themselves. Allowing us to remove them
// from the Ethereum bridge and replace them with the new set gracefully.
//
// valset_reward
//
// Valset rewards are the amount of tokens this chain issues to relayers of validator sets.
// These can be any ERC20 token in the bridge, but it's strongly advised that chains use only
// Cosmos originated tokens, which the bridge effectively mints on Ethereum. If you run out of
// the token you are using for validator set rewards valset updates will fail and the bridge
// will be vulnerable to highjacking. For these paramaters the zero values are special and indicate
// not to attempt any reward. This is the default for bootstrapping.
type Params struct {
	GravityId                string `protobuf:"bytes,1,opt,name=gravity_id,json=gravityId,proto3" json:"gravity_id,omitempty"`
	ContractSourceHash       string `protobuf:"bytes,2,opt,name=contract_source_hash,json=contractSourceHash,proto3" json:"contract_source_hash,omitempty"`
	BridgeEthereumAddress    string `protobuf:"bytes,4,opt,name=bridge_ethereum_address,json=bridgeEthereumAddress,proto3" json:"bridge_ethereum_address,omitempty"`
	BridgeChainId            uint64 `protobuf:"varint,5,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	SignedSignerSetTxsWindow uint64 `protobuf:"varint,6,opt,name=signed_signer_set_txs_window,json=signedSignerSetTxsWindow,proto3" json:"signed_signer_set_txs_window,omitempty"`
	SignedBatchTxsWindow     uint64 `protobuf:"varint,7,opt,name=signed_batch_txs_window,json=signedBatchTxsWindow,proto3" json:"signed_batch_txs_window,omitempty"`
	// uint64 signed_events_window        = 8;
	TargetBatchTimeout       uint64                                 `protobuf:"varint,10,opt,name=target_batch_timeout,json=targetBatchTimeout,proto3" json:"target_batch_timeout,omitempty"`
	AverageBlockTime         uint64                                 `protobuf:"varint,11,opt,name=average_block_time,json=averageBlockTime,proto3" json:"average_block_time,omitempty"`
	AverageEthereumBlockTime uint64                                 `protobuf:"varint,12,opt,name=average_ethereum_block_time,json=averageEthereumBlockTime,proto3" json:"average_ethereum_block_time,omitempty"`
	SlashFractionSignerSetTx github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=slash_fraction_signer_set_tx,json=slashFractionSignerSetTx,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_signer_set_tx"`
	SlashFractionBatchTx     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=slash_fraction_batch_tx,json=slashFractionBatchTx,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_batch_tx"`
	// bytes slash_fraction_claim = 15 [
	//   (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
	//   (gogoproto.nullable)   = false
	// ];
	// bytes slash_fraction_conflicting_claim = 16 [
	//   (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
	//   (gogoproto.nullable)   = false
	// ];
	SlashingSignerSetUnbondWindow uint64                                 `protobuf:"varint,17,opt,name=slashing_signer_set_unbond_window,json=slashingSignerSetUnbondWindow,proto3" json:"slashing_signer_set_unbond_window,omitempty"`
	SlashFractionBadEthSignature  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,18,opt,name=slash_fraction_bad_eth_signature,json=slashFractionBadEthSignature,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_bad_eth_signature"`
	SignerSetTxReward             *types.Coin                            `protobuf:"bytes,19,opt,name=signer_set_tx_reward,json=signerSetTxReward,proto3" json:"signer_set_tx_reward,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_387b0aba880adb60, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetGravityId() string {
	if m != nil {
		return m.GravityId
	}
	return ""
}

func (m *Params) GetContractSourceHash() string {
	if m != nil {
		return m.ContractSourceHash
	}
	return ""
}

func (m *Params) GetBridgeEthereumAddress() string {
	if m != nil {
		return m.BridgeEthereumAddress
	}
	return ""
}

func (m *Params) GetBridgeChainId() uint64 {
	if m != nil {
		return m.BridgeChainId
	}
	return 0
}

func (m *Params) GetSignedSignerSetTxsWindow() uint64 {
	if m != nil {
		return m.SignedSignerSetTxsWindow
	}
	return 0
}

func (m *Params) GetSignedBatchTxsWindow() uint64 {
	if m != nil {
		return m.SignedBatchTxsWindow
	}
	return 0
}

func (m *Params) GetTargetBatchTimeout() uint64 {
	if m != nil {
		return m.TargetBatchTimeout
	}
	return 0
}

func (m *Params) GetAverageBlockTime() uint64 {
	if m != nil {
		return m.AverageBlockTime
	}
	return 0
}

func (m *Params) GetAverageEthereumBlockTime() uint64 {
	if m != nil {
		return m.AverageEthereumBlockTime
	}
	return 0
}

func (m *Params) GetSlashingSignerSetUnbondWindow() uint64 {
	if m != nil {
		return m.SlashingSignerSetUnbondWindow
	}
	return 0
}

func (m *Params) GetSignerSetTxReward() *types.Coin {
	if m != nil {
		return m.SignerSetTxReward
	}
	return nil
}

// GenesisState struct
type GenesisState struct {
	Params                   *Params                      `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	LastAcceptedEventNonce   uint64                       `protobuf:"varint,2,opt,name=last_accepted_event_nonce,json=lastAcceptedEventNonce,proto3" json:"last_accepted_event_nonce,omitempty"`
	SignerSetTxs             []*SignerSetTx               `protobuf:"bytes,3,rep,name=signer_set_txs,json=signerSetTxs,proto3" json:"signer_set_txs,omitempty"`
	SignerSetTxSignatures    []*MsgSignerSetTxSignature   `protobuf:"bytes,4,rep,name=signer_set_tx_signatures,json=signerSetTxSignatures,proto3" json:"signer_set_tx_signatures,omitempty"`
	BatchTxs                 []*BatchTx                   `protobuf:"bytes,5,rep,name=batch_txs,json=batchTxs,proto3" json:"batch_txs,omitempty"`
	BatchTxSignatures        []MsgBatchTxSignature        `protobuf:"bytes,6,rep,name=batch_tx_signatures,json=batchTxSignatures,proto3" json:"batch_tx_signatures"`
	ContractCallTxs          []*ContractCallTx            `protobuf:"bytes,7,rep,name=contract_call_txs,json=contractCallTxs,proto3" json:"contract_call_txs,omitempty"`
	ContractCallTxSignatures []MsgContractCallTxSignature `protobuf:"bytes,8,rep,name=contract_call_tx_signatures,json=contractCallTxSignatures,proto3" json:"contract_call_tx_signatures"`
	EthereumEventVoteRecords []EthereumEventVoteRecord    `protobuf:"bytes,9,rep,name=ethereum_event_vote_records,json=ethereumEventVoteRecords,proto3" json:"ethereum_event_vote_records"`
	DelegateKeys             []*MsgDelegateKeys           `protobuf:"bytes,10,rep,name=delegate_keys,json=delegateKeys,proto3" json:"delegate_keys,omitempty"`
	Erc20ToDenoms            []*ERC20ToDenom              `protobuf:"bytes,11,rep,name=erc20_to_denoms,json=erc20ToDenoms,proto3" json:"erc20_to_denoms,omitempty"`
	UnbatchedTransfers       []*SendToEthereum            `protobuf:"bytes,12,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_387b0aba880adb60, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GenesisState) GetLastAcceptedEventNonce() uint64 {
	if m != nil {
		return m.LastAcceptedEventNonce
	}
	return 0
}

func (m *GenesisState) GetSignerSetTxs() []*SignerSetTx {
	if m != nil {
		return m.SignerSetTxs
	}
	return nil
}

func (m *GenesisState) GetSignerSetTxSignatures() []*MsgSignerSetTxSignature {
	if m != nil {
		return m.SignerSetTxSignatures
	}
	return nil
}

func (m *GenesisState) GetBatchTxs() []*BatchTx {
	if m != nil {
		return m.BatchTxs
	}
	return nil
}

func (m *GenesisState) GetBatchTxSignatures() []MsgBatchTxSignature {
	if m != nil {
		return m.BatchTxSignatures
	}
	return nil
}

func (m *GenesisState) GetContractCallTxs() []*ContractCallTx {
	if m != nil {
		return m.ContractCallTxs
	}
	return nil
}

func (m *GenesisState) GetContractCallTxSignatures() []MsgContractCallTxSignature {
	if m != nil {
		return m.ContractCallTxSignatures
	}
	return nil
}

func (m *GenesisState) GetEthereumEventVoteRecords() []EthereumEventVoteRecord {
	if m != nil {
		return m.EthereumEventVoteRecords
	}
	return nil
}

func (m *GenesisState) GetDelegateKeys() []*MsgDelegateKeys {
	if m != nil {
		return m.DelegateKeys
	}
	return nil
}

func (m *GenesisState) GetErc20ToDenoms() []*ERC20ToDenom {
	if m != nil {
		return m.Erc20ToDenoms
	}
	return nil
}

func (m *GenesisState) GetUnbatchedTransfers() []*SendToEthereum {
	if m != nil {
		return m.UnbatchedTransfers
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "gravity.v1.Params")
	proto.RegisterType((*GenesisState)(nil), "gravity.v1.GenesisState")
}

func init() { proto.RegisterFile("gravity/v1/genesis.proto", fileDescriptor_387b0aba880adb60) }

var fileDescriptor_387b0aba880adb60 = []byte{
	// 974 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x8f, 0xa9, 0xeb, 0x34, 0x63, 0xa7, 0x21, 0x13, 0xa7, 0x99, 0x26, 0xa9, 0x63, 0x8a, 0x14,
	0x59, 0x88, 0xae, 0x1d, 0x23, 0x40, 0x20, 0x15, 0xb5, 0x76, 0x52, 0x5a, 0x2a, 0x10, 0xac, 0x5d,
	0x90, 0x10, 0xd2, 0x68, 0x76, 0xe7, 0x75, 0x77, 0x15, 0x7b, 0x27, 0xda, 0x37, 0x76, 0x92, 0x1b,
	0x77, 0x2e, 0x7c, 0x1e, 0x3e, 0x41, 0x8f, 0x3d, 0x22, 0x84, 0x2a, 0x94, 0x7c, 0x11, 0xb4, 0xb3,
	0xb3, 0xce, 0xda, 0xc9, 0xa9, 0x27, 0x7b, 0xde, 0xef, 0xcf, 0xbc, 0x79, 0x33, 0xef, 0x2d, 0x61,
	0x41, 0x22, 0xa6, 0x91, 0x3e, 0x6f, 0x4f, 0x0f, 0xda, 0x01, 0xc4, 0x80, 0x11, 0x3a, 0x27, 0x89,
	0xd2, 0x8a, 0x12, 0x8b, 0x38, 0xd3, 0x83, 0xed, 0x7a, 0xa0, 0x02, 0x65, 0xc2, 0xed, 0xf4, 0x5f,
	0xc6, 0xd8, 0xbe, 0x57, 0xd0, 0xea, 0xf3, 0x13, 0xb0, 0xca, 0xed, 0xcd, 0x42, 0x7c, 0x8c, 0x01,
	0xde, 0x40, 0xf7, 0x84, 0xf6, 0x43, 0x1b, 0xdf, 0x2d, 0xc4, 0x85, 0xd6, 0x80, 0x5a, 0xe8, 0x48,
	0xc5, 0x16, 0x6d, 0xf8, 0x0a, 0xc7, 0x0a, 0xdb, 0x9e, 0x40, 0x68, 0x4f, 0x0f, 0x3c, 0xd0, 0xe2,
	0xa0, 0xed, 0xab, 0xc8, 0xe2, 0x0f, 0xff, 0x5a, 0x26, 0x95, 0x1f, 0x45, 0x22, 0xc6, 0x48, 0x1f,
	0x90, 0x3c, 0x67, 0x1e, 0x49, 0x56, 0x6a, 0x96, 0x5a, 0x2b, 0xee, 0x8a, 0x8d, 0xbc, 0x90, 0xb4,
	0x43, 0xea, 0xbe, 0x8a, 0x75, 0x22, 0x7c, 0xcd, 0x51, 0x4d, 0x12, 0x1f, 0x78, 0x28, 0x30, 0x64,
	0x1f, 0x18, 0x22, 0xcd, 0xb1, 0x81, 0x81, 0x9e, 0x0b, 0x0c, 0xe9, 0x17, 0x64, 0xcb, 0x4b, 0x22,
	0x19, 0x00, 0x07, 0x1d, 0x42, 0x02, 0x93, 0x31, 0x17, 0x52, 0x26, 0x80, 0xc8, 0xca, 0x46, 0xb4,
	0x99, 0xc1, 0x47, 0x16, 0x7d, 0x9a, 0x81, 0x74, 0x9f, 0xac, 0x59, 0x9d, 0x1f, 0x8a, 0x28, 0x4e,
	0xb3, 0xb9, 0xdd, 0x2c, 0xb5, 0xca, 0xee, 0x6a, 0x16, 0xee, 0xa7, 0xd1, 0x17, 0x92, 0x7e, 0x43,
	0x76, 0x31, 0x0a, 0x62, 0x90, 0xdc, 0xfc, 0x24, 0x1c, 0x41, 0x73, 0x7d, 0x86, 0xfc, 0x34, 0x8a,
	0xa5, 0x3a, 0x65, 0x15, 0x23, 0x62, 0x19, 0x67, 0x60, 0x28, 0x03, 0xd0, 0xc3, 0x33, 0xfc, 0xc5,
	0xe0, 0xf4, 0x73, 0xb2, 0x65, 0xf5, 0xa6, 0x9e, 0x45, 0xe9, 0xb2, 0x91, 0xd6, 0x33, 0xb8, 0x97,
	0xa2, 0x57, 0xb2, 0x0e, 0xa9, 0x6b, 0x91, 0x04, 0xa0, 0x73, 0x59, 0x34, 0x06, 0x35, 0xd1, 0x8c,
	0x18, 0x0d, 0xcd, 0xb0, 0x4c, 0x93, 0x21, 0xf4, 0x53, 0x42, 0xc5, 0x14, 0x12, 0x11, 0x00, 0xf7,
	0x46, 0xca, 0x3f, 0x36, 0x12, 0x56, 0x35, 0xfc, 0x0f, 0x2d, 0xd2, 0x4b, 0x81, 0x54, 0x40, 0x1f,
	0x93, 0x9d, 0x9c, 0x3d, 0xab, 0x5b, 0x41, 0x56, 0xcb, 0x4e, 0x65, 0x29, 0x79, 0xed, 0xae, 0xe4,
	0x31, 0xd9, 0xc5, 0x91, 0xc0, 0x90, 0xbf, 0x4e, 0xaf, 0x23, 0x52, 0xf1, 0x7c, 0x75, 0xd8, 0x6a,
	0xb3, 0xd4, 0xaa, 0xf5, 0x9c, 0x37, 0xef, 0xf6, 0x96, 0xfe, 0x79, 0xb7, 0xb7, 0x1f, 0x44, 0x3a,
	0x9c, 0x78, 0x8e, 0xaf, 0xc6, 0x6d, 0xfb, 0x54, 0xb2, 0x9f, 0x47, 0x28, 0x8f, 0xed, 0xb3, 0x3c,
	0x04, 0xdf, 0x65, 0xc6, 0xf3, 0x99, 0xb5, 0x2c, 0x14, 0x93, 0x02, 0xd9, 0x5a, 0xd8, 0x2f, 0xaf,
	0x26, 0xbb, 0xfb, 0x5e, 0x5b, 0xd5, 0xe7, 0xb6, 0xb2, 0xc5, 0xa7, 0xcf, 0xc9, 0x47, 0x26, 0x1e,
	0xc5, 0x41, 0xf1, 0x40, 0x93, 0xd8, 0x53, 0xb1, 0xcc, 0xaf, 0x6d, 0xdd, 0xd4, 0xe6, 0x41, 0x4e,
	0x9c, 0xa5, 0xf9, 0xca, 0xb0, 0xec, 0xfd, 0x4d, 0x49, 0xf3, 0x5a, 0xc2, 0x32, 0x2d, 0xb5, 0xf1,
	0x15, 0x7a, 0x92, 0x00, 0xa3, 0xef, 0x95, 0xf9, 0xee, 0x42, 0xe6, 0xf2, 0x48, 0x87, 0x83, 0xdc,
	0x93, 0x7e, 0x47, 0xea, 0x73, 0x37, 0xc1, 0x13, 0x38, 0x15, 0x89, 0x64, 0x1b, 0xcd, 0x52, 0xab,
	0xda, 0xbd, 0xef, 0x64, 0x96, 0x4e, 0xda, 0xa9, 0x8e, 0xed, 0x54, 0xa7, 0xaf, 0xa2, 0xd8, 0x5d,
	0xc7, 0xab, 0x72, 0xbb, 0x46, 0xf3, 0x75, 0xf9, 0xf7, 0x7f, 0x9b, 0x4b, 0x0f, 0xff, 0x58, 0x26,
	0xb5, 0x6f, 0xb3, 0xa9, 0x33, 0xd0, 0x42, 0x03, 0xfd, 0x84, 0x54, 0x4e, 0x4c, 0x33, 0x9b, 0xf6,
	0xad, 0x76, 0xa9, 0x73, 0x35, 0x85, 0x9c, 0xac, 0xcd, 0x5d, 0xcb, 0xa0, 0x5f, 0x91, 0xfb, 0x23,
	0x81, 0x9a, 0x0b, 0xdf, 0x87, 0x13, 0x0d, 0x92, 0xc3, 0x14, 0x62, 0xcd, 0x63, 0x15, 0xfb, 0x60,
	0x9a, 0xba, 0xec, 0xde, 0x4b, 0x09, 0x4f, 0x2d, 0x7e, 0x94, 0xc2, 0x3f, 0xa4, 0x28, 0x7d, 0x4c,
	0xee, 0xce, 0x77, 0x1c, 0xbb, 0xd5, 0xbc, 0xd5, 0xaa, 0x76, 0xb7, 0x8a, 0xdb, 0x15, 0xde, 0x88,
	0x5b, 0x2b, 0x9c, 0x00, 0xe9, 0x6f, 0x84, 0xcd, 0x17, 0x62, 0x56, 0xf7, 0x74, 0x30, 0xa4, 0x46,
	0x1f, 0x17, 0x8d, 0xbe, 0xc7, 0xa0, 0xe0, 0x35, 0xab, 0xa7, 0xbb, 0x89, 0x37, 0x44, 0x91, 0x76,
	0xc8, 0xca, 0xac, 0x9d, 0xd9, 0x6d, 0x63, 0xb7, 0x51, 0xb4, 0xb3, 0x0f, 0xca, 0xbd, 0xe3, 0xd9,
	0xb6, 0xa6, 0xaf, 0xc8, 0x46, 0xae, 0x28, 0xa6, 0x52, 0x31, 0xda, 0xbd, 0x85, 0x54, 0xac, 0x7c,
	0xb6, 0x61, 0xaf, 0x9c, 0x3e, 0x12, 0x77, 0xdd, 0x5b, 0x88, 0x23, 0x7d, 0x46, 0xd6, 0x67, 0x03,
	0xd3, 0x17, 0xa3, 0x91, 0x49, 0x68, 0xd9, 0x98, 0x6e, 0x17, 0x4d, 0xfb, 0x96, 0xd4, 0x17, 0xa3,
	0xd1, 0xf0, 0xcc, 0x5d, 0xf3, 0xe7, 0xd6, 0x48, 0x8f, 0xc9, 0xce, 0xa2, 0x4f, 0x31, 0xcd, 0x3b,
	0xc6, 0x71, 0x7f, 0x21, 0xcd, 0x79, 0xd3, 0xc5, 0x6c, 0x99, 0x7f, 0x33, 0x8c, 0x34, 0x24, 0x3b,
	0xb3, 0xa1, 0x93, 0x3d, 0x88, 0xa9, 0xd2, 0xc0, 0x13, 0xf0, 0x55, 0x22, 0x91, 0xad, 0x5c, 0xbf,
	0x9e, 0x7c, 0x02, 0x99, 0xf7, 0xf1, 0xb3, 0xd2, 0xe0, 0x1a, 0x6e, 0xbe, 0x13, 0xdc, 0x0c, 0x23,
	0x7d, 0x42, 0x56, 0x25, 0x8c, 0x20, 0x10, 0x1a, 0xf8, 0x31, 0x9c, 0x23, 0x23, 0xc6, 0x7b, 0x67,
	0xe1, 0x20, 0x87, 0x96, 0xf3, 0x12, 0xce, 0xd1, 0xad, 0xc9, 0xc2, 0x8a, 0x3e, 0x21, 0x6b, 0x90,
	0xf8, 0xdd, 0x0e, 0xd7, 0x8a, 0x4b, 0x88, 0xd5, 0x18, 0x59, 0xd5, 0x78, 0xb0, 0xb9, 0xfc, 0xdc,
	0x7e, 0xb7, 0x33, 0x54, 0x87, 0x29, 0xc1, 0x5d, 0x35, 0x02, 0xbb, 0x42, 0xfa, 0x92, 0x6c, 0x4c,
	0x62, 0x73, 0x73, 0x20, 0xb9, 0x4e, 0x44, 0x8c, 0xaf, 0x21, 0x41, 0x56, 0xbb, 0x7e, 0x49, 0x03,
	0x88, 0xe5, 0x50, 0xe5, 0x67, 0x75, 0xe9, 0x4c, 0x36, 0xcc, 0x55, 0xbd, 0x9f, 0xde, 0x5c, 0x34,
	0x4a, 0x6f, 0x2f, 0x1a, 0xa5, 0xff, 0x2e, 0x1a, 0xa5, 0x3f, 0x2f, 0x1b, 0x4b, 0x6f, 0x2f, 0x1b,
	0x4b, 0x7f, 0x5f, 0x36, 0x96, 0x7e, 0xfd, 0xf2, 0xfa, 0xfc, 0xb0, 0xd6, 0x8f, 0xb2, 0x2f, 0x5a,
	0x7b, 0xac, 0xe4, 0x64, 0x04, 0xed, 0xb3, 0x3c, 0x9e, 0x0d, 0x15, 0xaf, 0x62, 0x3e, 0xd2, 0x9f,
	0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x8f, 0x43, 0x18, 0x67, 0x08, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignerSetTxReward != nil {
		{
			size, err := m.SignerSetTxReward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	{
		size := m.SlashFractionBadEthSignature.Size()
		i -= size
		if _, err := m.SlashFractionBadEthSignature.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if m.SlashingSignerSetUnbondWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SlashingSignerSetUnbondWindow))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	{
		size := m.SlashFractionBatchTx.Size()
		i -= size
		if _, err := m.SlashFractionBatchTx.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.SlashFractionSignerSetTx.Size()
		i -= size
		if _, err := m.SlashFractionSignerSetTx.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.AverageEthereumBlockTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AverageEthereumBlockTime))
		i--
		dAtA[i] = 0x60
	}
	if m.AverageBlockTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AverageBlockTime))
		i--
		dAtA[i] = 0x58
	}
	if m.TargetBatchTimeout != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TargetBatchTimeout))
		i--
		dAtA[i] = 0x50
	}
	if m.SignedBatchTxsWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignedBatchTxsWindow))
		i--
		dAtA[i] = 0x38
	}
	if m.SignedSignerSetTxsWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignedSignerSetTxsWindow))
		i--
		dAtA[i] = 0x30
	}
	if m.BridgeChainId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BridgeChainId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BridgeEthereumAddress) > 0 {
		i -= len(m.BridgeEthereumAddress)
		copy(dAtA[i:], m.BridgeEthereumAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.BridgeEthereumAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractSourceHash) > 0 {
		i -= len(m.ContractSourceHash)
		copy(dAtA[i:], m.ContractSourceHash)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ContractSourceHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GravityId) > 0 {
		i -= len(m.GravityId)
		copy(dAtA[i:], m.GravityId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.GravityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbatchedTransfers) > 0 {
		for iNdEx := len(m.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbatchedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Erc20ToDenoms) > 0 {
		for iNdEx := len(m.Erc20ToDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Erc20ToDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.DelegateKeys) > 0 {
		for iNdEx := len(m.DelegateKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegateKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.EthereumEventVoteRecords) > 0 {
		for iNdEx := len(m.EthereumEventVoteRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EthereumEventVoteRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ContractCallTxSignatures) > 0 {
		for iNdEx := len(m.ContractCallTxSignatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractCallTxSignatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ContractCallTxs) > 0 {
		for iNdEx := len(m.ContractCallTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractCallTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BatchTxSignatures) > 0 {
		for iNdEx := len(m.BatchTxSignatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchTxSignatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BatchTxs) > 0 {
		for iNdEx := len(m.BatchTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SignerSetTxSignatures) > 0 {
		for iNdEx := len(m.SignerSetTxSignatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignerSetTxSignatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SignerSetTxs) > 0 {
		for iNdEx := len(m.SignerSetTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignerSetTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LastAcceptedEventNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastAcceptedEventNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GravityId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ContractSourceHash)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.BridgeEthereumAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.BridgeChainId != 0 {
		n += 1 + sovGenesis(uint64(m.BridgeChainId))
	}
	if m.SignedSignerSetTxsWindow != 0 {
		n += 1 + sovGenesis(uint64(m.SignedSignerSetTxsWindow))
	}
	if m.SignedBatchTxsWindow != 0 {
		n += 1 + sovGenesis(uint64(m.SignedBatchTxsWindow))
	}
	if m.TargetBatchTimeout != 0 {
		n += 1 + sovGenesis(uint64(m.TargetBatchTimeout))
	}
	if m.AverageBlockTime != 0 {
		n += 1 + sovGenesis(uint64(m.AverageBlockTime))
	}
	if m.AverageEthereumBlockTime != 0 {
		n += 1 + sovGenesis(uint64(m.AverageEthereumBlockTime))
	}
	l = m.SlashFractionSignerSetTx.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SlashFractionBatchTx.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.SlashingSignerSetUnbondWindow != 0 {
		n += 2 + sovGenesis(uint64(m.SlashingSignerSetUnbondWindow))
	}
	l = m.SlashFractionBadEthSignature.Size()
	n += 2 + l + sovGenesis(uint64(l))
	if m.SignerSetTxReward != nil {
		l = m.SignerSetTxReward.Size()
		n += 2 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.LastAcceptedEventNonce != 0 {
		n += 1 + sovGenesis(uint64(m.LastAcceptedEventNonce))
	}
	if len(m.SignerSetTxs) > 0 {
		for _, e := range m.SignerSetTxs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SignerSetTxSignatures) > 0 {
		for _, e := range m.SignerSetTxSignatures {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BatchTxs) > 0 {
		for _, e := range m.BatchTxs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BatchTxSignatures) > 0 {
		for _, e := range m.BatchTxSignatures {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ContractCallTxs) > 0 {
		for _, e := range m.ContractCallTxs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ContractCallTxSignatures) > 0 {
		for _, e := range m.ContractCallTxSignatures {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.EthereumEventVoteRecords) > 0 {
		for _, e := range m.EthereumEventVoteRecords {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DelegateKeys) > 0 {
		for _, e := range m.DelegateKeys {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Erc20ToDenoms) > 0 {
		for _, e := range m.Erc20ToDenoms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbatchedTransfers) > 0 {
		for _, e := range m.UnbatchedTransfers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSourceHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSourceHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeEthereumAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeEthereumAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			m.BridgeChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedSignerSetTxsWindow", wireType)
			}
			m.SignedSignerSetTxsWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedSignerSetTxsWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedBatchTxsWindow", wireType)
			}
			m.SignedBatchTxsWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedBatchTxsWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetBatchTimeout", wireType)
			}
			m.TargetBatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetBatchTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBlockTime", wireType)
			}
			m.AverageBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageEthereumBlockTime", wireType)
			}
			m.AverageEthereumBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageEthereumBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionSignerSetTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionSignerSetTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionBatchTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionBatchTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingSignerSetUnbondWindow", wireType)
			}
			m.SlashingSignerSetUnbondWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashingSignerSetUnbondWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionBadEthSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionBadEthSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTxReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignerSetTxReward == nil {
				m.SignerSetTxReward = &types.Coin{}
			}
			if err := m.SignerSetTxReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAcceptedEventNonce", wireType)
			}
			m.LastAcceptedEventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAcceptedEventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerSetTxs = append(m.SignerSetTxs, &SignerSetTx{})
			if err := m.SignerSetTxs[len(m.SignerSetTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTxSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerSetTxSignatures = append(m.SignerSetTxSignatures, &MsgSignerSetTxSignature{})
			if err := m.SignerSetTxSignatures[len(m.SignerSetTxSignatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchTxs = append(m.BatchTxs, &BatchTx{})
			if err := m.BatchTxs[len(m.BatchTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTxSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchTxSignatures = append(m.BatchTxSignatures, MsgBatchTxSignature{})
			if err := m.BatchTxSignatures[len(m.BatchTxSignatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCallTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCallTxs = append(m.ContractCallTxs, &ContractCallTx{})
			if err := m.ContractCallTxs[len(m.ContractCallTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCallTxSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCallTxSignatures = append(m.ContractCallTxSignatures, MsgContractCallTxSignature{})
			if err := m.ContractCallTxSignatures[len(m.ContractCallTxSignatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumEventVoteRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumEventVoteRecords = append(m.EthereumEventVoteRecords, EthereumEventVoteRecord{})
			if err := m.EthereumEventVoteRecords[len(m.EthereumEventVoteRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateKeys = append(m.DelegateKeys, &MsgDelegateKeys{})
			if err := m.DelegateKeys[len(m.DelegateKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20ToDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20ToDenoms = append(m.Erc20ToDenoms, &ERC20ToDenom{})
			if err := m.Erc20ToDenoms[len(m.Erc20ToDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbatchedTransfers = append(m.UnbatchedTransfers, &SendToEthereum{})
			if err := m.UnbatchedTransfers[len(m.UnbatchedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
