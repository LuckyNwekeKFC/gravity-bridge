// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryCurrentSignerSetTxRequest struct {
}

func (m *QueryCurrentSignerSetTxRequest) Reset()         { *m = QueryCurrentSignerSetTxRequest{} }
func (m *QueryCurrentSignerSetTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentSignerSetTxRequest) ProtoMessage()    {}
func (*QueryCurrentSignerSetTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{2}
}
func (m *QueryCurrentSignerSetTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentSignerSetTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentSignerSetTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentSignerSetTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentSignerSetTxRequest.Merge(m, src)
}
func (m *QueryCurrentSignerSetTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentSignerSetTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentSignerSetTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentSignerSetTxRequest proto.InternalMessageInfo

type QueryCurrentSignerSetTxResponse struct {
	SignerSetTx *SignerSetTx `protobuf:"bytes,1,opt,name=signer_set_tx,json=signerSetTx,proto3" json:"signer_set_tx,omitempty"`
}

func (m *QueryCurrentSignerSetTxResponse) Reset()         { *m = QueryCurrentSignerSetTxResponse{} }
func (m *QueryCurrentSignerSetTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentSignerSetTxResponse) ProtoMessage()    {}
func (*QueryCurrentSignerSetTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{3}
}
func (m *QueryCurrentSignerSetTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentSignerSetTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentSignerSetTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentSignerSetTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentSignerSetTxResponse.Merge(m, src)
}
func (m *QueryCurrentSignerSetTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentSignerSetTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentSignerSetTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentSignerSetTxResponse proto.InternalMessageInfo

func (m *QueryCurrentSignerSetTxResponse) GetSignerSetTx() *SignerSetTx {
	if m != nil {
		return m.SignerSetTx
	}
	return nil
}

type QuerySignerSetTxRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QuerySignerSetTxRequest) Reset()         { *m = QuerySignerSetTxRequest{} }
func (m *QuerySignerSetTxRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySignerSetTxRequest) ProtoMessage()    {}
func (*QuerySignerSetTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{4}
}
func (m *QuerySignerSetTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignerSetTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignerSetTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignerSetTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignerSetTxRequest.Merge(m, src)
}
func (m *QuerySignerSetTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignerSetTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignerSetTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignerSetTxRequest proto.InternalMessageInfo

func (m *QuerySignerSetTxRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QuerySignerSetTxResponse struct {
	SignerSetTx *SignerSetTx `protobuf:"bytes,1,opt,name=signer_set_tx,json=signerSetTx,proto3" json:"signer_set_tx,omitempty"`
}

func (m *QuerySignerSetTxResponse) Reset()         { *m = QuerySignerSetTxResponse{} }
func (m *QuerySignerSetTxResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySignerSetTxResponse) ProtoMessage()    {}
func (*QuerySignerSetTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{5}
}
func (m *QuerySignerSetTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignerSetTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignerSetTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignerSetTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignerSetTxResponse.Merge(m, src)
}
func (m *QuerySignerSetTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignerSetTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignerSetTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignerSetTxResponse proto.InternalMessageInfo

func (m *QuerySignerSetTxResponse) GetSignerSetTx() *SignerSetTx {
	if m != nil {
		return m.SignerSetTx
	}
	return nil
}

type QuerySignerSetTxSignatureRequest struct {
	Nonce   uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QuerySignerSetTxSignatureRequest) Reset()         { *m = QuerySignerSetTxSignatureRequest{} }
func (m *QuerySignerSetTxSignatureRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySignerSetTxSignatureRequest) ProtoMessage()    {}
func (*QuerySignerSetTxSignatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{6}
}
func (m *QuerySignerSetTxSignatureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignerSetTxSignatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignerSetTxSignatureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignerSetTxSignatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignerSetTxSignatureRequest.Merge(m, src)
}
func (m *QuerySignerSetTxSignatureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignerSetTxSignatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignerSetTxSignatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignerSetTxSignatureRequest proto.InternalMessageInfo

func (m *QuerySignerSetTxSignatureRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QuerySignerSetTxSignatureRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QuerySignerSetTxSignatureResponse struct {
	SignatureMsg *MsgSignerSetTxSignature `protobuf:"bytes,1,opt,name=signature_msg,json=signatureMsg,proto3" json:"signature_msg,omitempty"`
}

func (m *QuerySignerSetTxSignatureResponse) Reset()         { *m = QuerySignerSetTxSignatureResponse{} }
func (m *QuerySignerSetTxSignatureResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySignerSetTxSignatureResponse) ProtoMessage()    {}
func (*QuerySignerSetTxSignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{7}
}
func (m *QuerySignerSetTxSignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignerSetTxSignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignerSetTxSignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignerSetTxSignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignerSetTxSignatureResponse.Merge(m, src)
}
func (m *QuerySignerSetTxSignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignerSetTxSignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignerSetTxSignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignerSetTxSignatureResponse proto.InternalMessageInfo

func (m *QuerySignerSetTxSignatureResponse) GetSignatureMsg() *MsgSignerSetTxSignature {
	if m != nil {
		return m.SignatureMsg
	}
	return nil
}

type QuerySignerSetTxSignaturesByNonceRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QuerySignerSetTxSignaturesByNonceRequest) Reset() {
	*m = QuerySignerSetTxSignaturesByNonceRequest{}
}
func (m *QuerySignerSetTxSignaturesByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySignerSetTxSignaturesByNonceRequest) ProtoMessage()    {}
func (*QuerySignerSetTxSignaturesByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{8}
}
func (m *QuerySignerSetTxSignaturesByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignerSetTxSignaturesByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignerSetTxSignaturesByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignerSetTxSignaturesByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignerSetTxSignaturesByNonceRequest.Merge(m, src)
}
func (m *QuerySignerSetTxSignaturesByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignerSetTxSignaturesByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignerSetTxSignaturesByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignerSetTxSignaturesByNonceRequest proto.InternalMessageInfo

func (m *QuerySignerSetTxSignaturesByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QuerySignerSetTxSignaturesByNonceResponse struct {
	SignatureMsg []*MsgSignerSetTxSignature `protobuf:"bytes,1,rep,name=signature_msg,json=signatureMsg,proto3" json:"signature_msg,omitempty"`
}

func (m *QuerySignerSetTxSignaturesByNonceResponse) Reset() {
	*m = QuerySignerSetTxSignaturesByNonceResponse{}
}
func (m *QuerySignerSetTxSignaturesByNonceResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QuerySignerSetTxSignaturesByNonceResponse) ProtoMessage() {}
func (*QuerySignerSetTxSignaturesByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{9}
}
func (m *QuerySignerSetTxSignaturesByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignerSetTxSignaturesByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignerSetTxSignaturesByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignerSetTxSignaturesByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignerSetTxSignaturesByNonceResponse.Merge(m, src)
}
func (m *QuerySignerSetTxSignaturesByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignerSetTxSignaturesByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignerSetTxSignaturesByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignerSetTxSignaturesByNonceResponse proto.InternalMessageInfo

func (m *QuerySignerSetTxSignaturesByNonceResponse) GetSignatureMsg() []*MsgSignerSetTxSignature {
	if m != nil {
		return m.SignatureMsg
	}
	return nil
}

type QueryLastSignerSetTxsRequest struct {
}

func (m *QueryLastSignerSetTxsRequest) Reset()         { *m = QueryLastSignerSetTxsRequest{} }
func (m *QueryLastSignerSetTxsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastSignerSetTxsRequest) ProtoMessage()    {}
func (*QueryLastSignerSetTxsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{10}
}
func (m *QueryLastSignerSetTxsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastSignerSetTxsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastSignerSetTxsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastSignerSetTxsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastSignerSetTxsRequest.Merge(m, src)
}
func (m *QueryLastSignerSetTxsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastSignerSetTxsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastSignerSetTxsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastSignerSetTxsRequest proto.InternalMessageInfo

type QueryLastSignerSetTxsResponse struct {
	SignerSetTxs []*SignerSetTx `protobuf:"bytes,1,rep,name=signer_set_txs,json=signerSetTxs,proto3" json:"signer_set_txs,omitempty"`
}

func (m *QueryLastSignerSetTxsResponse) Reset()         { *m = QueryLastSignerSetTxsResponse{} }
func (m *QueryLastSignerSetTxsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastSignerSetTxsResponse) ProtoMessage()    {}
func (*QueryLastSignerSetTxsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{11}
}
func (m *QueryLastSignerSetTxsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastSignerSetTxsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastSignerSetTxsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastSignerSetTxsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastSignerSetTxsResponse.Merge(m, src)
}
func (m *QueryLastSignerSetTxsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastSignerSetTxsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastSignerSetTxsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastSignerSetTxsResponse proto.InternalMessageInfo

func (m *QueryLastSignerSetTxsResponse) GetSignerSetTxs() []*SignerSetTx {
	if m != nil {
		return m.SignerSetTxs
	}
	return nil
}

type QueryLastPendingSignerSetTxByAddrRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryLastPendingSignerSetTxByAddrRequest) Reset() {
	*m = QueryLastPendingSignerSetTxByAddrRequest{}
}
func (m *QueryLastPendingSignerSetTxByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastPendingSignerSetTxByAddrRequest) ProtoMessage()    {}
func (*QueryLastPendingSignerSetTxByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{12}
}
func (m *QueryLastPendingSignerSetTxByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingSignerSetTxByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingSignerSetTxByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingSignerSetTxByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingSignerSetTxByAddrRequest.Merge(m, src)
}
func (m *QueryLastPendingSignerSetTxByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingSignerSetTxByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingSignerSetTxByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingSignerSetTxByAddrRequest proto.InternalMessageInfo

func (m *QueryLastPendingSignerSetTxByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryLastPendingSignerSetTxByAddrResponse struct {
	SignerSetTxs []*SignerSetTx `protobuf:"bytes,1,rep,name=signer_set_txs,json=signerSetTxs,proto3" json:"signer_set_txs,omitempty"`
}

func (m *QueryLastPendingSignerSetTxByAddrResponse) Reset() {
	*m = QueryLastPendingSignerSetTxByAddrResponse{}
}
func (m *QueryLastPendingSignerSetTxByAddrResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingSignerSetTxByAddrResponse) ProtoMessage() {}
func (*QueryLastPendingSignerSetTxByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{13}
}
func (m *QueryLastPendingSignerSetTxByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingSignerSetTxByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingSignerSetTxByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingSignerSetTxByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingSignerSetTxByAddrResponse.Merge(m, src)
}
func (m *QueryLastPendingSignerSetTxByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingSignerSetTxByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingSignerSetTxByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingSignerSetTxByAddrResponse proto.InternalMessageInfo

func (m *QueryLastPendingSignerSetTxByAddrResponse) GetSignerSetTxs() []*SignerSetTx {
	if m != nil {
		return m.SignerSetTxs
	}
	return nil
}

type QueryBatchFeeRequest struct {
}

func (m *QueryBatchFeeRequest) Reset()         { *m = QueryBatchFeeRequest{} }
func (m *QueryBatchFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchFeeRequest) ProtoMessage()    {}
func (*QueryBatchFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{14}
}
func (m *QueryBatchFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchFeeRequest.Merge(m, src)
}
func (m *QueryBatchFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchFeeRequest proto.InternalMessageInfo

type QueryBatchFeeResponse struct {
	BatchFees []*BatchFees `protobuf:"bytes,1,rep,name=batch_fees,json=batchFees,proto3" json:"batch_fees,omitempty"`
}

func (m *QueryBatchFeeResponse) Reset()         { *m = QueryBatchFeeResponse{} }
func (m *QueryBatchFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchFeeResponse) ProtoMessage()    {}
func (*QueryBatchFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{15}
}
func (m *QueryBatchFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchFeeResponse.Merge(m, src)
}
func (m *QueryBatchFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchFeeResponse proto.InternalMessageInfo

func (m *QueryBatchFeeResponse) GetBatchFees() []*BatchFees {
	if m != nil {
		return m.BatchFees
	}
	return nil
}

type QueryLastPendingBatchTxByAddrRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryLastPendingBatchTxByAddrRequest) Reset()         { *m = QueryLastPendingBatchTxByAddrRequest{} }
func (m *QueryLastPendingBatchTxByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastPendingBatchTxByAddrRequest) ProtoMessage()    {}
func (*QueryLastPendingBatchTxByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{16}
}
func (m *QueryLastPendingBatchTxByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingBatchTxByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingBatchTxByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingBatchTxByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingBatchTxByAddrRequest.Merge(m, src)
}
func (m *QueryLastPendingBatchTxByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingBatchTxByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingBatchTxByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingBatchTxByAddrRequest proto.InternalMessageInfo

func (m *QueryLastPendingBatchTxByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryLastPendingBatchTxByAddrResponse struct {
	Batch *BatchTx `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (m *QueryLastPendingBatchTxByAddrResponse) Reset()         { *m = QueryLastPendingBatchTxByAddrResponse{} }
func (m *QueryLastPendingBatchTxByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastPendingBatchTxByAddrResponse) ProtoMessage()    {}
func (*QueryLastPendingBatchTxByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{17}
}
func (m *QueryLastPendingBatchTxByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingBatchTxByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingBatchTxByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingBatchTxByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingBatchTxByAddrResponse.Merge(m, src)
}
func (m *QueryLastPendingBatchTxByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingBatchTxByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingBatchTxByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingBatchTxByAddrResponse proto.InternalMessageInfo

func (m *QueryLastPendingBatchTxByAddrResponse) GetBatch() *BatchTx {
	if m != nil {
		return m.Batch
	}
	return nil
}

type QueryLastPendingContractCallTxByAddrRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryLastPendingContractCallTxByAddrRequest) Reset() {
	*m = QueryLastPendingContractCallTxByAddrRequest{}
}
func (m *QueryLastPendingContractCallTxByAddrRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingContractCallTxByAddrRequest) ProtoMessage() {}
func (*QueryLastPendingContractCallTxByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{18}
}
func (m *QueryLastPendingContractCallTxByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingContractCallTxByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingContractCallTxByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingContractCallTxByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingContractCallTxByAddrRequest.Merge(m, src)
}
func (m *QueryLastPendingContractCallTxByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingContractCallTxByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingContractCallTxByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingContractCallTxByAddrRequest proto.InternalMessageInfo

func (m *QueryLastPendingContractCallTxByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryLastPendingContractCallTxByAddrResponse struct {
	Call *ContractCallTx `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
}

func (m *QueryLastPendingContractCallTxByAddrResponse) Reset() {
	*m = QueryLastPendingContractCallTxByAddrResponse{}
}
func (m *QueryLastPendingContractCallTxByAddrResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingContractCallTxByAddrResponse) ProtoMessage() {}
func (*QueryLastPendingContractCallTxByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{19}
}
func (m *QueryLastPendingContractCallTxByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingContractCallTxByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingContractCallTxByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingContractCallTxByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingContractCallTxByAddrResponse.Merge(m, src)
}
func (m *QueryLastPendingContractCallTxByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingContractCallTxByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingContractCallTxByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingContractCallTxByAddrResponse proto.InternalMessageInfo

func (m *QueryLastPendingContractCallTxByAddrResponse) GetCall() *ContractCallTx {
	if m != nil {
		return m.Call
	}
	return nil
}

type QueryBatchTxsRequest struct {
}

func (m *QueryBatchTxsRequest) Reset()         { *m = QueryBatchTxsRequest{} }
func (m *QueryBatchTxsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchTxsRequest) ProtoMessage()    {}
func (*QueryBatchTxsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{20}
}
func (m *QueryBatchTxsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchTxsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchTxsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchTxsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchTxsRequest.Merge(m, src)
}
func (m *QueryBatchTxsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchTxsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchTxsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchTxsRequest proto.InternalMessageInfo

type QueryBatchTxsResponse struct {
	Batches []*BatchTx `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (m *QueryBatchTxsResponse) Reset()         { *m = QueryBatchTxsResponse{} }
func (m *QueryBatchTxsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchTxsResponse) ProtoMessage()    {}
func (*QueryBatchTxsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{21}
}
func (m *QueryBatchTxsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchTxsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchTxsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchTxsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchTxsResponse.Merge(m, src)
}
func (m *QueryBatchTxsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchTxsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchTxsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchTxsResponse proto.InternalMessageInfo

func (m *QueryBatchTxsResponse) GetBatches() []*BatchTx {
	if m != nil {
		return m.Batches
	}
	return nil
}

type QueryContractCallTxsRequest struct {
}

func (m *QueryContractCallTxsRequest) Reset()         { *m = QueryContractCallTxsRequest{} }
func (m *QueryContractCallTxsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryContractCallTxsRequest) ProtoMessage()    {}
func (*QueryContractCallTxsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{22}
}
func (m *QueryContractCallTxsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractCallTxsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractCallTxsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractCallTxsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractCallTxsRequest.Merge(m, src)
}
func (m *QueryContractCallTxsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractCallTxsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractCallTxsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractCallTxsRequest proto.InternalMessageInfo

type QueryContractCallTxsResponse struct {
	Calls []*ContractCallTx `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (m *QueryContractCallTxsResponse) Reset()         { *m = QueryContractCallTxsResponse{} }
func (m *QueryContractCallTxsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryContractCallTxsResponse) ProtoMessage()    {}
func (*QueryContractCallTxsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{23}
}
func (m *QueryContractCallTxsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractCallTxsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractCallTxsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractCallTxsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractCallTxsResponse.Merge(m, src)
}
func (m *QueryContractCallTxsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractCallTxsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractCallTxsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractCallTxsResponse proto.InternalMessageInfo

func (m *QueryContractCallTxsResponse) GetCalls() []*ContractCallTx {
	if m != nil {
		return m.Calls
	}
	return nil
}

type QueryBatchTxByNonceRequest struct {
	Nonce           uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryBatchTxByNonceRequest) Reset()         { *m = QueryBatchTxByNonceRequest{} }
func (m *QueryBatchTxByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchTxByNonceRequest) ProtoMessage()    {}
func (*QueryBatchTxByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{24}
}
func (m *QueryBatchTxByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchTxByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchTxByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchTxByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchTxByNonceRequest.Merge(m, src)
}
func (m *QueryBatchTxByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchTxByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchTxByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchTxByNonceRequest proto.InternalMessageInfo

func (m *QueryBatchTxByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QueryBatchTxByNonceRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type QueryBatchTxByNonceResponse struct {
	Batch *BatchTx `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (m *QueryBatchTxByNonceResponse) Reset()         { *m = QueryBatchTxByNonceResponse{} }
func (m *QueryBatchTxByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchTxByNonceResponse) ProtoMessage()    {}
func (*QueryBatchTxByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{25}
}
func (m *QueryBatchTxByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchTxByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchTxByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchTxByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchTxByNonceResponse.Merge(m, src)
}
func (m *QueryBatchTxByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchTxByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchTxByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchTxByNonceResponse proto.InternalMessageInfo

func (m *QueryBatchTxByNonceResponse) GetBatch() *BatchTx {
	if m != nil {
		return m.Batch
	}
	return nil
}

type QueryBatchTxSignaturesRequest struct {
	Nonce           uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryBatchTxSignaturesRequest) Reset()         { *m = QueryBatchTxSignaturesRequest{} }
func (m *QueryBatchTxSignaturesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchTxSignaturesRequest) ProtoMessage()    {}
func (*QueryBatchTxSignaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{26}
}
func (m *QueryBatchTxSignaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchTxSignaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchTxSignaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchTxSignaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchTxSignaturesRequest.Merge(m, src)
}
func (m *QueryBatchTxSignaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchTxSignaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchTxSignaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchTxSignaturesRequest proto.InternalMessageInfo

func (m *QueryBatchTxSignaturesRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QueryBatchTxSignaturesRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type QueryBatchTxSignaturesResponse struct {
	SignatureMsg []*MsgBatchTxSignature `protobuf:"bytes,1,rep,name=signature_msg,json=signatureMsg,proto3" json:"signature_msg,omitempty"`
}

func (m *QueryBatchTxSignaturesResponse) Reset()         { *m = QueryBatchTxSignaturesResponse{} }
func (m *QueryBatchTxSignaturesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchTxSignaturesResponse) ProtoMessage()    {}
func (*QueryBatchTxSignaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{27}
}
func (m *QueryBatchTxSignaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchTxSignaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchTxSignaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchTxSignaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchTxSignaturesResponse.Merge(m, src)
}
func (m *QueryBatchTxSignaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchTxSignaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchTxSignaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchTxSignaturesResponse proto.InternalMessageInfo

func (m *QueryBatchTxSignaturesResponse) GetSignatureMsg() []*MsgBatchTxSignature {
	if m != nil {
		return m.SignatureMsg
	}
	return nil
}

type QueryContractCallTxSignaturesRequest struct {
	InvalidationId    []byte `protobuf:"bytes,1,opt,name=invalidation_id,json=invalidationId,proto3" json:"invalidation_id,omitempty"`
	InvalidationNonce uint64 `protobuf:"varint,2,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
}

func (m *QueryContractCallTxSignaturesRequest) Reset()         { *m = QueryContractCallTxSignaturesRequest{} }
func (m *QueryContractCallTxSignaturesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryContractCallTxSignaturesRequest) ProtoMessage()    {}
func (*QueryContractCallTxSignaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{28}
}
func (m *QueryContractCallTxSignaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractCallTxSignaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractCallTxSignaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractCallTxSignaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractCallTxSignaturesRequest.Merge(m, src)
}
func (m *QueryContractCallTxSignaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractCallTxSignaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractCallTxSignaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractCallTxSignaturesRequest proto.InternalMessageInfo

func (m *QueryContractCallTxSignaturesRequest) GetInvalidationId() []byte {
	if m != nil {
		return m.InvalidationId
	}
	return nil
}

func (m *QueryContractCallTxSignaturesRequest) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

type QueryContractCallTxSignaturesResponse struct {
	Confirms []*MsgContractCallTxSignature `protobuf:"bytes,1,rep,name=confirms,proto3" json:"confirms,omitempty"`
}

func (m *QueryContractCallTxSignaturesResponse) Reset()         { *m = QueryContractCallTxSignaturesResponse{} }
func (m *QueryContractCallTxSignaturesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryContractCallTxSignaturesResponse) ProtoMessage()    {}
func (*QueryContractCallTxSignaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{29}
}
func (m *QueryContractCallTxSignaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractCallTxSignaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractCallTxSignaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractCallTxSignaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractCallTxSignaturesResponse.Merge(m, src)
}
func (m *QueryContractCallTxSignaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractCallTxSignaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractCallTxSignaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractCallTxSignaturesResponse proto.InternalMessageInfo

func (m *QueryContractCallTxSignaturesResponse) GetConfirms() []*MsgContractCallTxSignature {
	if m != nil {
		return m.Confirms
	}
	return nil
}

type QueryLastEventNonceByAddrRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryLastEventNonceByAddrRequest) Reset()         { *m = QueryLastEventNonceByAddrRequest{} }
func (m *QueryLastEventNonceByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastEventNonceByAddrRequest) ProtoMessage()    {}
func (*QueryLastEventNonceByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{30}
}
func (m *QueryLastEventNonceByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastEventNonceByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastEventNonceByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastEventNonceByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastEventNonceByAddrRequest.Merge(m, src)
}
func (m *QueryLastEventNonceByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastEventNonceByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastEventNonceByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastEventNonceByAddrRequest proto.InternalMessageInfo

func (m *QueryLastEventNonceByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryLastEventNonceByAddrResponse struct {
	EventNonce uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
}

func (m *QueryLastEventNonceByAddrResponse) Reset()         { *m = QueryLastEventNonceByAddrResponse{} }
func (m *QueryLastEventNonceByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastEventNonceByAddrResponse) ProtoMessage()    {}
func (*QueryLastEventNonceByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{31}
}
func (m *QueryLastEventNonceByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastEventNonceByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastEventNonceByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastEventNonceByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastEventNonceByAddrResponse.Merge(m, src)
}
func (m *QueryLastEventNonceByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastEventNonceByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastEventNonceByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastEventNonceByAddrResponse proto.InternalMessageInfo

func (m *QueryLastEventNonceByAddrResponse) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

type QueryERC20ToDenomRequest struct {
	Erc20 string `protobuf:"bytes,1,opt,name=erc20,proto3" json:"erc20,omitempty"`
}

func (m *QueryERC20ToDenomRequest) Reset()         { *m = QueryERC20ToDenomRequest{} }
func (m *QueryERC20ToDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryERC20ToDenomRequest) ProtoMessage()    {}
func (*QueryERC20ToDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{32}
}
func (m *QueryERC20ToDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryERC20ToDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryERC20ToDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryERC20ToDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryERC20ToDenomRequest.Merge(m, src)
}
func (m *QueryERC20ToDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryERC20ToDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryERC20ToDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryERC20ToDenomRequest proto.InternalMessageInfo

func (m *QueryERC20ToDenomRequest) GetErc20() string {
	if m != nil {
		return m.Erc20
	}
	return ""
}

type QueryERC20ToDenomResponse struct {
	Denom            string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	CosmosOriginated bool   `protobuf:"varint,2,opt,name=cosmos_originated,json=cosmosOriginated,proto3" json:"cosmos_originated,omitempty"`
}

func (m *QueryERC20ToDenomResponse) Reset()         { *m = QueryERC20ToDenomResponse{} }
func (m *QueryERC20ToDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryERC20ToDenomResponse) ProtoMessage()    {}
func (*QueryERC20ToDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{33}
}
func (m *QueryERC20ToDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryERC20ToDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryERC20ToDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryERC20ToDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryERC20ToDenomResponse.Merge(m, src)
}
func (m *QueryERC20ToDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryERC20ToDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryERC20ToDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryERC20ToDenomResponse proto.InternalMessageInfo

func (m *QueryERC20ToDenomResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryERC20ToDenomResponse) GetCosmosOriginated() bool {
	if m != nil {
		return m.CosmosOriginated
	}
	return false
}

type QueryDenomToERC20Request struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryDenomToERC20Request) Reset()         { *m = QueryDenomToERC20Request{} }
func (m *QueryDenomToERC20Request) String() string { return proto.CompactTextString(m) }
func (*QueryDenomToERC20Request) ProtoMessage()    {}
func (*QueryDenomToERC20Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{34}
}
func (m *QueryDenomToERC20Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomToERC20Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomToERC20Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomToERC20Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomToERC20Request.Merge(m, src)
}
func (m *QueryDenomToERC20Request) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomToERC20Request) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomToERC20Request.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomToERC20Request proto.InternalMessageInfo

func (m *QueryDenomToERC20Request) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryDenomToERC20Response struct {
	Erc20            string `protobuf:"bytes,1,opt,name=erc20,proto3" json:"erc20,omitempty"`
	CosmosOriginated bool   `protobuf:"varint,2,opt,name=cosmos_originated,json=cosmosOriginated,proto3" json:"cosmos_originated,omitempty"`
}

func (m *QueryDenomToERC20Response) Reset()         { *m = QueryDenomToERC20Response{} }
func (m *QueryDenomToERC20Response) String() string { return proto.CompactTextString(m) }
func (*QueryDenomToERC20Response) ProtoMessage()    {}
func (*QueryDenomToERC20Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{35}
}
func (m *QueryDenomToERC20Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomToERC20Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomToERC20Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomToERC20Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomToERC20Response.Merge(m, src)
}
func (m *QueryDenomToERC20Response) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomToERC20Response) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomToERC20Response.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomToERC20Response proto.InternalMessageInfo

func (m *QueryDenomToERC20Response) GetErc20() string {
	if m != nil {
		return m.Erc20
	}
	return ""
}

func (m *QueryDenomToERC20Response) GetCosmosOriginated() bool {
	if m != nil {
		return m.CosmosOriginated
	}
	return false
}

type QueryDelegateKeysByValidatorAddress struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryDelegateKeysByValidatorAddress) Reset()         { *m = QueryDelegateKeysByValidatorAddress{} }
func (m *QueryDelegateKeysByValidatorAddress) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateKeysByValidatorAddress) ProtoMessage()    {}
func (*QueryDelegateKeysByValidatorAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{36}
}
func (m *QueryDelegateKeysByValidatorAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateKeysByValidatorAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateKeysByValidatorAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateKeysByValidatorAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateKeysByValidatorAddress.Merge(m, src)
}
func (m *QueryDelegateKeysByValidatorAddress) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateKeysByValidatorAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateKeysByValidatorAddress.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateKeysByValidatorAddress proto.InternalMessageInfo

func (m *QueryDelegateKeysByValidatorAddress) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type QueryDelegateKeysByValidatorAddressResponse struct {
	EthAddress          string `protobuf:"bytes,1,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *QueryDelegateKeysByValidatorAddressResponse) Reset() {
	*m = QueryDelegateKeysByValidatorAddressResponse{}
}
func (m *QueryDelegateKeysByValidatorAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegateKeysByValidatorAddressResponse) ProtoMessage() {}
func (*QueryDelegateKeysByValidatorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{37}
}
func (m *QueryDelegateKeysByValidatorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateKeysByValidatorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateKeysByValidatorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateKeysByValidatorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateKeysByValidatorAddressResponse.Merge(m, src)
}
func (m *QueryDelegateKeysByValidatorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateKeysByValidatorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateKeysByValidatorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateKeysByValidatorAddressResponse proto.InternalMessageInfo

func (m *QueryDelegateKeysByValidatorAddressResponse) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *QueryDelegateKeysByValidatorAddressResponse) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type QueryDelegateKeysByEthAddress struct {
	EthAddress string `protobuf:"bytes,1,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
}

func (m *QueryDelegateKeysByEthAddress) Reset()         { *m = QueryDelegateKeysByEthAddress{} }
func (m *QueryDelegateKeysByEthAddress) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateKeysByEthAddress) ProtoMessage()    {}
func (*QueryDelegateKeysByEthAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{38}
}
func (m *QueryDelegateKeysByEthAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateKeysByEthAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateKeysByEthAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateKeysByEthAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateKeysByEthAddress.Merge(m, src)
}
func (m *QueryDelegateKeysByEthAddress) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateKeysByEthAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateKeysByEthAddress.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateKeysByEthAddress proto.InternalMessageInfo

func (m *QueryDelegateKeysByEthAddress) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

type QueryDelegateKeysByEthAddressResponse struct {
	ValidatorAddress    string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *QueryDelegateKeysByEthAddressResponse) Reset()         { *m = QueryDelegateKeysByEthAddressResponse{} }
func (m *QueryDelegateKeysByEthAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateKeysByEthAddressResponse) ProtoMessage()    {}
func (*QueryDelegateKeysByEthAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{39}
}
func (m *QueryDelegateKeysByEthAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateKeysByEthAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateKeysByEthAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateKeysByEthAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateKeysByEthAddressResponse.Merge(m, src)
}
func (m *QueryDelegateKeysByEthAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateKeysByEthAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateKeysByEthAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateKeysByEthAddressResponse proto.InternalMessageInfo

func (m *QueryDelegateKeysByEthAddressResponse) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *QueryDelegateKeysByEthAddressResponse) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type QueryDelegateKeysByOrchestratorAddress struct {
	OrchestratorAddress string `protobuf:"bytes,1,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *QueryDelegateKeysByOrchestratorAddress) Reset() {
	*m = QueryDelegateKeysByOrchestratorAddress{}
}
func (m *QueryDelegateKeysByOrchestratorAddress) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateKeysByOrchestratorAddress) ProtoMessage()    {}
func (*QueryDelegateKeysByOrchestratorAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{40}
}
func (m *QueryDelegateKeysByOrchestratorAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateKeysByOrchestratorAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateKeysByOrchestratorAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateKeysByOrchestratorAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateKeysByOrchestratorAddress.Merge(m, src)
}
func (m *QueryDelegateKeysByOrchestratorAddress) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateKeysByOrchestratorAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateKeysByOrchestratorAddress.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateKeysByOrchestratorAddress proto.InternalMessageInfo

func (m *QueryDelegateKeysByOrchestratorAddress) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type QueryDelegateKeysByOrchestratorAddressResponse struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	EthAddress       string `protobuf:"bytes,2,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
}

func (m *QueryDelegateKeysByOrchestratorAddressResponse) Reset() {
	*m = QueryDelegateKeysByOrchestratorAddressResponse{}
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegateKeysByOrchestratorAddressResponse) ProtoMessage() {}
func (*QueryDelegateKeysByOrchestratorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{41}
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateKeysByOrchestratorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateKeysByOrchestratorAddressResponse.Merge(m, src)
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateKeysByOrchestratorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateKeysByOrchestratorAddressResponse proto.InternalMessageInfo

func (m *QueryDelegateKeysByOrchestratorAddressResponse) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *QueryDelegateKeysByOrchestratorAddressResponse) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

type QueryPendingSendToEthereumRequest struct {
	SenderAddress string `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
}

func (m *QueryPendingSendToEthereumRequest) Reset()         { *m = QueryPendingSendToEthereumRequest{} }
func (m *QueryPendingSendToEthereumRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSendToEthereumRequest) ProtoMessage()    {}
func (*QueryPendingSendToEthereumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{42}
}
func (m *QueryPendingSendToEthereumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSendToEthereumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSendToEthereumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSendToEthereumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSendToEthereumRequest.Merge(m, src)
}
func (m *QueryPendingSendToEthereumRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSendToEthereumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSendToEthereumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSendToEthereumRequest proto.InternalMessageInfo

func (m *QueryPendingSendToEthereumRequest) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

type QueryPendingSendToEthereumResponse struct {
	TransfersInBatches []*SendToEthereum `protobuf:"bytes,1,rep,name=transfers_in_batches,json=transfersInBatches,proto3" json:"transfers_in_batches,omitempty"`
	UnbatchedTransfers []*SendToEthereum `protobuf:"bytes,2,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers,omitempty"`
}

func (m *QueryPendingSendToEthereumResponse) Reset()         { *m = QueryPendingSendToEthereumResponse{} }
func (m *QueryPendingSendToEthereumResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSendToEthereumResponse) ProtoMessage()    {}
func (*QueryPendingSendToEthereumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{43}
}
func (m *QueryPendingSendToEthereumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSendToEthereumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSendToEthereumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSendToEthereumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSendToEthereumResponse.Merge(m, src)
}
func (m *QueryPendingSendToEthereumResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSendToEthereumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSendToEthereumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSendToEthereumResponse proto.InternalMessageInfo

func (m *QueryPendingSendToEthereumResponse) GetTransfersInBatches() []*SendToEthereum {
	if m != nil {
		return m.TransfersInBatches
	}
	return nil
}

func (m *QueryPendingSendToEthereumResponse) GetUnbatchedTransfers() []*SendToEthereum {
	if m != nil {
		return m.UnbatchedTransfers
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "gravity.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "gravity.v1.QueryParamsResponse")
	proto.RegisterType((*QueryCurrentSignerSetTxRequest)(nil), "gravity.v1.QueryCurrentSignerSetTxRequest")
	proto.RegisterType((*QueryCurrentSignerSetTxResponse)(nil), "gravity.v1.QueryCurrentSignerSetTxResponse")
	proto.RegisterType((*QuerySignerSetTxRequest)(nil), "gravity.v1.QuerySignerSetTxRequest")
	proto.RegisterType((*QuerySignerSetTxResponse)(nil), "gravity.v1.QuerySignerSetTxResponse")
	proto.RegisterType((*QuerySignerSetTxSignatureRequest)(nil), "gravity.v1.QuerySignerSetTxSignatureRequest")
	proto.RegisterType((*QuerySignerSetTxSignatureResponse)(nil), "gravity.v1.QuerySignerSetTxSignatureResponse")
	proto.RegisterType((*QuerySignerSetTxSignaturesByNonceRequest)(nil), "gravity.v1.QuerySignerSetTxSignaturesByNonceRequest")
	proto.RegisterType((*QuerySignerSetTxSignaturesByNonceResponse)(nil), "gravity.v1.QuerySignerSetTxSignaturesByNonceResponse")
	proto.RegisterType((*QueryLastSignerSetTxsRequest)(nil), "gravity.v1.QueryLastSignerSetTxsRequest")
	proto.RegisterType((*QueryLastSignerSetTxsResponse)(nil), "gravity.v1.QueryLastSignerSetTxsResponse")
	proto.RegisterType((*QueryLastPendingSignerSetTxByAddrRequest)(nil), "gravity.v1.QueryLastPendingSignerSetTxByAddrRequest")
	proto.RegisterType((*QueryLastPendingSignerSetTxByAddrResponse)(nil), "gravity.v1.QueryLastPendingSignerSetTxByAddrResponse")
	proto.RegisterType((*QueryBatchFeeRequest)(nil), "gravity.v1.QueryBatchFeeRequest")
	proto.RegisterType((*QueryBatchFeeResponse)(nil), "gravity.v1.QueryBatchFeeResponse")
	proto.RegisterType((*QueryLastPendingBatchTxByAddrRequest)(nil), "gravity.v1.QueryLastPendingBatchTxByAddrRequest")
	proto.RegisterType((*QueryLastPendingBatchTxByAddrResponse)(nil), "gravity.v1.QueryLastPendingBatchTxByAddrResponse")
	proto.RegisterType((*QueryLastPendingContractCallTxByAddrRequest)(nil), "gravity.v1.QueryLastPendingContractCallTxByAddrRequest")
	proto.RegisterType((*QueryLastPendingContractCallTxByAddrResponse)(nil), "gravity.v1.QueryLastPendingContractCallTxByAddrResponse")
	proto.RegisterType((*QueryBatchTxsRequest)(nil), "gravity.v1.QueryBatchTxsRequest")
	proto.RegisterType((*QueryBatchTxsResponse)(nil), "gravity.v1.QueryBatchTxsResponse")
	proto.RegisterType((*QueryContractCallTxsRequest)(nil), "gravity.v1.QueryContractCallTxsRequest")
	proto.RegisterType((*QueryContractCallTxsResponse)(nil), "gravity.v1.QueryContractCallTxsResponse")
	proto.RegisterType((*QueryBatchTxByNonceRequest)(nil), "gravity.v1.QueryBatchTxByNonceRequest")
	proto.RegisterType((*QueryBatchTxByNonceResponse)(nil), "gravity.v1.QueryBatchTxByNonceResponse")
	proto.RegisterType((*QueryBatchTxSignaturesRequest)(nil), "gravity.v1.QueryBatchTxSignaturesRequest")
	proto.RegisterType((*QueryBatchTxSignaturesResponse)(nil), "gravity.v1.QueryBatchTxSignaturesResponse")
	proto.RegisterType((*QueryContractCallTxSignaturesRequest)(nil), "gravity.v1.QueryContractCallTxSignaturesRequest")
	proto.RegisterType((*QueryContractCallTxSignaturesResponse)(nil), "gravity.v1.QueryContractCallTxSignaturesResponse")
	proto.RegisterType((*QueryLastEventNonceByAddrRequest)(nil), "gravity.v1.QueryLastEventNonceByAddrRequest")
	proto.RegisterType((*QueryLastEventNonceByAddrResponse)(nil), "gravity.v1.QueryLastEventNonceByAddrResponse")
	proto.RegisterType((*QueryERC20ToDenomRequest)(nil), "gravity.v1.QueryERC20ToDenomRequest")
	proto.RegisterType((*QueryERC20ToDenomResponse)(nil), "gravity.v1.QueryERC20ToDenomResponse")
	proto.RegisterType((*QueryDenomToERC20Request)(nil), "gravity.v1.QueryDenomToERC20Request")
	proto.RegisterType((*QueryDenomToERC20Response)(nil), "gravity.v1.QueryDenomToERC20Response")
	proto.RegisterType((*QueryDelegateKeysByValidatorAddress)(nil), "gravity.v1.QueryDelegateKeysByValidatorAddress")
	proto.RegisterType((*QueryDelegateKeysByValidatorAddressResponse)(nil), "gravity.v1.QueryDelegateKeysByValidatorAddressResponse")
	proto.RegisterType((*QueryDelegateKeysByEthAddress)(nil), "gravity.v1.QueryDelegateKeysByEthAddress")
	proto.RegisterType((*QueryDelegateKeysByEthAddressResponse)(nil), "gravity.v1.QueryDelegateKeysByEthAddressResponse")
	proto.RegisterType((*QueryDelegateKeysByOrchestratorAddress)(nil), "gravity.v1.QueryDelegateKeysByOrchestratorAddress")
	proto.RegisterType((*QueryDelegateKeysByOrchestratorAddressResponse)(nil), "gravity.v1.QueryDelegateKeysByOrchestratorAddressResponse")
	proto.RegisterType((*QueryPendingSendToEthereumRequest)(nil), "gravity.v1.QueryPendingSendToEthereumRequest")
	proto.RegisterType((*QueryPendingSendToEthereumResponse)(nil), "gravity.v1.QueryPendingSendToEthereumResponse")
}

func init() { proto.RegisterFile("gravity/v1/query.proto", fileDescriptor_29a9d4192703013c) }

var fileDescriptor_29a9d4192703013c = []byte{
	// 1812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x99, 0x4d, 0x6f, 0xdc, 0xc6,
	0x19, 0xc7, 0x4d, 0xd5, 0x72, 0xec, 0xc7, 0x8e, 0x2d, 0x8f, 0xd6, 0xce, 0x9a, 0x92, 0x76, 0x25,
	0x2a, 0x7a, 0xb3, 0xac, 0xa5, 0x24, 0x27, 0x70, 0xd0, 0xb4, 0x80, 0xb3, 0x92, 0xa2, 0xa4, 0x89,
	0x1b, 0x67, 0x23, 0xb4, 0x40, 0x8b, 0x9a, 0xa5, 0x96, 0x23, 0x2e, 0x9b, 0x5d, 0x52, 0xe1, 0xcc,
	0x2e, 0xb4, 0x08, 0x12, 0xa0, 0xbd, 0xb4, 0xc7, 0xb4, 0x45, 0x4e, 0x45, 0xcf, 0xcd, 0xa1, 0x87,
	0x5e, 0x7a, 0x2c, 0x72, 0x0d, 0xd0, 0x8b, 0x81, 0x5e, 0x7a, 0x2a, 0x0a, 0xbb, 0x1f, 0xa4, 0xe0,
	0x70, 0x48, 0x0d, 0xc9, 0xe1, 0xcb, 0x1a, 0xbe, 0x2d, 0x87, 0xcf, 0xcb, 0xef, 0x99, 0x97, 0x67,
	0xf8, 0x97, 0xe0, 0xb6, 0xed, 0x9b, 0x23, 0x87, 0x8e, 0xf5, 0xd1, 0x8e, 0xfe, 0xd9, 0x10, 0xfb,
	0xe3, 0xd6, 0xa9, 0xef, 0x51, 0x0f, 0x01, 0x1f, 0x6f, 0x8d, 0x76, 0xd4, 0xba, 0x60, 0x63, 0x63,
	0x17, 0x13, 0x87, 0x84, 0x56, 0xaa, 0xe8, 0x4d, 0xc7, 0xa7, 0x38, 0x1a, 0xbf, 0x25, 0x8c, 0x0f,
	0x88, 0x2d, 0x1b, 0x3e, 0xf5, 0xbc, 0xbe, 0x24, 0xca, 0xb1, 0x49, 0xbb, 0x3d, 0x3e, 0x3e, 0x6f,
	0x7b, 0x9e, 0xdd, 0xc7, 0xba, 0x79, 0xea, 0xe8, 0xa6, 0xeb, 0x7a, 0xd4, 0xa4, 0x8e, 0xe7, 0x46,
	0xc1, 0x6a, 0xb6, 0x67, 0x7b, 0xec, 0xa7, 0x1e, 0xfc, 0x0a, 0x47, 0xb5, 0x1a, 0xa0, 0x8f, 0x83,
	0x32, 0x1e, 0x9b, 0xbe, 0x39, 0x20, 0x1d, 0xfc, 0xd9, 0x10, 0x13, 0xaa, 0x1d, 0xc2, 0x6c, 0x62,
	0x94, 0x9c, 0x7a, 0x2e, 0xc1, 0x68, 0x1b, 0x2e, 0x9d, 0xb2, 0x91, 0xba, 0xb2, 0xa8, 0xac, 0x5f,
	0xdd, 0x45, 0xad, 0xf3, 0xaa, 0x5b, 0xa1, 0x6d, 0xfb, 0xe2, 0x77, 0xff, 0x69, 0x5e, 0xe8, 0x70,
	0x3b, 0x6d, 0x11, 0x1a, 0x2c, 0xd0, 0xde, 0xd0, 0xf7, 0xb1, 0x4b, 0x3f, 0x71, 0x6c, 0x17, 0xfb,
	0x9f, 0x60, 0x7a, 0x74, 0x16, 0xa5, 0x7a, 0x02, 0xcd, 0x5c, 0x0b, 0x9e, 0xf6, 0x6d, 0x78, 0x95,
	0xb0, 0x61, 0x83, 0x60, 0x6a, 0xd0, 0x33, 0x9e, 0xfd, 0x35, 0x31, 0xbb, 0xe8, 0x77, 0x95, 0x9c,
	0x3f, 0x68, 0x3a, 0xbc, 0xc6, 0xe2, 0x67, 0x53, 0xa3, 0x1a, 0x4c, 0xbb, 0x9e, 0xdb, 0xc5, 0x2c,
	0xde, 0xc5, 0x4e, 0xf8, 0xa0, 0xfd, 0x14, 0xea, 0x59, 0x87, 0x97, 0x41, 0xd2, 0x81, 0xc5, 0x74,
	0xe0, 0xe0, 0xa7, 0x49, 0x87, 0x3e, 0x2e, 0x44, 0x42, 0x75, 0x78, 0xc5, 0xb4, 0x2c, 0x1f, 0x13,
	0x52, 0x9f, 0x5a, 0x54, 0xd6, 0xaf, 0x74, 0xa2, 0x47, 0x6d, 0x00, 0x4b, 0x05, 0x31, 0x39, 0xf5,
	0x7b, 0x21, 0x35, 0x1b, 0x34, 0x06, 0xc4, 0xe6, 0xd4, 0xcb, 0x22, 0xf5, 0x23, 0x62, 0x4b, 0x63,
	0x5c, 0x8b, 0x3d, 0x1f, 0x11, 0x5b, 0x7b, 0x08, 0xeb, 0xb9, 0xe9, 0x48, 0x7b, 0xfc, 0xe3, 0x80,
	0xb6, 0x78, 0x76, 0x87, 0xb0, 0x51, 0x21, 0x42, 0x3e, 0xf8, 0xf7, 0x5e, 0x0c, 0xbc, 0x01, 0xf3,
	0x2c, 0xed, 0x87, 0x26, 0x11, 0xb7, 0x18, 0x39, 0xdf, 0x85, 0x0b, 0x39, 0xef, 0x39, 0xca, 0x0f,
	0xe1, 0x7a, 0x62, 0xe5, 0x09, 0x67, 0xc9, 0x5d, 0xfa, 0x6b, 0xc2, 0xd2, 0x13, 0x6d, 0x9f, 0x4f,
	0x5c, 0x10, 0xff, 0x31, 0x76, 0x2d, 0xc7, 0x15, 0xa9, 0xdb, 0xe3, 0x77, 0x2c, 0xcb, 0x8f, 0x26,
	0x4e, 0x58, 0x6d, 0x25, 0xb9, 0xda, 0xbf, 0xe2, 0x93, 0x57, 0x1c, 0xe5, 0xe5, 0x10, 0xdf, 0x86,
	0x1a, 0xcb, 0xd5, 0x0e, 0x1a, 0xcc, 0xbb, 0x38, 0x5a, 0x56, 0xed, 0x11, 0xdc, 0x4a, 0x8d, 0xf3,
	0x7c, 0x6f, 0x00, 0xb0, 0x66, 0x64, 0x9c, 0x60, 0x1c, 0xe5, 0xba, 0x25, 0xe6, 0x8a, 0x3c, 0x48,
	0xe7, 0xca, 0x71, 0xf4, 0x53, 0x7b, 0x08, 0xaf, 0xa7, 0x4b, 0x62, 0x76, 0xd5, 0x27, 0xa5, 0x03,
	0x2b, 0x25, 0x11, 0x38, 0xe0, 0x06, 0x4c, 0xb3, 0xbc, 0x7c, 0xfb, 0xcf, 0x66, 0xd8, 0x8e, 0xce,
	0x3a, 0xa1, 0x85, 0x76, 0x08, 0x9b, 0xe9, 0x98, 0x7b, 0x9e, 0x4b, 0x7d, 0xb3, 0x4b, 0xf7, 0xcc,
	0x7e, 0xbf, 0x3a, 0xdc, 0x13, 0xb8, 0x57, 0x2d, 0x10, 0x67, 0x6c, 0xc1, 0xc5, 0xae, 0xd9, 0xef,
	0x73, 0x44, 0x55, 0x44, 0x4c, 0xfa, 0x75, 0x98, 0x5d, 0x72, 0x95, 0x84, 0xfd, 0xfc, 0xae, 0xb8,
	0x4a, 0xe2, 0x3e, 0xde, 0x82, 0x57, 0x58, 0x89, 0xf1, 0x12, 0x49, 0xa7, 0x21, 0xb2, 0xd1, 0x16,
	0x60, 0x2e, 0xec, 0xce, 0x89, 0xe4, 0x71, 0x9a, 0xc7, 0xfc, 0x58, 0x65, 0x5e, 0xc7, 0x17, 0xc6,
	0x74, 0x80, 0x19, 0xe5, 0x2a, 0xaa, 0x27, 0x34, 0xd4, 0x7e, 0x01, 0xaa, 0x08, 0x5e, 0xa5, 0xa7,
	0xa0, 0x0d, 0x98, 0xe9, 0xf2, 0x60, 0x46, 0xb2, 0x4f, 0xde, 0x88, 0xc6, 0xdf, 0xe1, 0xeb, 0xf1,
	0x1e, 0xaf, 0x27, 0x1d, 0x7e, 0xf2, 0x2d, 0xf2, 0x4b, 0xde, 0x31, 0xf8, 0xf0, 0x79, 0x13, 0x7b,
	0x69, 0xac, 0x27, 0xfc, 0xee, 0x94, 0x64, 0xe0, 0xb8, 0xfb, 0xf2, 0xfe, 0xd8, 0x4c, 0xf5, 0xc7,
	0x74, 0x80, 0x54, 0x6f, 0xfc, 0x92, 0x1f, 0xc1, 0xe4, 0x82, 0x64, 0x0b, 0x5a, 0x83, 0x1b, 0x8e,
	0x3b, 0x32, 0xfb, 0x8e, 0xc5, 0xbe, 0x2b, 0x0c, 0xc7, 0x62, 0xa5, 0x5d, 0xeb, 0x5c, 0x17, 0x87,
	0xdf, 0xb7, 0xd0, 0x16, 0xa0, 0x84, 0x61, 0x38, 0x0d, 0x53, 0x6c, 0x1a, 0x6e, 0x8a, 0x6f, 0xd8,
	0xe4, 0x6b, 0x9f, 0xf2, 0x03, 0x9c, 0x9f, 0x9f, 0x97, 0xdb, 0x86, 0xcb, 0x5d, 0xcf, 0x3d, 0x71,
	0xfc, 0x41, 0xb4, 0xa1, 0x56, 0x53, 0x95, 0xe6, 0x84, 0xe8, 0xc4, 0x7e, 0xda, 0x0f, 0xf8, 0x25,
	0x1c, 0x1c, 0xc8, 0x83, 0x11, 0x76, 0x29, 0x63, 0xa8, 0x7a, 0x9c, 0xf7, 0xf9, 0x75, 0x2b, 0xf7,
	0xe6, 0x98, 0x4d, 0xb8, 0x8a, 0x83, 0x77, 0x86, 0xb8, 0xfc, 0x80, 0x63, 0x73, 0x6d, 0x9b, 0x7f,
	0x61, 0x1c, 0x74, 0xf6, 0x76, 0xb7, 0x8f, 0xbc, 0x7d, 0xec, 0x7a, 0x03, 0x61, 0xd7, 0x60, 0xbf,
	0xbb, 0xbb, 0xcd, 0x33, 0x87, 0x0f, 0xda, 0x13, 0xb8, 0x23, 0xf1, 0xe0, 0xf9, 0x6a, 0x30, 0x6d,
	0x05, 0x03, 0x91, 0x0b, 0x7b, 0x40, 0x9b, 0x70, 0xb3, 0xeb, 0x91, 0x81, 0x47, 0x0c, 0xcf, 0x77,
	0x6c, 0xc7, 0x35, 0x29, 0xb6, 0xd8, 0x1a, 0x5c, 0xee, 0xcc, 0x84, 0x2f, 0x3e, 0x8a, 0xc7, 0x63,
	0x22, 0x16, 0xf8, 0xc8, 0x63, 0x69, 0x04, 0xa2, 0x6c, 0xf8, 0x98, 0x28, 0xe9, 0x71, 0x4e, 0x94,
	0x2d, 0x62, 0x32, 0xa2, 0x0e, 0x2c, 0xf3, 0xf8, 0x7d, 0x6c, 0x9b, 0x14, 0x7f, 0x80, 0xc7, 0xa4,
	0x3d, 0xfe, 0x49, 0xb8, 0x75, 0x3c, 0x9f, 0x9f, 0x91, 0x20, 0xe6, 0x28, 0x1a, 0x33, 0x92, 0x8b,
	0x36, 0x33, 0x4a, 0x19, 0x6b, 0xbf, 0x56, 0x78, 0x5b, 0x2f, 0x0e, 0x9a, 0x58, 0x48, 0xda, 0x4b,
	0x85, 0x05, 0x4c, 0x7b, 0x51, 0xf6, 0x1d, 0xa8, 0x79, 0x7e, 0xd0, 0x27, 0xa9, 0x9f, 0x00, 0x08,
	0x0f, 0xf4, 0xac, 0xf8, 0x2e, 0x62, 0x78, 0xc8, 0xdb, 0x46, 0x12, 0xe1, 0xe0, 0x3c, 0x66, 0x59,
	0x52, 0xed, 0xb7, 0x0a, 0x3f, 0x2f, 0x79, 0x21, 0x62, 0xfe, 0x49, 0x26, 0xe7, 0x45, 0x6a, 0xf9,
	0x39, 0xac, 0x4a, 0x40, 0x3e, 0xca, 0x5a, 0xe6, 0x06, 0x57, 0xf2, 0x83, 0x7f, 0x09, 0xad, 0x6a,
	0xc1, 0x5f, 0xac, 0xdc, 0xd4, 0x34, 0x4f, 0x65, 0xa6, 0xf9, 0x47, 0xfc, 0xa8, 0x47, 0xdf, 0x59,
	0xd8, 0xb5, 0x8e, 0xbc, 0x03, 0xda, 0xc3, 0x3e, 0x1e, 0xc6, 0xa7, 0x75, 0x05, 0xae, 0x13, 0xec,
	0x5a, 0x38, 0x9d, 0xef, 0xd5, 0x70, 0x34, 0x8a, 0xf5, 0xad, 0x02, 0x5a, 0x51, 0x30, 0x5e, 0xc0,
	0x87, 0x50, 0xa3, 0xbe, 0xe9, 0x92, 0x13, 0xec, 0x13, 0xc3, 0x71, 0x8d, 0xe4, 0x45, 0x9d, 0xb8,
	0x3c, 0x53, 0x11, 0x50, 0xec, 0xf7, 0xbe, 0xdb, 0x0e, 0xbd, 0xd0, 0x07, 0x30, 0x3b, 0x74, 0xc3,
	0x10, 0x96, 0x11, 0xbf, 0xaf, 0x4f, 0x95, 0x07, 0x8b, 0xdd, 0x8e, 0x22, 0xaf, 0xdd, 0x3f, 0xcf,
	0xc1, 0x34, 0xab, 0x00, 0x39, 0x70, 0x29, 0x54, 0x7a, 0xa8, 0x21, 0xc6, 0xc8, 0x8a, 0x48, 0xb5,
	0x99, 0xfb, 0x3e, 0xac, 0x57, 0x6b, 0xfc, 0xe6, 0x5f, 0xff, 0xfb, 0xe3, 0x54, 0x1d, 0xdd, 0xd6,
	0xcf, 0x05, 0xed, 0x31, 0xa6, 0xa6, 0x1e, 0x8a, 0x47, 0xf4, 0xb5, 0x02, 0x28, 0x2b, 0x0b, 0xd1,
	0xdd, 0x4c, 0xdc, 0x5c, 0x75, 0xa9, 0x6e, 0x56, 0xb2, 0xe5, 0x3c, 0xab, 0x8c, 0x67, 0x11, 0x35,
	0xd2, 0x3c, 0x23, 0xb3, 0x4f, 0x30, 0xd5, 0xbb, 0xa1, 0x2b, 0x3a, 0x83, 0xab, 0x22, 0xcf, 0x72,
	0x26, 0x87, 0x04, 0xe4, 0xf5, 0x62, 0xa3, 0xb2, 0x19, 0x09, 0x09, 0xd0, 0x9f, 0x14, 0xa8, 0xc9,
	0xd4, 0x0e, 0xba, 0x57, 0x14, 0x3e, 0xad, 0x32, 0xd5, 0xad, 0x8a, 0xd6, 0x55, 0xe7, 0x25, 0xbc,
	0x5c, 0xd1, 0xdf, 0x15, 0x98, 0x2f, 0xd2, 0x75, 0xe8, 0x8d, 0x4a, 0x79, 0x53, 0x42, 0x52, 0x7d,
	0x73, 0x42, 0x2f, 0x4e, 0xbd, 0xce, 0xa8, 0x35, 0xb4, 0x98, 0xa6, 0x8e, 0xbe, 0x05, 0xf4, 0xcf,
	0xd9, 0x05, 0xfd, 0x05, 0xfa, 0x4a, 0x81, 0x99, 0xb4, 0xf0, 0x43, 0xeb, 0x99, 0xac, 0x39, 0xda,
	0x51, 0xdd, 0xa8, 0x60, 0xc9, 0x99, 0xd6, 0x18, 0xd3, 0x12, 0x6a, 0xe6, 0xcc, 0xa4, 0x1f, 0x86,
	0x24, 0xe8, 0x6f, 0x0a, 0xcc, 0x17, 0xa9, 0x3c, 0xc9, 0x54, 0x56, 0x90, 0x96, 0x92, 0xa9, 0xac,
	0x22, 0x25, 0xb5, 0x65, 0x86, 0xbd, 0x80, 0xe6, 0x72, 0xb0, 0xfb, 0x26, 0xa1, 0xe8, 0x1b, 0x05,
	0xea, 0x79, 0x1a, 0x0c, 0x6d, 0x17, 0x25, 0x96, 0x09, 0x3e, 0x75, 0x67, 0x02, 0x8f, 0xb2, 0xd9,
	0x65, 0xed, 0x4c, 0xff, 0x9c, 0xf7, 0xe8, 0x2f, 0xd0, 0x3f, 0x14, 0x68, 0x96, 0x28, 0x32, 0xf4,
	0xa0, 0x28, 0x7f, 0x81, 0x18, 0x54, 0xdf, 0x9a, 0xdc, 0xb1, 0x8c, 0xbf, 0xef, 0xd9, 0x4e, 0x57,
	0xe0, 0xff, 0x46, 0x81, 0x9a, 0xec, 0x13, 0x54, 0xd2, 0x06, 0x0a, 0xbe, 0x73, 0x25, 0x6d, 0xa0,
	0xe8, 0xbb, 0x56, 0xbb, 0xcf, 0xf0, 0xb6, 0xd0, 0x66, 0x1a, 0xcf, 0xf3, 0xcd, 0x6e, 0x1f, 0xeb,
	0xec, 0x0b, 0x97, 0x1d, 0x29, 0x01, 0x95, 0xc0, 0x95, 0x58, 0xf7, 0xa3, 0xc5, 0x4c, 0xc2, 0xd4,
	0x5f, 0x17, 0xd4, 0xa5, 0x02, 0x0b, 0x8e, 0xb1, 0xc4, 0x30, 0xe6, 0xd0, 0x1d, 0xe9, 0x2a, 0x9f,
	0x04, 0x79, 0xc6, 0x70, 0x39, 0x12, 0xbe, 0x79, 0x39, 0x85, 0xf3, 0xbb, 0x54, 0x60, 0x51, 0xd6,
	0x4b, 0xc2, 0x9d, 0xe5, 0x0d, 0xa9, 0xed, 0x39, 0xae, 0x4d, 0xcf, 0xd0, 0xef, 0x15, 0xb8, 0x91,
	0x52, 0xc3, 0x68, 0x2d, 0x7b, 0x09, 0x49, 0xe5, 0xb4, 0xba, 0x5e, 0x6e, 0xc8, 0x81, 0x36, 0x19,
	0xd0, 0x0a, 0x5a, 0x2e, 0x06, 0x62, 0x1b, 0x07, 0xfd, 0x4e, 0x81, 0xeb, 0x49, 0xc1, 0x8b, 0x56,
	0xf3, 0x6a, 0x4e, 0xf5, 0xde, 0xb5, 0x52, 0x3b, 0x0e, 0xb4, 0xc2, 0x80, 0x9a, 0x68, 0x21, 0xe7,
	0xec, 0xf1, 0x56, 0xfb, 0x07, 0x05, 0x6e, 0x66, 0xf4, 0x2c, 0xda, 0xc8, 0xcb, 0x92, 0x11, 0xa1,
	0xea, 0xdd, 0x2a, 0xa6, 0x65, 0xf7, 0x56, 0xc8, 0x14, 0xdd, 0x03, 0xe8, 0x2f, 0x0a, 0xd4, 0xf3,
	0xc4, 0xa7, 0xa4, 0x73, 0x95, 0xe8, 0x64, 0x49, 0xe7, 0x2a, 0x53, 0xb6, 0xf9, 0xa4, 0xe1, 0xc9,
	0x8f, 0x49, 0xbf, 0x56, 0xe0, 0x9a, 0xa8, 0x01, 0x51, 0xf6, 0xb3, 0x42, 0x22, 0x2a, 0xd5, 0x95,
	0x12, 0x2b, 0x4e, 0xf1, 0x16, 0xa3, 0xd8, 0x45, 0xdb, 0xd9, 0x1b, 0x33, 0x25, 0xdb, 0x74, 0xa6,
	0xe8, 0x0c, 0xea, 0x19, 0xa1, 0xd8, 0x0c, 0xb8, 0x44, 0x25, 0x28, 0xe1, 0x92, 0x48, 0x4b, 0x09,
	0x97, 0x4c, 0x4e, 0x4e, 0xc2, 0xc5, 0x70, 0x02, 0xae, 0x50, 0x72, 0x7e, 0xab, 0xc0, 0x9d, 0x43,
	0x4c, 0x05, 0x0d, 0x21, 0xc8, 0x3d, 0xa4, 0x4b, 0xd2, 0x17, 0x09, 0x43, 0xf5, 0xc1, 0x84, 0x0e,
	0xe5, 0x15, 0xb0, 0x7f, 0x21, 0x19, 0x16, 0x8f, 0x62, 0x7c, 0x8a, 0xc7, 0xc4, 0x38, 0x1e, 0x1b,
	0xb1, 0x5c, 0x09, 0xf6, 0xe6, 0x6c, 0xba, 0x82, 0x03, 0xda, 0x93, 0x1c, 0x99, 0x3c, 0x39, 0x28,
	0xd9, 0x8f, 0x65, 0xca, 0x51, 0xdb, 0x65, 0xbc, 0xf7, 0xd0, 0xdd, 0x8a, 0xbc, 0x98, 0xf6, 0xd0,
	0x3f, 0x15, 0x98, 0x4f, 0x93, 0x8a, 0x72, 0x0d, 0xed, 0x96, 0x70, 0x48, 0xb4, 0x9d, 0xfa, 0xfd,
	0xc9, 0x7d, 0xe2, 0x22, 0xde, 0x66, 0x45, 0xbc, 0x89, 0xee, 0x57, 0x2c, 0x42, 0x54, 0xa1, 0xe8,
	0xaf, 0x0a, 0xd4, 0x0f, 0x31, 0x95, 0x0a, 0x36, 0x94, 0xbd, 0x38, 0x8b, 0x54, 0xa2, 0xda, 0xaa,
	0x6a, 0xce, 0xc1, 0x77, 0x18, 0xf8, 0x26, 0xda, 0x90, 0x83, 0x9f, 0x86, 0xce, 0x46, 0xa0, 0x31,
	0xd9, 0x56, 0xa7, 0xbd, 0xf6, 0xc7, 0xdf, 0x3d, 0x6b, 0x28, 0x4f, 0x9f, 0x35, 0x94, 0xff, 0x3e,
	0x6b, 0x28, 0x5f, 0x3d, 0x6f, 0x5c, 0x78, 0xfa, 0xbc, 0x71, 0xe1, 0xdf, 0xcf, 0x1b, 0x17, 0x7e,
	0xf6, 0xc0, 0x76, 0x68, 0x6f, 0x78, 0xdc, 0xea, 0x7a, 0x03, 0x7e, 0x5e, 0xa2, 0xa8, 0x5b, 0xc7,
	0xbe, 0x63, 0xd9, 0x58, 0x1f, 0x78, 0xd6, 0xb0, 0x8f, 0xf5, 0xb3, 0x38, 0x1b, 0xfb, 0xcf, 0xe4,
	0xf1, 0x25, 0xf6, 0x0f, 0xc2, 0xfb, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x49, 0x8d, 0x7d, 0x4d,
	0xf2, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Deployments queries deployments
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	CurrentSignerSetTx(ctx context.Context, in *QueryCurrentSignerSetTxRequest, opts ...grpc.CallOption) (*QueryCurrentSignerSetTxResponse, error)
	SignerSetTx(ctx context.Context, in *QuerySignerSetTxRequest, opts ...grpc.CallOption) (*QuerySignerSetTxResponse, error)
	SignerSetTxSignature(ctx context.Context, in *QuerySignerSetTxSignatureRequest, opts ...grpc.CallOption) (*QuerySignerSetTxSignatureResponse, error)
	SignerSetTxSignaturesByNonce(ctx context.Context, in *QuerySignerSetTxSignaturesByNonceRequest, opts ...grpc.CallOption) (*QuerySignerSetTxSignaturesByNonceResponse, error)
	LastSignerSetTxs(ctx context.Context, in *QueryLastSignerSetTxsRequest, opts ...grpc.CallOption) (*QueryLastSignerSetTxsResponse, error)
	LastPendingSignerSetTxByAddr(ctx context.Context, in *QueryLastPendingSignerSetTxByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingSignerSetTxByAddrResponse, error)
	LastPendingBatchTxByAddr(ctx context.Context, in *QueryLastPendingBatchTxByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBatchTxByAddrResponse, error)
	LastPendingContractCallTxByAddr(ctx context.Context, in *QueryLastPendingContractCallTxByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingContractCallTxByAddrResponse, error)
	LastEventNonceByAddr(ctx context.Context, in *QueryLastEventNonceByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventNonceByAddrResponse, error)
	BatchFees(ctx context.Context, in *QueryBatchFeeRequest, opts ...grpc.CallOption) (*QueryBatchFeeResponse, error)
	BatchTxs(ctx context.Context, in *QueryBatchTxsRequest, opts ...grpc.CallOption) (*QueryBatchTxsResponse, error)
	ContractCallTxs(ctx context.Context, in *QueryContractCallTxsRequest, opts ...grpc.CallOption) (*QueryContractCallTxsResponse, error)
	BatchTxByNonce(ctx context.Context, in *QueryBatchTxByNonceRequest, opts ...grpc.CallOption) (*QueryBatchTxByNonceResponse, error)
	BatchTxSignatures(ctx context.Context, in *QueryBatchTxSignaturesRequest, opts ...grpc.CallOption) (*QueryBatchTxSignaturesResponse, error)
	ContractCallTxSignatures(ctx context.Context, in *QueryContractCallTxSignaturesRequest, opts ...grpc.CallOption) (*QueryContractCallTxSignaturesResponse, error)
	ERC20ToDenom(ctx context.Context, in *QueryERC20ToDenomRequest, opts ...grpc.CallOption) (*QueryERC20ToDenomResponse, error)
	DenomToERC20(ctx context.Context, in *QueryDenomToERC20Request, opts ...grpc.CallOption) (*QueryDenomToERC20Response, error)
	GetDelegateKeyByValidator(ctx context.Context, in *QueryDelegateKeysByValidatorAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByValidatorAddressResponse, error)
	GetDelegateKeyByEth(ctx context.Context, in *QueryDelegateKeysByEthAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByEthAddressResponse, error)
	GetDelegateKeyByOrchestrator(ctx context.Context, in *QueryDelegateKeysByOrchestratorAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByOrchestratorAddressResponse, error)
	GetPendingSendToEthereum(ctx context.Context, in *QueryPendingSendToEthereumRequest, opts ...grpc.CallOption) (*QueryPendingSendToEthereumResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentSignerSetTx(ctx context.Context, in *QueryCurrentSignerSetTxRequest, opts ...grpc.CallOption) (*QueryCurrentSignerSetTxResponse, error) {
	out := new(QueryCurrentSignerSetTxResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/CurrentSignerSetTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignerSetTx(ctx context.Context, in *QuerySignerSetTxRequest, opts ...grpc.CallOption) (*QuerySignerSetTxResponse, error) {
	out := new(QuerySignerSetTxResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/SignerSetTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignerSetTxSignature(ctx context.Context, in *QuerySignerSetTxSignatureRequest, opts ...grpc.CallOption) (*QuerySignerSetTxSignatureResponse, error) {
	out := new(QuerySignerSetTxSignatureResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/SignerSetTxSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignerSetTxSignaturesByNonce(ctx context.Context, in *QuerySignerSetTxSignaturesByNonceRequest, opts ...grpc.CallOption) (*QuerySignerSetTxSignaturesByNonceResponse, error) {
	out := new(QuerySignerSetTxSignaturesByNonceResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/SignerSetTxSignaturesByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastSignerSetTxs(ctx context.Context, in *QueryLastSignerSetTxsRequest, opts ...grpc.CallOption) (*QueryLastSignerSetTxsResponse, error) {
	out := new(QueryLastSignerSetTxsResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/LastSignerSetTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingSignerSetTxByAddr(ctx context.Context, in *QueryLastPendingSignerSetTxByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingSignerSetTxByAddrResponse, error) {
	out := new(QueryLastPendingSignerSetTxByAddrResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/LastPendingSignerSetTxByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingBatchTxByAddr(ctx context.Context, in *QueryLastPendingBatchTxByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBatchTxByAddrResponse, error) {
	out := new(QueryLastPendingBatchTxByAddrResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/LastPendingBatchTxByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingContractCallTxByAddr(ctx context.Context, in *QueryLastPendingContractCallTxByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingContractCallTxByAddrResponse, error) {
	out := new(QueryLastPendingContractCallTxByAddrResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/LastPendingContractCallTxByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastEventNonceByAddr(ctx context.Context, in *QueryLastEventNonceByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventNonceByAddrResponse, error) {
	out := new(QueryLastEventNonceByAddrResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/LastEventNonceByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchFees(ctx context.Context, in *QueryBatchFeeRequest, opts ...grpc.CallOption) (*QueryBatchFeeResponse, error) {
	out := new(QueryBatchFeeResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/BatchFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchTxs(ctx context.Context, in *QueryBatchTxsRequest, opts ...grpc.CallOption) (*QueryBatchTxsResponse, error) {
	out := new(QueryBatchTxsResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/BatchTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractCallTxs(ctx context.Context, in *QueryContractCallTxsRequest, opts ...grpc.CallOption) (*QueryContractCallTxsResponse, error) {
	out := new(QueryContractCallTxsResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/ContractCallTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchTxByNonce(ctx context.Context, in *QueryBatchTxByNonceRequest, opts ...grpc.CallOption) (*QueryBatchTxByNonceResponse, error) {
	out := new(QueryBatchTxByNonceResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/BatchTxByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchTxSignatures(ctx context.Context, in *QueryBatchTxSignaturesRequest, opts ...grpc.CallOption) (*QueryBatchTxSignaturesResponse, error) {
	out := new(QueryBatchTxSignaturesResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/BatchTxSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractCallTxSignatures(ctx context.Context, in *QueryContractCallTxSignaturesRequest, opts ...grpc.CallOption) (*QueryContractCallTxSignaturesResponse, error) {
	out := new(QueryContractCallTxSignaturesResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/ContractCallTxSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ERC20ToDenom(ctx context.Context, in *QueryERC20ToDenomRequest, opts ...grpc.CallOption) (*QueryERC20ToDenomResponse, error) {
	out := new(QueryERC20ToDenomResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/ERC20ToDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomToERC20(ctx context.Context, in *QueryDenomToERC20Request, opts ...grpc.CallOption) (*QueryDenomToERC20Response, error) {
	out := new(QueryDenomToERC20Response)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/DenomToERC20", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateKeyByValidator(ctx context.Context, in *QueryDelegateKeysByValidatorAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByValidatorAddressResponse, error) {
	out := new(QueryDelegateKeysByValidatorAddressResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/GetDelegateKeyByValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateKeyByEth(ctx context.Context, in *QueryDelegateKeysByEthAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByEthAddressResponse, error) {
	out := new(QueryDelegateKeysByEthAddressResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/GetDelegateKeyByEth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateKeyByOrchestrator(ctx context.Context, in *QueryDelegateKeysByOrchestratorAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByOrchestratorAddressResponse, error) {
	out := new(QueryDelegateKeysByOrchestratorAddressResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/GetDelegateKeyByOrchestrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingSendToEthereum(ctx context.Context, in *QueryPendingSendToEthereumRequest, opts ...grpc.CallOption) (*QueryPendingSendToEthereumResponse, error) {
	out := new(QueryPendingSendToEthereumResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/GetPendingSendToEthereum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Deployments queries deployments
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	CurrentSignerSetTx(context.Context, *QueryCurrentSignerSetTxRequest) (*QueryCurrentSignerSetTxResponse, error)
	SignerSetTx(context.Context, *QuerySignerSetTxRequest) (*QuerySignerSetTxResponse, error)
	SignerSetTxSignature(context.Context, *QuerySignerSetTxSignatureRequest) (*QuerySignerSetTxSignatureResponse, error)
	SignerSetTxSignaturesByNonce(context.Context, *QuerySignerSetTxSignaturesByNonceRequest) (*QuerySignerSetTxSignaturesByNonceResponse, error)
	LastSignerSetTxs(context.Context, *QueryLastSignerSetTxsRequest) (*QueryLastSignerSetTxsResponse, error)
	LastPendingSignerSetTxByAddr(context.Context, *QueryLastPendingSignerSetTxByAddrRequest) (*QueryLastPendingSignerSetTxByAddrResponse, error)
	LastPendingBatchTxByAddr(context.Context, *QueryLastPendingBatchTxByAddrRequest) (*QueryLastPendingBatchTxByAddrResponse, error)
	LastPendingContractCallTxByAddr(context.Context, *QueryLastPendingContractCallTxByAddrRequest) (*QueryLastPendingContractCallTxByAddrResponse, error)
	LastEventNonceByAddr(context.Context, *QueryLastEventNonceByAddrRequest) (*QueryLastEventNonceByAddrResponse, error)
	BatchFees(context.Context, *QueryBatchFeeRequest) (*QueryBatchFeeResponse, error)
	BatchTxs(context.Context, *QueryBatchTxsRequest) (*QueryBatchTxsResponse, error)
	ContractCallTxs(context.Context, *QueryContractCallTxsRequest) (*QueryContractCallTxsResponse, error)
	BatchTxByNonce(context.Context, *QueryBatchTxByNonceRequest) (*QueryBatchTxByNonceResponse, error)
	BatchTxSignatures(context.Context, *QueryBatchTxSignaturesRequest) (*QueryBatchTxSignaturesResponse, error)
	ContractCallTxSignatures(context.Context, *QueryContractCallTxSignaturesRequest) (*QueryContractCallTxSignaturesResponse, error)
	ERC20ToDenom(context.Context, *QueryERC20ToDenomRequest) (*QueryERC20ToDenomResponse, error)
	DenomToERC20(context.Context, *QueryDenomToERC20Request) (*QueryDenomToERC20Response, error)
	GetDelegateKeyByValidator(context.Context, *QueryDelegateKeysByValidatorAddress) (*QueryDelegateKeysByValidatorAddressResponse, error)
	GetDelegateKeyByEth(context.Context, *QueryDelegateKeysByEthAddress) (*QueryDelegateKeysByEthAddressResponse, error)
	GetDelegateKeyByOrchestrator(context.Context, *QueryDelegateKeysByOrchestratorAddress) (*QueryDelegateKeysByOrchestratorAddressResponse, error)
	GetPendingSendToEthereum(context.Context, *QueryPendingSendToEthereumRequest) (*QueryPendingSendToEthereumResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CurrentSignerSetTx(ctx context.Context, req *QueryCurrentSignerSetTxRequest) (*QueryCurrentSignerSetTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentSignerSetTx not implemented")
}
func (*UnimplementedQueryServer) SignerSetTx(ctx context.Context, req *QuerySignerSetTxRequest) (*QuerySignerSetTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignerSetTx not implemented")
}
func (*UnimplementedQueryServer) SignerSetTxSignature(ctx context.Context, req *QuerySignerSetTxSignatureRequest) (*QuerySignerSetTxSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignerSetTxSignature not implemented")
}
func (*UnimplementedQueryServer) SignerSetTxSignaturesByNonce(ctx context.Context, req *QuerySignerSetTxSignaturesByNonceRequest) (*QuerySignerSetTxSignaturesByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignerSetTxSignaturesByNonce not implemented")
}
func (*UnimplementedQueryServer) LastSignerSetTxs(ctx context.Context, req *QueryLastSignerSetTxsRequest) (*QueryLastSignerSetTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastSignerSetTxs not implemented")
}
func (*UnimplementedQueryServer) LastPendingSignerSetTxByAddr(ctx context.Context, req *QueryLastPendingSignerSetTxByAddrRequest) (*QueryLastPendingSignerSetTxByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingSignerSetTxByAddr not implemented")
}
func (*UnimplementedQueryServer) LastPendingBatchTxByAddr(ctx context.Context, req *QueryLastPendingBatchTxByAddrRequest) (*QueryLastPendingBatchTxByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingBatchTxByAddr not implemented")
}
func (*UnimplementedQueryServer) LastPendingContractCallTxByAddr(ctx context.Context, req *QueryLastPendingContractCallTxByAddrRequest) (*QueryLastPendingContractCallTxByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingContractCallTxByAddr not implemented")
}
func (*UnimplementedQueryServer) LastEventNonceByAddr(ctx context.Context, req *QueryLastEventNonceByAddrRequest) (*QueryLastEventNonceByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastEventNonceByAddr not implemented")
}
func (*UnimplementedQueryServer) BatchFees(ctx context.Context, req *QueryBatchFeeRequest) (*QueryBatchFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchFees not implemented")
}
func (*UnimplementedQueryServer) BatchTxs(ctx context.Context, req *QueryBatchTxsRequest) (*QueryBatchTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTxs not implemented")
}
func (*UnimplementedQueryServer) ContractCallTxs(ctx context.Context, req *QueryContractCallTxsRequest) (*QueryContractCallTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCallTxs not implemented")
}
func (*UnimplementedQueryServer) BatchTxByNonce(ctx context.Context, req *QueryBatchTxByNonceRequest) (*QueryBatchTxByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTxByNonce not implemented")
}
func (*UnimplementedQueryServer) BatchTxSignatures(ctx context.Context, req *QueryBatchTxSignaturesRequest) (*QueryBatchTxSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTxSignatures not implemented")
}
func (*UnimplementedQueryServer) ContractCallTxSignatures(ctx context.Context, req *QueryContractCallTxSignaturesRequest) (*QueryContractCallTxSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCallTxSignatures not implemented")
}
func (*UnimplementedQueryServer) ERC20ToDenom(ctx context.Context, req *QueryERC20ToDenomRequest) (*QueryERC20ToDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20ToDenom not implemented")
}
func (*UnimplementedQueryServer) DenomToERC20(ctx context.Context, req *QueryDenomToERC20Request) (*QueryDenomToERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomToERC20 not implemented")
}
func (*UnimplementedQueryServer) GetDelegateKeyByValidator(ctx context.Context, req *QueryDelegateKeysByValidatorAddress) (*QueryDelegateKeysByValidatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateKeyByValidator not implemented")
}
func (*UnimplementedQueryServer) GetDelegateKeyByEth(ctx context.Context, req *QueryDelegateKeysByEthAddress) (*QueryDelegateKeysByEthAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateKeyByEth not implemented")
}
func (*UnimplementedQueryServer) GetDelegateKeyByOrchestrator(ctx context.Context, req *QueryDelegateKeysByOrchestratorAddress) (*QueryDelegateKeysByOrchestratorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateKeyByOrchestrator not implemented")
}
func (*UnimplementedQueryServer) GetPendingSendToEthereum(ctx context.Context, req *QueryPendingSendToEthereumRequest) (*QueryPendingSendToEthereumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingSendToEthereum not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentSignerSetTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentSignerSetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentSignerSetTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/CurrentSignerSetTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentSignerSetTx(ctx, req.(*QueryCurrentSignerSetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignerSetTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignerSetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignerSetTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/SignerSetTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignerSetTx(ctx, req.(*QuerySignerSetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignerSetTxSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignerSetTxSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignerSetTxSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/SignerSetTxSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignerSetTxSignature(ctx, req.(*QuerySignerSetTxSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignerSetTxSignaturesByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignerSetTxSignaturesByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignerSetTxSignaturesByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/SignerSetTxSignaturesByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignerSetTxSignaturesByNonce(ctx, req.(*QuerySignerSetTxSignaturesByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastSignerSetTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastSignerSetTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastSignerSetTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/LastSignerSetTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastSignerSetTxs(ctx, req.(*QueryLastSignerSetTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingSignerSetTxByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingSignerSetTxByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingSignerSetTxByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/LastPendingSignerSetTxByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingSignerSetTxByAddr(ctx, req.(*QueryLastPendingSignerSetTxByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingBatchTxByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingBatchTxByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingBatchTxByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/LastPendingBatchTxByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingBatchTxByAddr(ctx, req.(*QueryLastPendingBatchTxByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingContractCallTxByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingContractCallTxByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingContractCallTxByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/LastPendingContractCallTxByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingContractCallTxByAddr(ctx, req.(*QueryLastPendingContractCallTxByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastEventNonceByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastEventNonceByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastEventNonceByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/LastEventNonceByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastEventNonceByAddr(ctx, req.(*QueryLastEventNonceByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/BatchFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchFees(ctx, req.(*QueryBatchFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/BatchTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchTxs(ctx, req.(*QueryBatchTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractCallTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryContractCallTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractCallTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/ContractCallTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractCallTxs(ctx, req.(*QueryContractCallTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchTxByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchTxByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchTxByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/BatchTxByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchTxByNonce(ctx, req.(*QueryBatchTxByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchTxSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchTxSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchTxSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/BatchTxSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchTxSignatures(ctx, req.(*QueryBatchTxSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractCallTxSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryContractCallTxSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractCallTxSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/ContractCallTxSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractCallTxSignatures(ctx, req.(*QueryContractCallTxSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ERC20ToDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryERC20ToDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ERC20ToDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/ERC20ToDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ERC20ToDenom(ctx, req.(*QueryERC20ToDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomToERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomToERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomToERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/DenomToERC20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomToERC20(ctx, req.(*QueryDenomToERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateKeyByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateKeysByValidatorAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateKeyByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/GetDelegateKeyByValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateKeyByValidator(ctx, req.(*QueryDelegateKeysByValidatorAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateKeyByEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateKeysByEthAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateKeyByEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/GetDelegateKeyByEth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateKeyByEth(ctx, req.(*QueryDelegateKeysByEthAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateKeyByOrchestrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateKeysByOrchestratorAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateKeyByOrchestrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/GetDelegateKeyByOrchestrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateKeyByOrchestrator(ctx, req.(*QueryDelegateKeysByOrchestratorAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingSendToEthereum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingSendToEthereumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingSendToEthereum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/GetPendingSendToEthereum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingSendToEthereum(ctx, req.(*QueryPendingSendToEthereumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CurrentSignerSetTx",
			Handler:    _Query_CurrentSignerSetTx_Handler,
		},
		{
			MethodName: "SignerSetTx",
			Handler:    _Query_SignerSetTx_Handler,
		},
		{
			MethodName: "SignerSetTxSignature",
			Handler:    _Query_SignerSetTxSignature_Handler,
		},
		{
			MethodName: "SignerSetTxSignaturesByNonce",
			Handler:    _Query_SignerSetTxSignaturesByNonce_Handler,
		},
		{
			MethodName: "LastSignerSetTxs",
			Handler:    _Query_LastSignerSetTxs_Handler,
		},
		{
			MethodName: "LastPendingSignerSetTxByAddr",
			Handler:    _Query_LastPendingSignerSetTxByAddr_Handler,
		},
		{
			MethodName: "LastPendingBatchTxByAddr",
			Handler:    _Query_LastPendingBatchTxByAddr_Handler,
		},
		{
			MethodName: "LastPendingContractCallTxByAddr",
			Handler:    _Query_LastPendingContractCallTxByAddr_Handler,
		},
		{
			MethodName: "LastEventNonceByAddr",
			Handler:    _Query_LastEventNonceByAddr_Handler,
		},
		{
			MethodName: "BatchFees",
			Handler:    _Query_BatchFees_Handler,
		},
		{
			MethodName: "BatchTxs",
			Handler:    _Query_BatchTxs_Handler,
		},
		{
			MethodName: "ContractCallTxs",
			Handler:    _Query_ContractCallTxs_Handler,
		},
		{
			MethodName: "BatchTxByNonce",
			Handler:    _Query_BatchTxByNonce_Handler,
		},
		{
			MethodName: "BatchTxSignatures",
			Handler:    _Query_BatchTxSignatures_Handler,
		},
		{
			MethodName: "ContractCallTxSignatures",
			Handler:    _Query_ContractCallTxSignatures_Handler,
		},
		{
			MethodName: "ERC20ToDenom",
			Handler:    _Query_ERC20ToDenom_Handler,
		},
		{
			MethodName: "DenomToERC20",
			Handler:    _Query_DenomToERC20_Handler,
		},
		{
			MethodName: "GetDelegateKeyByValidator",
			Handler:    _Query_GetDelegateKeyByValidator_Handler,
		},
		{
			MethodName: "GetDelegateKeyByEth",
			Handler:    _Query_GetDelegateKeyByEth_Handler,
		},
		{
			MethodName: "GetDelegateKeyByOrchestrator",
			Handler:    _Query_GetDelegateKeyByOrchestrator_Handler,
		},
		{
			MethodName: "GetPendingSendToEthereum",
			Handler:    _Query_GetPendingSendToEthereum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravity/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCurrentSignerSetTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentSignerSetTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentSignerSetTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCurrentSignerSetTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentSignerSetTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentSignerSetTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignerSetTx != nil {
		{
			size, err := m.SignerSetTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignerSetTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignerSetTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignerSetTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignerSetTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignerSetTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignerSetTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignerSetTx != nil {
		{
			size, err := m.SignerSetTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignerSetTxSignatureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignerSetTxSignatureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignerSetTxSignatureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignerSetTxSignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignerSetTxSignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignerSetTxSignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignatureMsg != nil {
		{
			size, err := m.SignatureMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignerSetTxSignaturesByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignerSetTxSignaturesByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignerSetTxSignaturesByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignerSetTxSignaturesByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignerSetTxSignaturesByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignerSetTxSignaturesByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignatureMsg) > 0 {
		for iNdEx := len(m.SignatureMsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureMsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastSignerSetTxsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastSignerSetTxsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastSignerSetTxsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastSignerSetTxsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastSignerSetTxsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastSignerSetTxsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignerSetTxs) > 0 {
		for iNdEx := len(m.SignerSetTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignerSetTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingSignerSetTxByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingSignerSetTxByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingSignerSetTxByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingSignerSetTxByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingSignerSetTxByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingSignerSetTxByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignerSetTxs) > 0 {
		for iNdEx := len(m.SignerSetTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignerSetTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBatchFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchFees) > 0 {
		for iNdEx := len(m.BatchFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingBatchTxByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingBatchTxByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingBatchTxByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingBatchTxByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingBatchTxByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingBatchTxByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Batch != nil {
		{
			size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingContractCallTxByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingContractCallTxByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingContractCallTxByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingContractCallTxByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingContractCallTxByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingContractCallTxByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Call != nil {
		{
			size, err := m.Call.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchTxsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchTxsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchTxsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBatchTxsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchTxsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchTxsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for iNdEx := len(m.Batches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractCallTxsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractCallTxsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractCallTxsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryContractCallTxsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractCallTxsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractCallTxsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Calls) > 0 {
		for iNdEx := len(m.Calls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Calls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchTxByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchTxByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchTxByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchTxByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchTxByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchTxByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Batch != nil {
		{
			size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchTxSignaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchTxSignaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchTxSignaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchTxSignaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchTxSignaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchTxSignaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignatureMsg) > 0 {
		for iNdEx := len(m.SignatureMsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureMsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractCallTxSignaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractCallTxSignaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractCallTxSignaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvalidationNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InvalidationId) > 0 {
		i -= len(m.InvalidationId)
		copy(dAtA[i:], m.InvalidationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InvalidationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractCallTxSignaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractCallTxSignaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractCallTxSignaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for iNdEx := len(m.Confirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastEventNonceByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastEventNonceByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastEventNonceByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastEventNonceByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastEventNonceByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastEventNonceByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryERC20ToDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryERC20ToDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryERC20ToDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Erc20) > 0 {
		i -= len(m.Erc20)
		copy(dAtA[i:], m.Erc20)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Erc20)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryERC20ToDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryERC20ToDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryERC20ToDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CosmosOriginated {
		i--
		if m.CosmosOriginated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDenomToERC20Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomToERC20Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomToERC20Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDenomToERC20Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomToERC20Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomToERC20Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CosmosOriginated {
		i--
		if m.CosmosOriginated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Erc20) > 0 {
		i -= len(m.Erc20)
		copy(dAtA[i:], m.Erc20)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Erc20)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateKeysByValidatorAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateKeysByValidatorAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateKeysByValidatorAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateKeysByValidatorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateKeysByValidatorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateKeysByValidatorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateKeysByEthAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateKeysByEthAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateKeysByEthAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateKeysByEthAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateKeysByEthAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateKeysByEthAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateKeysByOrchestratorAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateKeysByOrchestratorAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateKeysByOrchestratorAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateKeysByOrchestratorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateKeysByOrchestratorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateKeysByOrchestratorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingSendToEthereumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSendToEthereumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSendToEthereumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingSendToEthereumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSendToEthereumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSendToEthereumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbatchedTransfers) > 0 {
		for iNdEx := len(m.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbatchedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TransfersInBatches) > 0 {
		for iNdEx := len(m.TransfersInBatches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransfersInBatches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCurrentSignerSetTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCurrentSignerSetTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignerSetTx != nil {
		l = m.SignerSetTx.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySignerSetTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QuerySignerSetTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignerSetTx != nil {
		l = m.SignerSetTx.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySignerSetTxSignatureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySignerSetTxSignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignatureMsg != nil {
		l = m.SignatureMsg.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySignerSetTxSignaturesByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QuerySignerSetTxSignaturesByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignatureMsg) > 0 {
		for _, e := range m.SignatureMsg {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastSignerSetTxsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastSignerSetTxsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignerSetTxs) > 0 {
		for _, e := range m.SignerSetTxs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastPendingSignerSetTxByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastPendingSignerSetTxByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignerSetTxs) > 0 {
		for _, e := range m.SignerSetTxs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBatchFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBatchFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BatchFees) > 0 {
		for _, e := range m.BatchFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastPendingBatchTxByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastPendingBatchTxByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastPendingContractCallTxByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastPendingContractCallTxByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Call != nil {
		l = m.Call.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBatchTxsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBatchTxsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for _, e := range m.Batches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryContractCallTxsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryContractCallTxsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Calls) > 0 {
		for _, e := range m.Calls {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBatchTxByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBatchTxByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBatchTxSignaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBatchTxSignaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignatureMsg) > 0 {
		for _, e := range m.SignatureMsg {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryContractCallTxSignaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvalidationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.InvalidationNonce != 0 {
		n += 1 + sovQuery(uint64(m.InvalidationNonce))
	}
	return n
}

func (m *QueryContractCallTxSignaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for _, e := range m.Confirms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastEventNonceByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastEventNonceByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovQuery(uint64(m.EventNonce))
	}
	return n
}

func (m *QueryERC20ToDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Erc20)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryERC20ToDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CosmosOriginated {
		n += 2
	}
	return n
}

func (m *QueryDenomToERC20Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDenomToERC20Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Erc20)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CosmosOriginated {
		n += 2
	}
	return n
}

func (m *QueryDelegateKeysByValidatorAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateKeysByValidatorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateKeysByEthAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateKeysByEthAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateKeysByOrchestratorAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateKeysByOrchestratorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingSendToEthereumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingSendToEthereumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransfersInBatches) > 0 {
		for _, e := range m.TransfersInBatches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.UnbatchedTransfers) > 0 {
		for _, e := range m.UnbatchedTransfers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentSignerSetTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentSignerSetTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentSignerSetTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentSignerSetTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentSignerSetTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentSignerSetTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignerSetTx == nil {
				m.SignerSetTx = &SignerSetTx{}
			}
			if err := m.SignerSetTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignerSetTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignerSetTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignerSetTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignerSetTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignerSetTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignerSetTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignerSetTx == nil {
				m.SignerSetTx = &SignerSetTx{}
			}
			if err := m.SignerSetTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignerSetTxSignatureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignerSetTxSignatureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignerSetTxSignatureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignerSetTxSignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignerSetTxSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignerSetTxSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignatureMsg == nil {
				m.SignatureMsg = &MsgSignerSetTxSignature{}
			}
			if err := m.SignatureMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignerSetTxSignaturesByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignerSetTxSignaturesByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignerSetTxSignaturesByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignerSetTxSignaturesByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignerSetTxSignaturesByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignerSetTxSignaturesByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureMsg = append(m.SignatureMsg, &MsgSignerSetTxSignature{})
			if err := m.SignatureMsg[len(m.SignatureMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastSignerSetTxsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastSignerSetTxsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastSignerSetTxsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastSignerSetTxsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastSignerSetTxsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastSignerSetTxsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerSetTxs = append(m.SignerSetTxs, &SignerSetTx{})
			if err := m.SignerSetTxs[len(m.SignerSetTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingSignerSetTxByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingSignerSetTxByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingSignerSetTxByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingSignerSetTxByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingSignerSetTxByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingSignerSetTxByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerSetTxs = append(m.SignerSetTxs, &SignerSetTx{})
			if err := m.SignerSetTxs[len(m.SignerSetTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchFees = append(m.BatchFees, &BatchFees{})
			if err := m.BatchFees[len(m.BatchFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingBatchTxByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingBatchTxByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingBatchTxByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingBatchTxByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingBatchTxByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingBatchTxByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &BatchTx{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingContractCallTxByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingContractCallTxByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingContractCallTxByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingContractCallTxByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingContractCallTxByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingContractCallTxByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Call == nil {
				m.Call = &ContractCallTx{}
			}
			if err := m.Call.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchTxsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchTxsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchTxsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchTxsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchTxsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchTxsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batches = append(m.Batches, &BatchTx{})
			if err := m.Batches[len(m.Batches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractCallTxsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractCallTxsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractCallTxsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractCallTxsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractCallTxsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractCallTxsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Calls = append(m.Calls, &ContractCallTx{})
			if err := m.Calls[len(m.Calls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchTxByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchTxByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchTxByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchTxByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchTxByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchTxByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &BatchTx{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchTxSignaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchTxSignaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchTxSignaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchTxSignaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchTxSignaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchTxSignaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureMsg = append(m.SignatureMsg, &MsgBatchTxSignature{})
			if err := m.SignatureMsg[len(m.SignatureMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractCallTxSignaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractCallTxSignaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractCallTxSignaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidationId = append(m.InvalidationId[:0], dAtA[iNdEx:postIndex]...)
			if m.InvalidationId == nil {
				m.InvalidationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractCallTxSignaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractCallTxSignaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractCallTxSignaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirms = append(m.Confirms, &MsgContractCallTxSignature{})
			if err := m.Confirms[len(m.Confirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastEventNonceByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastEventNonceByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastEventNonceByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastEventNonceByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastEventNonceByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastEventNonceByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryERC20ToDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryERC20ToDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryERC20ToDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryERC20ToDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryERC20ToDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryERC20ToDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosOriginated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CosmosOriginated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomToERC20Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomToERC20Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomToERC20Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomToERC20Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomToERC20Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomToERC20Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosOriginated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CosmosOriginated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateKeysByValidatorAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateKeysByValidatorAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateKeysByValidatorAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateKeysByValidatorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateKeysByValidatorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateKeysByValidatorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateKeysByEthAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateKeysByEthAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateKeysByEthAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateKeysByEthAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateKeysByEthAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateKeysByEthAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateKeysByOrchestratorAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateKeysByOrchestratorAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateKeysByOrchestratorAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateKeysByOrchestratorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateKeysByOrchestratorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingSendToEthereumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSendToEthereumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSendToEthereumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingSendToEthereumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSendToEthereumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSendToEthereumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransfersInBatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransfersInBatches = append(m.TransfersInBatches, &SendToEthereum{})
			if err := m.TransfersInBatches[len(m.TransfersInBatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbatchedTransfers = append(m.UnbatchedTransfers, &SendToEthereum{})
			if err := m.UnbatchedTransfers[len(m.UnbatchedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
