// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ParamsRequest struct {
}

func (m *ParamsRequest) Reset()         { *m = ParamsRequest{} }
func (m *ParamsRequest) String() string { return proto.CompactTextString(m) }
func (*ParamsRequest) ProtoMessage()    {}
func (*ParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{0}
}
func (m *ParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsRequest.Merge(m, src)
}
func (m *ParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsRequest proto.InternalMessageInfo

type ParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *ParamsResponse) Reset()         { *m = ParamsResponse{} }
func (m *ParamsResponse) String() string { return proto.CompactTextString(m) }
func (*ParamsResponse) ProtoMessage()    {}
func (*ParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{1}
}
func (m *ParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsResponse.Merge(m, src)
}
func (m *ParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsResponse proto.InternalMessageInfo

func (m *ParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type CurrentSignerSetTxRequest struct {
}

func (m *CurrentSignerSetTxRequest) Reset()         { *m = CurrentSignerSetTxRequest{} }
func (m *CurrentSignerSetTxRequest) String() string { return proto.CompactTextString(m) }
func (*CurrentSignerSetTxRequest) ProtoMessage()    {}
func (*CurrentSignerSetTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{2}
}
func (m *CurrentSignerSetTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentSignerSetTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentSignerSetTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentSignerSetTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentSignerSetTxRequest.Merge(m, src)
}
func (m *CurrentSignerSetTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *CurrentSignerSetTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentSignerSetTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentSignerSetTxRequest proto.InternalMessageInfo

type CurrentSignerSetTxResponse struct {
	SignerSetTx *SignerSetTx `protobuf:"bytes,1,opt,name=signer_set_tx,json=signerSetTx,proto3" json:"signer_set_tx,omitempty"`
}

func (m *CurrentSignerSetTxResponse) Reset()         { *m = CurrentSignerSetTxResponse{} }
func (m *CurrentSignerSetTxResponse) String() string { return proto.CompactTextString(m) }
func (*CurrentSignerSetTxResponse) ProtoMessage()    {}
func (*CurrentSignerSetTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{3}
}
func (m *CurrentSignerSetTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentSignerSetTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentSignerSetTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentSignerSetTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentSignerSetTxResponse.Merge(m, src)
}
func (m *CurrentSignerSetTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *CurrentSignerSetTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentSignerSetTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentSignerSetTxResponse proto.InternalMessageInfo

func (m *CurrentSignerSetTxResponse) GetSignerSetTx() *SignerSetTx {
	if m != nil {
		return m.SignerSetTx
	}
	return nil
}

type SignerSetTxRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *SignerSetTxRequest) Reset()         { *m = SignerSetTxRequest{} }
func (m *SignerSetTxRequest) String() string { return proto.CompactTextString(m) }
func (*SignerSetTxRequest) ProtoMessage()    {}
func (*SignerSetTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{4}
}
func (m *SignerSetTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerSetTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerSetTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerSetTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerSetTxRequest.Merge(m, src)
}
func (m *SignerSetTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignerSetTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerSetTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignerSetTxRequest proto.InternalMessageInfo

func (m *SignerSetTxRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type SignerSetTxResponse struct {
	SignerSetTx *SignerSetTx `protobuf:"bytes,1,opt,name=signer_set_tx,json=signerSetTx,proto3" json:"signer_set_tx,omitempty"`
}

func (m *SignerSetTxResponse) Reset()         { *m = SignerSetTxResponse{} }
func (m *SignerSetTxResponse) String() string { return proto.CompactTextString(m) }
func (*SignerSetTxResponse) ProtoMessage()    {}
func (*SignerSetTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{5}
}
func (m *SignerSetTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerSetTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerSetTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerSetTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerSetTxResponse.Merge(m, src)
}
func (m *SignerSetTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignerSetTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerSetTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignerSetTxResponse proto.InternalMessageInfo

func (m *SignerSetTxResponse) GetSignerSetTx() *SignerSetTx {
	if m != nil {
		return m.SignerSetTx
	}
	return nil
}

type SignerSetTxSignatureRequest struct {
	Nonce   uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *SignerSetTxSignatureRequest) Reset()         { *m = SignerSetTxSignatureRequest{} }
func (m *SignerSetTxSignatureRequest) String() string { return proto.CompactTextString(m) }
func (*SignerSetTxSignatureRequest) ProtoMessage()    {}
func (*SignerSetTxSignatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{6}
}
func (m *SignerSetTxSignatureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerSetTxSignatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerSetTxSignatureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerSetTxSignatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerSetTxSignatureRequest.Merge(m, src)
}
func (m *SignerSetTxSignatureRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignerSetTxSignatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerSetTxSignatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignerSetTxSignatureRequest proto.InternalMessageInfo

func (m *SignerSetTxSignatureRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SignerSetTxSignatureRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type SignerSetTxSignatureResponse struct {
	SignatureMsg *MsgSignerSetTxSignature `protobuf:"bytes,1,opt,name=signature_msg,json=signatureMsg,proto3" json:"signature_msg,omitempty"`
}

func (m *SignerSetTxSignatureResponse) Reset()         { *m = SignerSetTxSignatureResponse{} }
func (m *SignerSetTxSignatureResponse) String() string { return proto.CompactTextString(m) }
func (*SignerSetTxSignatureResponse) ProtoMessage()    {}
func (*SignerSetTxSignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{7}
}
func (m *SignerSetTxSignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerSetTxSignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerSetTxSignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerSetTxSignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerSetTxSignatureResponse.Merge(m, src)
}
func (m *SignerSetTxSignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignerSetTxSignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerSetTxSignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignerSetTxSignatureResponse proto.InternalMessageInfo

func (m *SignerSetTxSignatureResponse) GetSignatureMsg() *MsgSignerSetTxSignature {
	if m != nil {
		return m.SignatureMsg
	}
	return nil
}

type SignerSetTxSignaturesByNonceRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *SignerSetTxSignaturesByNonceRequest) Reset()         { *m = SignerSetTxSignaturesByNonceRequest{} }
func (m *SignerSetTxSignaturesByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*SignerSetTxSignaturesByNonceRequest) ProtoMessage()    {}
func (*SignerSetTxSignaturesByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{8}
}
func (m *SignerSetTxSignaturesByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerSetTxSignaturesByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerSetTxSignaturesByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerSetTxSignaturesByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerSetTxSignaturesByNonceRequest.Merge(m, src)
}
func (m *SignerSetTxSignaturesByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignerSetTxSignaturesByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerSetTxSignaturesByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignerSetTxSignaturesByNonceRequest proto.InternalMessageInfo

func (m *SignerSetTxSignaturesByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type SignerSetTxSignaturesByNonceResponse struct {
	SignatureMsgs []*MsgSignerSetTxSignature `protobuf:"bytes,1,rep,name=signature_msgs,json=signatureMsgs,proto3" json:"signature_msgs,omitempty"`
}

func (m *SignerSetTxSignaturesByNonceResponse) Reset()         { *m = SignerSetTxSignaturesByNonceResponse{} }
func (m *SignerSetTxSignaturesByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*SignerSetTxSignaturesByNonceResponse) ProtoMessage()    {}
func (*SignerSetTxSignaturesByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{9}
}
func (m *SignerSetTxSignaturesByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerSetTxSignaturesByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerSetTxSignaturesByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerSetTxSignaturesByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerSetTxSignaturesByNonceResponse.Merge(m, src)
}
func (m *SignerSetTxSignaturesByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignerSetTxSignaturesByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerSetTxSignaturesByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignerSetTxSignaturesByNonceResponse proto.InternalMessageInfo

func (m *SignerSetTxSignaturesByNonceResponse) GetSignatureMsgs() []*MsgSignerSetTxSignature {
	if m != nil {
		return m.SignatureMsgs
	}
	return nil
}

type LastSignerSetTxsRequest struct {
}

func (m *LastSignerSetTxsRequest) Reset()         { *m = LastSignerSetTxsRequest{} }
func (m *LastSignerSetTxsRequest) String() string { return proto.CompactTextString(m) }
func (*LastSignerSetTxsRequest) ProtoMessage()    {}
func (*LastSignerSetTxsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{10}
}
func (m *LastSignerSetTxsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastSignerSetTxsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastSignerSetTxsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastSignerSetTxsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastSignerSetTxsRequest.Merge(m, src)
}
func (m *LastSignerSetTxsRequest) XXX_Size() int {
	return m.Size()
}
func (m *LastSignerSetTxsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LastSignerSetTxsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LastSignerSetTxsRequest proto.InternalMessageInfo

type LastSignerSetTxsResponse struct {
	SignerSetTxs []*SignerSetTx `protobuf:"bytes,1,rep,name=signer_set_txs,json=signerSetTxs,proto3" json:"signer_set_txs,omitempty"`
}

func (m *LastSignerSetTxsResponse) Reset()         { *m = LastSignerSetTxsResponse{} }
func (m *LastSignerSetTxsResponse) String() string { return proto.CompactTextString(m) }
func (*LastSignerSetTxsResponse) ProtoMessage()    {}
func (*LastSignerSetTxsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{11}
}
func (m *LastSignerSetTxsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastSignerSetTxsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastSignerSetTxsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastSignerSetTxsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastSignerSetTxsResponse.Merge(m, src)
}
func (m *LastSignerSetTxsResponse) XXX_Size() int {
	return m.Size()
}
func (m *LastSignerSetTxsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LastSignerSetTxsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LastSignerSetTxsResponse proto.InternalMessageInfo

func (m *LastSignerSetTxsResponse) GetSignerSetTxs() []*SignerSetTx {
	if m != nil {
		return m.SignerSetTxs
	}
	return nil
}

type LastPendingSignerSetTxByAddrRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *LastPendingSignerSetTxByAddrRequest) Reset()         { *m = LastPendingSignerSetTxByAddrRequest{} }
func (m *LastPendingSignerSetTxByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*LastPendingSignerSetTxByAddrRequest) ProtoMessage()    {}
func (*LastPendingSignerSetTxByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{12}
}
func (m *LastPendingSignerSetTxByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastPendingSignerSetTxByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastPendingSignerSetTxByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastPendingSignerSetTxByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastPendingSignerSetTxByAddrRequest.Merge(m, src)
}
func (m *LastPendingSignerSetTxByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *LastPendingSignerSetTxByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LastPendingSignerSetTxByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LastPendingSignerSetTxByAddrRequest proto.InternalMessageInfo

func (m *LastPendingSignerSetTxByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type LastPendingSignerSetTxByAddrResponse struct {
	SignerSetTxs []*SignerSetTx `protobuf:"bytes,1,rep,name=signer_set_txs,json=signerSetTxs,proto3" json:"signer_set_txs,omitempty"`
}

func (m *LastPendingSignerSetTxByAddrResponse) Reset()         { *m = LastPendingSignerSetTxByAddrResponse{} }
func (m *LastPendingSignerSetTxByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*LastPendingSignerSetTxByAddrResponse) ProtoMessage()    {}
func (*LastPendingSignerSetTxByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{13}
}
func (m *LastPendingSignerSetTxByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastPendingSignerSetTxByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastPendingSignerSetTxByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastPendingSignerSetTxByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastPendingSignerSetTxByAddrResponse.Merge(m, src)
}
func (m *LastPendingSignerSetTxByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *LastPendingSignerSetTxByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LastPendingSignerSetTxByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LastPendingSignerSetTxByAddrResponse proto.InternalMessageInfo

func (m *LastPendingSignerSetTxByAddrResponse) GetSignerSetTxs() []*SignerSetTx {
	if m != nil {
		return m.SignerSetTxs
	}
	return nil
}

type BatchFeeRequest struct {
}

func (m *BatchFeeRequest) Reset()         { *m = BatchFeeRequest{} }
func (m *BatchFeeRequest) String() string { return proto.CompactTextString(m) }
func (*BatchFeeRequest) ProtoMessage()    {}
func (*BatchFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{14}
}
func (m *BatchFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchFeeRequest.Merge(m, src)
}
func (m *BatchFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchFeeRequest proto.InternalMessageInfo

type BatchFeeResponse struct {
	BatchFees []*BatchFees `protobuf:"bytes,1,rep,name=batch_fees,json=batchFees,proto3" json:"batch_fees,omitempty"`
}

func (m *BatchFeeResponse) Reset()         { *m = BatchFeeResponse{} }
func (m *BatchFeeResponse) String() string { return proto.CompactTextString(m) }
func (*BatchFeeResponse) ProtoMessage()    {}
func (*BatchFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{15}
}
func (m *BatchFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchFeeResponse.Merge(m, src)
}
func (m *BatchFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchFeeResponse proto.InternalMessageInfo

func (m *BatchFeeResponse) GetBatchFees() []*BatchFees {
	if m != nil {
		return m.BatchFees
	}
	return nil
}

type LastPendingBatchTxByAddrRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *LastPendingBatchTxByAddrRequest) Reset()         { *m = LastPendingBatchTxByAddrRequest{} }
func (m *LastPendingBatchTxByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*LastPendingBatchTxByAddrRequest) ProtoMessage()    {}
func (*LastPendingBatchTxByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{16}
}
func (m *LastPendingBatchTxByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastPendingBatchTxByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastPendingBatchTxByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastPendingBatchTxByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastPendingBatchTxByAddrRequest.Merge(m, src)
}
func (m *LastPendingBatchTxByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *LastPendingBatchTxByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LastPendingBatchTxByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LastPendingBatchTxByAddrRequest proto.InternalMessageInfo

func (m *LastPendingBatchTxByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type LastPendingBatchTxByAddrResponse struct {
	Batch *BatchTx `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (m *LastPendingBatchTxByAddrResponse) Reset()         { *m = LastPendingBatchTxByAddrResponse{} }
func (m *LastPendingBatchTxByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*LastPendingBatchTxByAddrResponse) ProtoMessage()    {}
func (*LastPendingBatchTxByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{17}
}
func (m *LastPendingBatchTxByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastPendingBatchTxByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastPendingBatchTxByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastPendingBatchTxByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastPendingBatchTxByAddrResponse.Merge(m, src)
}
func (m *LastPendingBatchTxByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *LastPendingBatchTxByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LastPendingBatchTxByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LastPendingBatchTxByAddrResponse proto.InternalMessageInfo

func (m *LastPendingBatchTxByAddrResponse) GetBatch() *BatchTx {
	if m != nil {
		return m.Batch
	}
	return nil
}

type LastPendingContractCallTxByAddrRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *LastPendingContractCallTxByAddrRequest) Reset() {
	*m = LastPendingContractCallTxByAddrRequest{}
}
func (m *LastPendingContractCallTxByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*LastPendingContractCallTxByAddrRequest) ProtoMessage()    {}
func (*LastPendingContractCallTxByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{18}
}
func (m *LastPendingContractCallTxByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastPendingContractCallTxByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastPendingContractCallTxByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastPendingContractCallTxByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastPendingContractCallTxByAddrRequest.Merge(m, src)
}
func (m *LastPendingContractCallTxByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *LastPendingContractCallTxByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LastPendingContractCallTxByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LastPendingContractCallTxByAddrRequest proto.InternalMessageInfo

func (m *LastPendingContractCallTxByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type LastPendingContractCallTxByAddrResponse struct {
	Call *ContractCallTx `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
}

func (m *LastPendingContractCallTxByAddrResponse) Reset() {
	*m = LastPendingContractCallTxByAddrResponse{}
}
func (m *LastPendingContractCallTxByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*LastPendingContractCallTxByAddrResponse) ProtoMessage()    {}
func (*LastPendingContractCallTxByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{19}
}
func (m *LastPendingContractCallTxByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastPendingContractCallTxByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastPendingContractCallTxByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastPendingContractCallTxByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastPendingContractCallTxByAddrResponse.Merge(m, src)
}
func (m *LastPendingContractCallTxByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *LastPendingContractCallTxByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LastPendingContractCallTxByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LastPendingContractCallTxByAddrResponse proto.InternalMessageInfo

func (m *LastPendingContractCallTxByAddrResponse) GetCall() *ContractCallTx {
	if m != nil {
		return m.Call
	}
	return nil
}

type BatchTxsRequest struct {
}

func (m *BatchTxsRequest) Reset()         { *m = BatchTxsRequest{} }
func (m *BatchTxsRequest) String() string { return proto.CompactTextString(m) }
func (*BatchTxsRequest) ProtoMessage()    {}
func (*BatchTxsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{20}
}
func (m *BatchTxsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTxsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTxsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTxsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTxsRequest.Merge(m, src)
}
func (m *BatchTxsRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchTxsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTxsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTxsRequest proto.InternalMessageInfo

type BatchTxsResponse struct {
	Batches []*BatchTx `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (m *BatchTxsResponse) Reset()         { *m = BatchTxsResponse{} }
func (m *BatchTxsResponse) String() string { return proto.CompactTextString(m) }
func (*BatchTxsResponse) ProtoMessage()    {}
func (*BatchTxsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{21}
}
func (m *BatchTxsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTxsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTxsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTxsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTxsResponse.Merge(m, src)
}
func (m *BatchTxsResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchTxsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTxsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTxsResponse proto.InternalMessageInfo

func (m *BatchTxsResponse) GetBatches() []*BatchTx {
	if m != nil {
		return m.Batches
	}
	return nil
}

type ContractCallTxsRequest struct {
}

func (m *ContractCallTxsRequest) Reset()         { *m = ContractCallTxsRequest{} }
func (m *ContractCallTxsRequest) String() string { return proto.CompactTextString(m) }
func (*ContractCallTxsRequest) ProtoMessage()    {}
func (*ContractCallTxsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{22}
}
func (m *ContractCallTxsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCallTxsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCallTxsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCallTxsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCallTxsRequest.Merge(m, src)
}
func (m *ContractCallTxsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContractCallTxsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCallTxsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCallTxsRequest proto.InternalMessageInfo

type ContractCallTxsResponse struct {
	Calls []*ContractCallTx `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (m *ContractCallTxsResponse) Reset()         { *m = ContractCallTxsResponse{} }
func (m *ContractCallTxsResponse) String() string { return proto.CompactTextString(m) }
func (*ContractCallTxsResponse) ProtoMessage()    {}
func (*ContractCallTxsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{23}
}
func (m *ContractCallTxsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCallTxsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCallTxsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCallTxsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCallTxsResponse.Merge(m, src)
}
func (m *ContractCallTxsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ContractCallTxsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCallTxsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCallTxsResponse proto.InternalMessageInfo

func (m *ContractCallTxsResponse) GetCalls() []*ContractCallTx {
	if m != nil {
		return m.Calls
	}
	return nil
}

type BatchTxByNonceRequest struct {
	Nonce           uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *BatchTxByNonceRequest) Reset()         { *m = BatchTxByNonceRequest{} }
func (m *BatchTxByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*BatchTxByNonceRequest) ProtoMessage()    {}
func (*BatchTxByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{24}
}
func (m *BatchTxByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTxByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTxByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTxByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTxByNonceRequest.Merge(m, src)
}
func (m *BatchTxByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchTxByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTxByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTxByNonceRequest proto.InternalMessageInfo

func (m *BatchTxByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BatchTxByNonceRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type BatchTxByNonceResponse struct {
	Batch *BatchTx `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (m *BatchTxByNonceResponse) Reset()         { *m = BatchTxByNonceResponse{} }
func (m *BatchTxByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*BatchTxByNonceResponse) ProtoMessage()    {}
func (*BatchTxByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{25}
}
func (m *BatchTxByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTxByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTxByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTxByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTxByNonceResponse.Merge(m, src)
}
func (m *BatchTxByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchTxByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTxByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTxByNonceResponse proto.InternalMessageInfo

func (m *BatchTxByNonceResponse) GetBatch() *BatchTx {
	if m != nil {
		return m.Batch
	}
	return nil
}

type BatchTxSignaturesRequest struct {
	Nonce           uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *BatchTxSignaturesRequest) Reset()         { *m = BatchTxSignaturesRequest{} }
func (m *BatchTxSignaturesRequest) String() string { return proto.CompactTextString(m) }
func (*BatchTxSignaturesRequest) ProtoMessage()    {}
func (*BatchTxSignaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{26}
}
func (m *BatchTxSignaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTxSignaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTxSignaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTxSignaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTxSignaturesRequest.Merge(m, src)
}
func (m *BatchTxSignaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchTxSignaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTxSignaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTxSignaturesRequest proto.InternalMessageInfo

func (m *BatchTxSignaturesRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BatchTxSignaturesRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type BatchTxSignaturesResponse struct {
	SignatureMsgs []*MsgBatchTxSignature `protobuf:"bytes,1,rep,name=signature_msgs,json=signatureMsgs,proto3" json:"signature_msgs,omitempty"`
}

func (m *BatchTxSignaturesResponse) Reset()         { *m = BatchTxSignaturesResponse{} }
func (m *BatchTxSignaturesResponse) String() string { return proto.CompactTextString(m) }
func (*BatchTxSignaturesResponse) ProtoMessage()    {}
func (*BatchTxSignaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{27}
}
func (m *BatchTxSignaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTxSignaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTxSignaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTxSignaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTxSignaturesResponse.Merge(m, src)
}
func (m *BatchTxSignaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchTxSignaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTxSignaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTxSignaturesResponse proto.InternalMessageInfo

func (m *BatchTxSignaturesResponse) GetSignatureMsgs() []*MsgBatchTxSignature {
	if m != nil {
		return m.SignatureMsgs
	}
	return nil
}

type ContractCallTxSignaturesRequest struct {
	InvalidationId    []byte `protobuf:"bytes,1,opt,name=invalidation_id,json=invalidationId,proto3" json:"invalidation_id,omitempty"`
	InvalidationNonce uint64 `protobuf:"varint,2,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
}

func (m *ContractCallTxSignaturesRequest) Reset()         { *m = ContractCallTxSignaturesRequest{} }
func (m *ContractCallTxSignaturesRequest) String() string { return proto.CompactTextString(m) }
func (*ContractCallTxSignaturesRequest) ProtoMessage()    {}
func (*ContractCallTxSignaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{28}
}
func (m *ContractCallTxSignaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCallTxSignaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCallTxSignaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCallTxSignaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCallTxSignaturesRequest.Merge(m, src)
}
func (m *ContractCallTxSignaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContractCallTxSignaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCallTxSignaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCallTxSignaturesRequest proto.InternalMessageInfo

func (m *ContractCallTxSignaturesRequest) GetInvalidationId() []byte {
	if m != nil {
		return m.InvalidationId
	}
	return nil
}

func (m *ContractCallTxSignaturesRequest) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

type ContractCallTxSignaturesResponse struct {
	SignatureMsgs []*MsgContractCallTxSignature `protobuf:"bytes,1,rep,name=signature_msgs,json=signatureMsgs,proto3" json:"signature_msgs,omitempty"`
}

func (m *ContractCallTxSignaturesResponse) Reset()         { *m = ContractCallTxSignaturesResponse{} }
func (m *ContractCallTxSignaturesResponse) String() string { return proto.CompactTextString(m) }
func (*ContractCallTxSignaturesResponse) ProtoMessage()    {}
func (*ContractCallTxSignaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{29}
}
func (m *ContractCallTxSignaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCallTxSignaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCallTxSignaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCallTxSignaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCallTxSignaturesResponse.Merge(m, src)
}
func (m *ContractCallTxSignaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ContractCallTxSignaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCallTxSignaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCallTxSignaturesResponse proto.InternalMessageInfo

func (m *ContractCallTxSignaturesResponse) GetSignatureMsgs() []*MsgContractCallTxSignature {
	if m != nil {
		return m.SignatureMsgs
	}
	return nil
}

type LastEventNonceByAddrRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *LastEventNonceByAddrRequest) Reset()         { *m = LastEventNonceByAddrRequest{} }
func (m *LastEventNonceByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*LastEventNonceByAddrRequest) ProtoMessage()    {}
func (*LastEventNonceByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{30}
}
func (m *LastEventNonceByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastEventNonceByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastEventNonceByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastEventNonceByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastEventNonceByAddrRequest.Merge(m, src)
}
func (m *LastEventNonceByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *LastEventNonceByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LastEventNonceByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LastEventNonceByAddrRequest proto.InternalMessageInfo

func (m *LastEventNonceByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type LastEventNonceByAddrResponse struct {
	EventNonce uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
}

func (m *LastEventNonceByAddrResponse) Reset()         { *m = LastEventNonceByAddrResponse{} }
func (m *LastEventNonceByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*LastEventNonceByAddrResponse) ProtoMessage()    {}
func (*LastEventNonceByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{31}
}
func (m *LastEventNonceByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastEventNonceByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastEventNonceByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastEventNonceByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastEventNonceByAddrResponse.Merge(m, src)
}
func (m *LastEventNonceByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *LastEventNonceByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LastEventNonceByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LastEventNonceByAddrResponse proto.InternalMessageInfo

func (m *LastEventNonceByAddrResponse) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

type ERC20ToDenomRequest struct {
	Erc20 string `protobuf:"bytes,1,opt,name=erc20,proto3" json:"erc20,omitempty"`
}

func (m *ERC20ToDenomRequest) Reset()         { *m = ERC20ToDenomRequest{} }
func (m *ERC20ToDenomRequest) String() string { return proto.CompactTextString(m) }
func (*ERC20ToDenomRequest) ProtoMessage()    {}
func (*ERC20ToDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{32}
}
func (m *ERC20ToDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20ToDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20ToDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20ToDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20ToDenomRequest.Merge(m, src)
}
func (m *ERC20ToDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *ERC20ToDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20ToDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20ToDenomRequest proto.InternalMessageInfo

func (m *ERC20ToDenomRequest) GetErc20() string {
	if m != nil {
		return m.Erc20
	}
	return ""
}

type ERC20ToDenomResponse struct {
	Denom            string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	CosmosOriginated bool   `protobuf:"varint,2,opt,name=cosmos_originated,json=cosmosOriginated,proto3" json:"cosmos_originated,omitempty"`
}

func (m *ERC20ToDenomResponse) Reset()         { *m = ERC20ToDenomResponse{} }
func (m *ERC20ToDenomResponse) String() string { return proto.CompactTextString(m) }
func (*ERC20ToDenomResponse) ProtoMessage()    {}
func (*ERC20ToDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{33}
}
func (m *ERC20ToDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20ToDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20ToDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20ToDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20ToDenomResponse.Merge(m, src)
}
func (m *ERC20ToDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *ERC20ToDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20ToDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20ToDenomResponse proto.InternalMessageInfo

func (m *ERC20ToDenomResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *ERC20ToDenomResponse) GetCosmosOriginated() bool {
	if m != nil {
		return m.CosmosOriginated
	}
	return false
}

type DenomToERC20Request struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *DenomToERC20Request) Reset()         { *m = DenomToERC20Request{} }
func (m *DenomToERC20Request) String() string { return proto.CompactTextString(m) }
func (*DenomToERC20Request) ProtoMessage()    {}
func (*DenomToERC20Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{34}
}
func (m *DenomToERC20Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomToERC20Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomToERC20Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomToERC20Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomToERC20Request.Merge(m, src)
}
func (m *DenomToERC20Request) XXX_Size() int {
	return m.Size()
}
func (m *DenomToERC20Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomToERC20Request.DiscardUnknown(m)
}

var xxx_messageInfo_DenomToERC20Request proto.InternalMessageInfo

func (m *DenomToERC20Request) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type DenomToERC20Response struct {
	Erc20            string `protobuf:"bytes,1,opt,name=erc20,proto3" json:"erc20,omitempty"`
	CosmosOriginated bool   `protobuf:"varint,2,opt,name=cosmos_originated,json=cosmosOriginated,proto3" json:"cosmos_originated,omitempty"`
}

func (m *DenomToERC20Response) Reset()         { *m = DenomToERC20Response{} }
func (m *DenomToERC20Response) String() string { return proto.CompactTextString(m) }
func (*DenomToERC20Response) ProtoMessage()    {}
func (*DenomToERC20Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{35}
}
func (m *DenomToERC20Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomToERC20Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomToERC20Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomToERC20Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomToERC20Response.Merge(m, src)
}
func (m *DenomToERC20Response) XXX_Size() int {
	return m.Size()
}
func (m *DenomToERC20Response) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomToERC20Response.DiscardUnknown(m)
}

var xxx_messageInfo_DenomToERC20Response proto.InternalMessageInfo

func (m *DenomToERC20Response) GetErc20() string {
	if m != nil {
		return m.Erc20
	}
	return ""
}

func (m *DenomToERC20Response) GetCosmosOriginated() bool {
	if m != nil {
		return m.CosmosOriginated
	}
	return false
}

type DelegateKeysByValidatorAddress struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *DelegateKeysByValidatorAddress) Reset()         { *m = DelegateKeysByValidatorAddress{} }
func (m *DelegateKeysByValidatorAddress) String() string { return proto.CompactTextString(m) }
func (*DelegateKeysByValidatorAddress) ProtoMessage()    {}
func (*DelegateKeysByValidatorAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{36}
}
func (m *DelegateKeysByValidatorAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateKeysByValidatorAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateKeysByValidatorAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateKeysByValidatorAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateKeysByValidatorAddress.Merge(m, src)
}
func (m *DelegateKeysByValidatorAddress) XXX_Size() int {
	return m.Size()
}
func (m *DelegateKeysByValidatorAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateKeysByValidatorAddress.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateKeysByValidatorAddress proto.InternalMessageInfo

func (m *DelegateKeysByValidatorAddress) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type DelegateKeysByValidatorAddressResponse struct {
	EthAddress          string `protobuf:"bytes,1,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *DelegateKeysByValidatorAddressResponse) Reset() {
	*m = DelegateKeysByValidatorAddressResponse{}
}
func (m *DelegateKeysByValidatorAddressResponse) String() string { return proto.CompactTextString(m) }
func (*DelegateKeysByValidatorAddressResponse) ProtoMessage()    {}
func (*DelegateKeysByValidatorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{37}
}
func (m *DelegateKeysByValidatorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateKeysByValidatorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateKeysByValidatorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateKeysByValidatorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateKeysByValidatorAddressResponse.Merge(m, src)
}
func (m *DelegateKeysByValidatorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegateKeysByValidatorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateKeysByValidatorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateKeysByValidatorAddressResponse proto.InternalMessageInfo

func (m *DelegateKeysByValidatorAddressResponse) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *DelegateKeysByValidatorAddressResponse) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type DelegateKeysByEthAddress struct {
	EthAddress string `protobuf:"bytes,1,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
}

func (m *DelegateKeysByEthAddress) Reset()         { *m = DelegateKeysByEthAddress{} }
func (m *DelegateKeysByEthAddress) String() string { return proto.CompactTextString(m) }
func (*DelegateKeysByEthAddress) ProtoMessage()    {}
func (*DelegateKeysByEthAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{38}
}
func (m *DelegateKeysByEthAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateKeysByEthAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateKeysByEthAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateKeysByEthAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateKeysByEthAddress.Merge(m, src)
}
func (m *DelegateKeysByEthAddress) XXX_Size() int {
	return m.Size()
}
func (m *DelegateKeysByEthAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateKeysByEthAddress.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateKeysByEthAddress proto.InternalMessageInfo

func (m *DelegateKeysByEthAddress) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

type DelegateKeysByEthAddressResponse struct {
	ValidatorAddress    string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *DelegateKeysByEthAddressResponse) Reset()         { *m = DelegateKeysByEthAddressResponse{} }
func (m *DelegateKeysByEthAddressResponse) String() string { return proto.CompactTextString(m) }
func (*DelegateKeysByEthAddressResponse) ProtoMessage()    {}
func (*DelegateKeysByEthAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{39}
}
func (m *DelegateKeysByEthAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateKeysByEthAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateKeysByEthAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateKeysByEthAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateKeysByEthAddressResponse.Merge(m, src)
}
func (m *DelegateKeysByEthAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegateKeysByEthAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateKeysByEthAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateKeysByEthAddressResponse proto.InternalMessageInfo

func (m *DelegateKeysByEthAddressResponse) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *DelegateKeysByEthAddressResponse) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type DelegateKeysByOrchestratorAddress struct {
	OrchestratorAddress string `protobuf:"bytes,1,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *DelegateKeysByOrchestratorAddress) Reset()         { *m = DelegateKeysByOrchestratorAddress{} }
func (m *DelegateKeysByOrchestratorAddress) String() string { return proto.CompactTextString(m) }
func (*DelegateKeysByOrchestratorAddress) ProtoMessage()    {}
func (*DelegateKeysByOrchestratorAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{40}
}
func (m *DelegateKeysByOrchestratorAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateKeysByOrchestratorAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateKeysByOrchestratorAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateKeysByOrchestratorAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateKeysByOrchestratorAddress.Merge(m, src)
}
func (m *DelegateKeysByOrchestratorAddress) XXX_Size() int {
	return m.Size()
}
func (m *DelegateKeysByOrchestratorAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateKeysByOrchestratorAddress.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateKeysByOrchestratorAddress proto.InternalMessageInfo

func (m *DelegateKeysByOrchestratorAddress) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type DelegateKeysByOrchestratorAddressResponse struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	EthAddress       string `protobuf:"bytes,2,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
}

func (m *DelegateKeysByOrchestratorAddressResponse) Reset() {
	*m = DelegateKeysByOrchestratorAddressResponse{}
}
func (m *DelegateKeysByOrchestratorAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*DelegateKeysByOrchestratorAddressResponse) ProtoMessage() {}
func (*DelegateKeysByOrchestratorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{41}
}
func (m *DelegateKeysByOrchestratorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateKeysByOrchestratorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateKeysByOrchestratorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateKeysByOrchestratorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateKeysByOrchestratorAddressResponse.Merge(m, src)
}
func (m *DelegateKeysByOrchestratorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegateKeysByOrchestratorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateKeysByOrchestratorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateKeysByOrchestratorAddressResponse proto.InternalMessageInfo

func (m *DelegateKeysByOrchestratorAddressResponse) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *DelegateKeysByOrchestratorAddressResponse) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

type PendingSendToEthereumRequest struct {
	SenderAddress string `protobuf:"bytes,1,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
}

func (m *PendingSendToEthereumRequest) Reset()         { *m = PendingSendToEthereumRequest{} }
func (m *PendingSendToEthereumRequest) String() string { return proto.CompactTextString(m) }
func (*PendingSendToEthereumRequest) ProtoMessage()    {}
func (*PendingSendToEthereumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{42}
}
func (m *PendingSendToEthereumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingSendToEthereumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingSendToEthereumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingSendToEthereumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingSendToEthereumRequest.Merge(m, src)
}
func (m *PendingSendToEthereumRequest) XXX_Size() int {
	return m.Size()
}
func (m *PendingSendToEthereumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingSendToEthereumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PendingSendToEthereumRequest proto.InternalMessageInfo

func (m *PendingSendToEthereumRequest) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

type PendingSendToEthereumResponse struct {
	TransfersInBatches []*SendToEthereum `protobuf:"bytes,1,rep,name=transfers_in_batches,json=transfersInBatches,proto3" json:"transfers_in_batches,omitempty"`
	UnbatchedTransfers []*SendToEthereum `protobuf:"bytes,2,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers,omitempty"`
}

func (m *PendingSendToEthereumResponse) Reset()         { *m = PendingSendToEthereumResponse{} }
func (m *PendingSendToEthereumResponse) String() string { return proto.CompactTextString(m) }
func (*PendingSendToEthereumResponse) ProtoMessage()    {}
func (*PendingSendToEthereumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a9d4192703013c, []int{43}
}
func (m *PendingSendToEthereumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingSendToEthereumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingSendToEthereumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingSendToEthereumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingSendToEthereumResponse.Merge(m, src)
}
func (m *PendingSendToEthereumResponse) XXX_Size() int {
	return m.Size()
}
func (m *PendingSendToEthereumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingSendToEthereumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PendingSendToEthereumResponse proto.InternalMessageInfo

func (m *PendingSendToEthereumResponse) GetTransfersInBatches() []*SendToEthereum {
	if m != nil {
		return m.TransfersInBatches
	}
	return nil
}

func (m *PendingSendToEthereumResponse) GetUnbatchedTransfers() []*SendToEthereum {
	if m != nil {
		return m.UnbatchedTransfers
	}
	return nil
}

func init() {
	proto.RegisterType((*ParamsRequest)(nil), "gravity.v1.ParamsRequest")
	proto.RegisterType((*ParamsResponse)(nil), "gravity.v1.ParamsResponse")
	proto.RegisterType((*CurrentSignerSetTxRequest)(nil), "gravity.v1.CurrentSignerSetTxRequest")
	proto.RegisterType((*CurrentSignerSetTxResponse)(nil), "gravity.v1.CurrentSignerSetTxResponse")
	proto.RegisterType((*SignerSetTxRequest)(nil), "gravity.v1.SignerSetTxRequest")
	proto.RegisterType((*SignerSetTxResponse)(nil), "gravity.v1.SignerSetTxResponse")
	proto.RegisterType((*SignerSetTxSignatureRequest)(nil), "gravity.v1.SignerSetTxSignatureRequest")
	proto.RegisterType((*SignerSetTxSignatureResponse)(nil), "gravity.v1.SignerSetTxSignatureResponse")
	proto.RegisterType((*SignerSetTxSignaturesByNonceRequest)(nil), "gravity.v1.SignerSetTxSignaturesByNonceRequest")
	proto.RegisterType((*SignerSetTxSignaturesByNonceResponse)(nil), "gravity.v1.SignerSetTxSignaturesByNonceResponse")
	proto.RegisterType((*LastSignerSetTxsRequest)(nil), "gravity.v1.LastSignerSetTxsRequest")
	proto.RegisterType((*LastSignerSetTxsResponse)(nil), "gravity.v1.LastSignerSetTxsResponse")
	proto.RegisterType((*LastPendingSignerSetTxByAddrRequest)(nil), "gravity.v1.LastPendingSignerSetTxByAddrRequest")
	proto.RegisterType((*LastPendingSignerSetTxByAddrResponse)(nil), "gravity.v1.LastPendingSignerSetTxByAddrResponse")
	proto.RegisterType((*BatchFeeRequest)(nil), "gravity.v1.BatchFeeRequest")
	proto.RegisterType((*BatchFeeResponse)(nil), "gravity.v1.BatchFeeResponse")
	proto.RegisterType((*LastPendingBatchTxByAddrRequest)(nil), "gravity.v1.LastPendingBatchTxByAddrRequest")
	proto.RegisterType((*LastPendingBatchTxByAddrResponse)(nil), "gravity.v1.LastPendingBatchTxByAddrResponse")
	proto.RegisterType((*LastPendingContractCallTxByAddrRequest)(nil), "gravity.v1.LastPendingContractCallTxByAddrRequest")
	proto.RegisterType((*LastPendingContractCallTxByAddrResponse)(nil), "gravity.v1.LastPendingContractCallTxByAddrResponse")
	proto.RegisterType((*BatchTxsRequest)(nil), "gravity.v1.BatchTxsRequest")
	proto.RegisterType((*BatchTxsResponse)(nil), "gravity.v1.BatchTxsResponse")
	proto.RegisterType((*ContractCallTxsRequest)(nil), "gravity.v1.ContractCallTxsRequest")
	proto.RegisterType((*ContractCallTxsResponse)(nil), "gravity.v1.ContractCallTxsResponse")
	proto.RegisterType((*BatchTxByNonceRequest)(nil), "gravity.v1.BatchTxByNonceRequest")
	proto.RegisterType((*BatchTxByNonceResponse)(nil), "gravity.v1.BatchTxByNonceResponse")
	proto.RegisterType((*BatchTxSignaturesRequest)(nil), "gravity.v1.BatchTxSignaturesRequest")
	proto.RegisterType((*BatchTxSignaturesResponse)(nil), "gravity.v1.BatchTxSignaturesResponse")
	proto.RegisterType((*ContractCallTxSignaturesRequest)(nil), "gravity.v1.ContractCallTxSignaturesRequest")
	proto.RegisterType((*ContractCallTxSignaturesResponse)(nil), "gravity.v1.ContractCallTxSignaturesResponse")
	proto.RegisterType((*LastEventNonceByAddrRequest)(nil), "gravity.v1.LastEventNonceByAddrRequest")
	proto.RegisterType((*LastEventNonceByAddrResponse)(nil), "gravity.v1.LastEventNonceByAddrResponse")
	proto.RegisterType((*ERC20ToDenomRequest)(nil), "gravity.v1.ERC20ToDenomRequest")
	proto.RegisterType((*ERC20ToDenomResponse)(nil), "gravity.v1.ERC20ToDenomResponse")
	proto.RegisterType((*DenomToERC20Request)(nil), "gravity.v1.DenomToERC20Request")
	proto.RegisterType((*DenomToERC20Response)(nil), "gravity.v1.DenomToERC20Response")
	proto.RegisterType((*DelegateKeysByValidatorAddress)(nil), "gravity.v1.DelegateKeysByValidatorAddress")
	proto.RegisterType((*DelegateKeysByValidatorAddressResponse)(nil), "gravity.v1.DelegateKeysByValidatorAddressResponse")
	proto.RegisterType((*DelegateKeysByEthAddress)(nil), "gravity.v1.DelegateKeysByEthAddress")
	proto.RegisterType((*DelegateKeysByEthAddressResponse)(nil), "gravity.v1.DelegateKeysByEthAddressResponse")
	proto.RegisterType((*DelegateKeysByOrchestratorAddress)(nil), "gravity.v1.DelegateKeysByOrchestratorAddress")
	proto.RegisterType((*DelegateKeysByOrchestratorAddressResponse)(nil), "gravity.v1.DelegateKeysByOrchestratorAddressResponse")
	proto.RegisterType((*PendingSendToEthereumRequest)(nil), "gravity.v1.PendingSendToEthereumRequest")
	proto.RegisterType((*PendingSendToEthereumResponse)(nil), "gravity.v1.PendingSendToEthereumResponse")
}

func init() { proto.RegisterFile("gravity/v1/query.proto", fileDescriptor_29a9d4192703013c) }

var fileDescriptor_29a9d4192703013c = []byte{
	// 1777 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x99, 0xcd, 0x6f, 0xdb, 0xc8,
	0x19, 0xc6, 0x4d, 0x37, 0xce, 0x6e, 0x5e, 0x7f, 0x8f, 0x15, 0x47, 0xa6, 0x1d, 0x49, 0xa6, 0xbf,
	0xe3, 0xb5, 0x65, 0xcb, 0x5d, 0x6c, 0x01, 0xa3, 0x58, 0x44, 0x5e, 0xef, 0x26, 0x4d, 0xdc, 0x24,
	0x8a, 0x11, 0x34, 0xed, 0x81, 0xa0, 0xc5, 0x09, 0x45, 0x54, 0x22, 0x1d, 0xce, 0x48, 0xb0, 0x90,
	0xa6, 0x87, 0x1c, 0xda, 0x02, 0xb9, 0xb4, 0xe8, 0xb9, 0x39, 0xf4, 0xd0, 0x4b, 0x8f, 0x45, 0x2f,
	0x3d, 0xb5, 0xb7, 0x1c, 0x03, 0xf4, 0xd2, 0x53, 0x51, 0x24, 0xfd, 0x43, 0x16, 0x1c, 0x0e, 0xa9,
	0x19, 0x8a, 0x14, 0xe5, 0x20, 0x37, 0x71, 0xe6, 0x9d, 0xf7, 0xf9, 0xcd, 0xd7, 0x4b, 0x3e, 0x10,
	0xcc, 0x5b, 0x9e, 0xd1, 0xb1, 0x69, 0xb7, 0xdc, 0xd9, 0x2f, 0x3f, 0x6f, 0x63, 0xaf, 0xbb, 0x7b,
	0xee, 0xb9, 0xd4, 0x45, 0xc0, 0xdb, 0x77, 0x3b, 0xfb, 0x6a, 0x5e, 0x88, 0xb1, 0xb0, 0x83, 0x89,
	0x4d, 0x82, 0x28, 0x55, 0x1c, 0x4d, 0xbb, 0xe7, 0x38, 0x6c, 0xbf, 0x2e, 0xb4, 0xb7, 0x88, 0x95,
	0xd4, 0x7c, 0xee, 0xba, 0xcd, 0x84, 0x2c, 0x67, 0x06, 0xad, 0x37, 0x78, 0xfb, 0x92, 0xe5, 0xba,
	0x56, 0x13, 0x97, 0x8d, 0x73, 0xbb, 0x6c, 0x38, 0x8e, 0x4b, 0x0d, 0x6a, 0xbb, 0x4e, 0x98, 0x2c,
	0x67, 0xb9, 0x96, 0xcb, 0x7e, 0x96, 0xfd, 0x5f, 0x41, 0xab, 0x36, 0x0d, 0x93, 0x0f, 0x0d, 0xcf,
	0x68, 0x91, 0x1a, 0x7e, 0xde, 0xc6, 0x84, 0x6a, 0x55, 0x98, 0x0a, 0x1b, 0xc8, 0xb9, 0xeb, 0x10,
	0x8c, 0xf6, 0xe0, 0xea, 0x39, 0x6b, 0xc9, 0x2b, 0x25, 0x65, 0x73, 0xbc, 0x82, 0x76, 0x7b, 0x73,
	0xdd, 0x0d, 0x62, 0xab, 0x57, 0xde, 0xfe, 0xb7, 0x38, 0x52, 0xe3, 0x71, 0xda, 0x22, 0x2c, 0x1c,
	0xb5, 0x3d, 0x0f, 0x3b, 0xf4, 0xb1, 0x6d, 0x39, 0xd8, 0x7b, 0x8c, 0xe9, 0xe9, 0x45, 0x28, 0xf0,
	0x14, 0xd4, 0xa4, 0x4e, 0x2e, 0x76, 0x08, 0x93, 0x84, 0x35, 0xeb, 0x04, 0x53, 0x9d, 0x5e, 0x70,
	0xcd, 0x1b, 0xa2, 0xa6, 0x38, 0x6e, 0x9c, 0xf4, 0x1e, 0xb4, 0x5b, 0x80, 0xfa, 0x05, 0x51, 0x0e,
	0xc6, 0x1c, 0xd7, 0xa9, 0x63, 0x96, 0xea, 0x4a, 0x2d, 0x78, 0xd0, 0x6a, 0x30, 0xf7, 0xc9, 0xf5,
	0x4f, 0x60, 0x51, 0xe8, 0xf3, 0x7f, 0x1a, 0xb4, 0xed, 0xe1, 0x81, 0x20, 0x28, 0x0f, 0x9f, 0x19,
	0xa6, 0xe9, 0x61, 0x42, 0xf2, 0xa3, 0x25, 0x65, 0xf3, 0x5a, 0x2d, 0x7c, 0xd4, 0x1a, 0xb0, 0x94,
	0x9c, 0x8e, 0xb3, 0xde, 0x09, 0x58, 0x59, 0xa3, 0xde, 0x22, 0x16, 0x67, 0x5d, 0x11, 0x59, 0x4f,
	0x88, 0x95, 0x98, 0x63, 0x22, 0x1a, 0x79, 0x42, 0x2c, 0xed, 0x10, 0x56, 0x92, 0xa2, 0x48, 0xb5,
	0xfb, 0x53, 0x9f, 0x71, 0xf0, 0x4a, 0x7a, 0xb0, 0x3a, 0x78, 0x30, 0xc7, 0xfd, 0x09, 0x4c, 0x49,
	0xb8, 0xfe, 0x79, 0xfa, 0xc1, 0xb0, 0xbc, 0x93, 0x22, 0x2f, 0xd1, 0x16, 0xe0, 0xc6, 0x7d, 0x83,
	0x88, 0x27, 0x88, 0xf4, 0xce, 0x57, 0xbe, 0xbf, 0x8b, 0x23, 0xfc, 0x38, 0x40, 0x88, 0x76, 0x37,
	0x44, 0x48, 0xdd, 0xde, 0x09, 0x61, 0x7b, 0x89, 0xf6, 0x35, 0xac, 0xf8, 0xa9, 0x1f, 0x62, 0xc7,
	0xb4, 0x1d, 0x91, 0xb3, 0xda, 0xbd, 0x6d, 0x9a, 0x5e, 0xb8, 0x4c, 0xc2, 0x8e, 0x2a, 0xf2, 0x8e,
	0x62, 0x58, 0x1d, 0x9c, 0xe0, 0xd3, 0x70, 0xce, 0xc2, 0x74, 0xd5, 0xaf, 0x0b, 0xdf, 0xe2, 0x70,
	0xeb, 0xb4, 0x3b, 0x30, 0xd3, 0x6b, 0xe2, 0x2a, 0x3f, 0x04, 0x60, 0xe5, 0x43, 0x7f, 0x86, 0x71,
	0xa8, 0x70, 0x5d, 0x54, 0x08, 0x47, 0x90, 0xda, 0xb5, 0xb3, 0xf0, 0xa7, 0x76, 0x08, 0x45, 0x61,
	0x0e, 0x2c, 0x64, 0xf8, 0x05, 0x38, 0x81, 0x52, 0xfa, 0x60, 0x8e, 0xb5, 0x05, 0x63, 0x4c, 0x8d,
	0x1f, 0xe7, 0xb9, 0x3e, 0xa2, 0xd3, 0x8b, 0x5a, 0x10, 0xa1, 0x55, 0x61, 0x5d, 0x48, 0x77, 0xe4,
	0x3a, 0xd4, 0x33, 0xea, 0xf4, 0xc8, 0x68, 0x36, 0x87, 0x47, 0x7a, 0x0a, 0x1b, 0x99, 0x39, 0x38,
	0xd9, 0x2e, 0x5c, 0xa9, 0x1b, 0xcd, 0x26, 0x07, 0x53, 0x45, 0x30, 0x79, 0x5c, 0x8d, 0xc5, 0x45,
	0xfb, 0x20, 0x9c, 0xce, 0xdb, 0x7c, 0x1f, 0xc4, 0x53, 0xb9, 0x03, 0x9f, 0xb1, 0xe9, 0x44, 0x9b,
	0x90, 0x38, 0xe5, 0x30, 0x46, 0xcb, 0xc3, 0xbc, 0xac, 0x16, 0x25, 0xbf, 0x07, 0x37, 0xfa, 0x7a,
	0xa2, 0x22, 0x3e, 0xe6, 0x23, 0x85, 0x0a, 0x83, 0xd8, 0x83, 0x40, 0xed, 0x67, 0x70, 0x3d, 0xda,
	0x9f, 0xec, 0x2a, 0x80, 0xb6, 0x60, 0xa6, 0xce, 0xf3, 0xe8, 0x72, 0x3d, 0x9b, 0x0e, 0xdb, 0x6f,
	0xf3, 0x15, 0x3f, 0x82, 0xf9, 0x78, 0xe6, 0xcb, 0x6f, 0xfd, 0x2f, 0x20, 0xcf, 0x5b, 0x7a, 0x15,
	0xe7, 0x93, 0x11, 0xd6, 0x61, 0x21, 0x21, 0x39, 0x87, 0xfc, 0x36, 0xa5, 0x8e, 0x15, 0x63, 0x75,
	0x2c, 0x9e, 0x21, 0x5e, 0xc3, 0xba, 0x50, 0x94, 0x57, 0xbe, 0x7f, 0x22, 0x1b, 0x30, 0x6d, 0x3b,
	0x1d, 0xa3, 0x69, 0x9b, 0xec, 0x55, 0xae, 0xdb, 0x26, 0x9b, 0xd2, 0x44, 0x6d, 0x4a, 0x6c, 0xbe,
	0x6b, 0xa2, 0x1d, 0x40, 0x52, 0x60, 0x30, 0xfd, 0x51, 0x36, 0xfd, 0x59, 0xb1, 0x87, 0xad, 0xb7,
	0xf6, 0x1c, 0x4a, 0xe9, 0xd2, 0x7c, 0x9a, 0x27, 0x29, 0xd3, 0x5c, 0x8f, 0x4d, 0x33, 0x25, 0x51,
	0x7c, 0xb6, 0x5f, 0xc1, 0xa2, 0x7f, 0xcd, 0x8e, 0x3b, 0xd8, 0xa1, 0x0c, 0x62, 0xd8, 0xfb, 0xf9,
	0x35, 0x2c, 0x25, 0x0f, 0xe4, 0x9c, 0x45, 0x18, 0xc7, 0x7e, 0x9f, 0x2e, 0x6e, 0x39, 0xe0, 0x28,
	0x5c, 0xdb, 0x86, 0xb9, 0xe3, 0xda, 0x51, 0x65, 0xef, 0xd4, 0xfd, 0x06, 0x3b, 0x6e, 0x4b, 0x38,
	0x24, 0xd8, 0xab, 0x57, 0xf6, 0xb8, 0x5e, 0xf0, 0xa0, 0x3d, 0x85, 0x9c, 0x1c, 0xcc, 0x55, 0x72,
	0x30, 0x66, 0xfa, 0x0d, 0x61, 0x34, 0x7b, 0x40, 0xdb, 0x30, 0x5b, 0x77, 0x49, 0xcb, 0x25, 0xba,
	0xeb, 0xd9, 0x96, 0xed, 0x18, 0x14, 0x9b, 0x6c, 0xd5, 0x3f, 0xaf, 0xcd, 0x04, 0x1d, 0x0f, 0xa2,
	0x76, 0x9f, 0x83, 0xe5, 0x3c, 0x75, 0x99, 0x82, 0xc0, 0xd1, 0x9f, 0xd9, 0xe7, 0x90, 0x83, 0x7b,
	0x1c, 0xfd, 0xd4, 0x97, 0xe3, 0x38, 0x81, 0xc2, 0x37, 0xb8, 0x89, 0x2d, 0x83, 0xe2, 0x7b, 0xb8,
	0x4b, 0xaa, 0xdd, 0x27, 0xc1, 0xe9, 0x70, 0x3d, 0x7e, 0xfc, 0xfd, 0x74, 0x9d, 0xb0, 0x4d, 0x97,
	0xb7, 0x65, 0xa6, 0x13, 0x0b, 0xd6, 0x7e, 0x05, 0xeb, 0x83, 0xd3, 0x49, 0x3b, 0x45, 0x1b, 0xb1,
	0x84, 0x80, 0x69, 0x23, 0xd4, 0xdd, 0x87, 0x9c, 0xeb, 0xf9, 0x35, 0x8e, 0x7a, 0x92, 0x74, 0x70,
	0x4b, 0xe7, 0xc4, 0xbe, 0x50, 0xfd, 0x10, 0xf2, 0xb2, 0xfa, 0x71, 0x2f, 0x5d, 0x96, 0x9e, 0xf6,
	0x4a, 0x81, 0x52, 0xda, 0xe8, 0x88, 0xfa, 0x32, 0x8b, 0xf1, 0x31, 0x33, 0x78, 0x02, 0xcb, 0x32,
	0xc3, 0x83, 0xfe, 0xa0, 0xd4, 0xbc, 0x4a, 0x7a, 0xde, 0x2e, 0x6c, 0x65, 0xe6, 0xfd, 0xb8, 0x49,
	0xc6, 0xd6, 0x75, 0xb4, 0x6f, 0x5d, 0x8f, 0x61, 0x29, 0xfc, 0xc4, 0xc1, 0x8e, 0x79, 0xea, 0x1e,
	0xd3, 0x06, 0xf6, 0x70, 0x3b, 0xba, 0x7a, 0x6b, 0x30, 0x45, 0xb0, 0x63, 0xe2, 0xb8, 0xd4, 0x64,
	0xd0, 0x1a, 0xa6, 0xf9, 0x87, 0x02, 0x37, 0x53, 0xf2, 0x70, 0xec, 0xfb, 0x90, 0xa3, 0x9e, 0xe1,
	0x90, 0x67, 0xd8, 0x23, 0xba, 0xed, 0xe8, 0xf2, 0x6b, 0x54, 0x7a, 0xc9, 0xc5, 0x32, 0xa0, 0x68,
	0xdc, 0x5d, 0xa7, 0x1a, 0x8c, 0x42, 0xf7, 0x60, 0xae, 0xed, 0x04, 0x29, 0x4c, 0x3d, 0xea, 0xcf,
	0x8f, 0x66, 0x27, 0x8b, 0x86, 0x9d, 0x86, 0xa3, 0x2a, 0xff, 0x5c, 0x80, 0xb1, 0x47, 0xbe, 0x41,
	0x44, 0x3a, 0x5c, 0x0d, 0x5c, 0x12, 0x5a, 0xe8, 0x77, 0x4e, 0x7c, 0x49, 0x54, 0x35, 0xa9, 0x2b,
	0x98, 0xa5, 0x56, 0x78, 0xf5, 0xef, 0xff, 0xff, 0x71, 0x34, 0x8f, 0xe6, 0xcb, 0x3d, 0xe3, 0x77,
	0x86, 0xa9, 0x51, 0x0e, 0xec, 0x16, 0x7a, 0xad, 0x00, 0xea, 0xb7, 0x54, 0x68, 0x4d, 0x7a, 0xc7,
	0xa7, 0xf9, 0x31, 0x75, 0x3d, 0x2b, 0x8c, 0x53, 0xac, 0x33, 0x8a, 0x12, 0x2a, 0xc4, 0x29, 0x3a,
	0x46, 0x93, 0x60, 0x5a, 0xae, 0x07, 0x43, 0x91, 0x03, 0xe3, 0x22, 0x45, 0x21, 0xed, 0x93, 0x95,
	0xcb, 0x17, 0x53, 0xfb, 0xb3, 0x66, 0x1f, 0xe8, 0xa2, 0x3f, 0x28, 0x90, 0x4b, 0xb2, 0x0c, 0x68,
	0x23, 0x25, 0x73, 0xdc, 0x97, 0xa9, 0x9b, 0xd9, 0x81, 0xc3, 0xae, 0x81, 0xeb, 0x3c, 0xb3, 0xbd,
	0x16, 0xfa, 0xab, 0x92, 0x6c, 0xdd, 0x42, 0x4f, 0x84, 0xca, 0x59, 0x92, 0x31, 0xeb, 0xa5, 0xee,
	0x0d, 0x3f, 0x80, 0xb3, 0x6e, 0x32, 0x56, 0x0d, 0x95, 0xe2, 0xac, 0x1c, 0x92, 0x94, 0x5f, 0xb0,
	0x37, 0xe6, 0x4b, 0xf4, 0x1b, 0x05, 0x66, 0xe2, 0x96, 0x09, 0x49, 0xae, 0x2c, 0xc5, 0x6b, 0xa9,
	0xab, 0x83, 0x83, 0x38, 0xc9, 0x06, 0x23, 0x59, 0x46, 0xc5, 0x94, 0x55, 0xf3, 0x82, 0x6c, 0x04,
	0xfd, 0x45, 0x09, 0xde, 0xf5, 0x69, 0xfe, 0x48, 0x5e, 0xb6, 0x21, 0xac, 0x98, 0xbc, 0x6c, 0xc3,
	0x58, 0x2f, 0x6d, 0x85, 0xc1, 0xde, 0x44, 0x8b, 0x29, 0xb0, 0x4d, 0x83, 0x50, 0xf4, 0x46, 0x09,
	0x4c, 0x66, 0x92, 0x8f, 0x41, 0xdb, 0x29, 0x9a, 0x49, 0x56, 0x49, 0xfd, 0x62, 0xb8, 0xe0, 0xac,
	0x95, 0x64, 0xe5, 0xa7, 0xfc, 0x82, 0x97, 0xd3, 0x97, 0xe8, 0x6f, 0x8a, 0xe4, 0xd2, 0x92, 0x5c,
	0x0d, 0xaa, 0xa4, 0x48, 0x0f, 0xb0, 0x51, 0xea, 0xc1, 0xa5, 0xc6, 0x64, 0x51, 0x37, 0x5d, 0xcb,
	0xae, 0x0b, 0xd4, 0x6f, 0x14, 0xc8, 0x25, 0x7d, 0xeb, 0xc9, 0x57, 0x79, 0xc0, 0x67, 0xa4, 0x7c,
	0x95, 0x07, 0x7d, 0x36, 0x6a, 0x07, 0x0c, 0x6a, 0x07, 0x6d, 0xc7, 0xa1, 0x5c, 0xcf, 0xa8, 0x37,
	0x71, 0x99, 0x7d, 0x40, 0xb2, 0x0b, 0x22, 0x00, 0xda, 0x70, 0x2d, 0xf2, 0xc4, 0x68, 0x31, 0xc9,
	0x2a, 0x87, 0x20, 0x4b, 0xc9, 0x9d, 0x5c, 0x7c, 0x99, 0x89, 0x2f, 0xa2, 0x85, 0xc4, 0x7d, 0xf4,
	0xed, 0x38, 0x72, 0xe1, 0xf3, 0xd0, 0x28, 0x26, 0x28, 0x09, 0x77, 0x70, 0x29, 0xb9, 0x33, 0xab,
	0x0a, 0x04, 0x27, 0xc6, 0x6d, 0x53, 0xcb, 0xb5, 0x1d, 0x8b, 0x5e, 0xa0, 0xdf, 0x2a, 0x30, 0x1d,
	0x73, 0x8f, 0x48, 0x4b, 0xb7, 0x89, 0x91, 0xfe, 0xca, 0xc0, 0x18, 0x8e, 0xb1, 0xcd, 0x30, 0xd6,
	0xd0, 0xca, 0x60, 0x0c, 0x76, 0x20, 0xd0, 0xaf, 0x61, 0x4a, 0xf6, 0x87, 0x68, 0x39, 0x61, 0x8e,
	0xb1, 0x02, 0xa9, 0x0d, 0x0a, 0xe1, 0x14, 0x6b, 0x8c, 0xa2, 0x88, 0x6e, 0xa6, 0x5c, 0x1f, 0x5e,
	0x0f, 0x7f, 0xa7, 0xc0, 0x6c, 0x9f, 0xfd, 0x43, 0xab, 0x09, 0x02, 0x7d, 0x8e, 0x4d, 0x5d, 0xcb,
	0x88, 0xca, 0x7a, 0x91, 0x04, 0x24, 0x61, 0x89, 0x46, 0x7f, 0x52, 0x20, 0x9f, 0xe6, 0xd4, 0xe4,
	0x42, 0x93, 0x61, 0x25, 0xe5, 0x42, 0x93, 0x65, 0xfe, 0xd2, 0xf9, 0x82, 0x2b, 0x1b, 0xf1, 0xbd,
	0x56, 0x60, 0x42, 0xf4, 0x4b, 0x48, 0x7a, 0x9d, 0x27, 0xd8, 0x2e, 0xb5, 0x94, 0x1e, 0xc0, 0xb5,
	0x7f, 0xc4, 0xb4, 0x2b, 0x68, 0xaf, 0xff, 0xc5, 0x15, 0xb3, 0x38, 0x65, 0xe6, 0x7e, 0x74, 0xea,
	0xea, 0x81, 0x1d, 0xf3, 0x69, 0x44, 0xd7, 0x24, 0xd3, 0x24, 0x98, 0x2f, 0x99, 0x26, 0xc9, 0x70,
	0x5d, 0x86, 0x86, 0x41, 0xf8, 0x34, 0x81, 0x29, 0xfb, 0xbb, 0x02, 0x0b, 0xdf, 0x61, 0x2a, 0x7c,
	0x84, 0x0b, 0xde, 0x08, 0xdd, 0x92, 0x95, 0x07, 0x19, 0x28, 0xb5, 0x32, 0x7c, 0x6c, 0x36, 0x37,
	0xfb, 0xd7, 0x42, 0x37, 0x79, 0x16, 0xfd, 0x97, 0xb8, 0x4b, 0xf4, 0xb3, 0xae, 0x1e, 0x7d, 0xe5,
	0xfb, 0x67, 0x6e, 0x2e, 0xce, 0x7d, 0x4c, 0x1b, 0xf2, 0x05, 0x48, 0xb3, 0x4d, 0xf2, 0x39, 0xcb,
	0x32, 0x57, 0x5a, 0x85, 0x51, 0x7e, 0x81, 0x6e, 0x0d, 0x49, 0x89, 0x69, 0x03, 0xfd, 0x4b, 0x81,
	0xa5, 0x38, 0x9f, 0xe8, 0x6d, 0xd0, 0x4e, 0x3a, 0x42, 0x82, 0x07, 0x52, 0xbf, 0xbc, 0x54, 0x78,
	0x84, 0x7e, 0xc8, 0xd0, 0xbf, 0x44, 0x07, 0x43, 0xa2, 0x8b, 0x1e, 0x0d, 0xfd, 0x59, 0x81, 0xfc,
	0x77, 0x98, 0x26, 0xba, 0x1b, 0x24, 0xbd, 0xc4, 0x06, 0x19, 0x29, 0x75, 0x6b, 0x88, 0x48, 0x8e,
	0xbb, 0xcf, 0x70, 0xb7, 0xd1, 0x56, 0x32, 0xee, 0x79, 0x30, 0x58, 0xf7, 0x1d, 0x18, 0x3b, 0xc2,
	0xb4, 0x51, 0x7d, 0xf4, 0xf6, 0x7d, 0x41, 0x79, 0xf7, 0xbe, 0xa0, 0xfc, 0xef, 0x7d, 0x41, 0xf9,
	0xfd, 0x87, 0xc2, 0xc8, 0xbb, 0x0f, 0x85, 0x91, 0xff, 0x7c, 0x28, 0x8c, 0xfc, 0xfc, 0x2b, 0xcb,
	0xa6, 0x8d, 0xf6, 0xd9, 0x6e, 0xdd, 0x6d, 0xf1, 0x7b, 0x10, 0x66, 0xdd, 0x39, 0xf3, 0x6c, 0xd3,
	0xc2, 0xe5, 0x96, 0x6b, 0xb6, 0x9b, 0xb8, 0x7c, 0x11, 0xa9, 0xb1, 0xbf, 0xbb, 0xce, 0xae, 0xb2,
	0x7f, 0x9d, 0x0e, 0xbe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xf2, 0x40, 0x85, 0x47, 0x1b, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Deployments queries deployments
	Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error)
	CurrentSignerSetTx(ctx context.Context, in *CurrentSignerSetTxRequest, opts ...grpc.CallOption) (*CurrentSignerSetTxResponse, error)
	SignerSetTx(ctx context.Context, in *SignerSetTxRequest, opts ...grpc.CallOption) (*SignerSetTxResponse, error)
	SignerSetTxSignature(ctx context.Context, in *SignerSetTxSignatureRequest, opts ...grpc.CallOption) (*SignerSetTxSignatureResponse, error)
	SignerSetTxSignaturesByNonce(ctx context.Context, in *SignerSetTxSignaturesByNonceRequest, opts ...grpc.CallOption) (*SignerSetTxSignaturesByNonceResponse, error)
	LastSignerSetTxs(ctx context.Context, in *LastSignerSetTxsRequest, opts ...grpc.CallOption) (*LastSignerSetTxsResponse, error)
	LastPendingSignerSetTxByAddr(ctx context.Context, in *LastPendingSignerSetTxByAddrRequest, opts ...grpc.CallOption) (*LastPendingSignerSetTxByAddrResponse, error)
	LastPendingBatchTxByAddr(ctx context.Context, in *LastPendingBatchTxByAddrRequest, opts ...grpc.CallOption) (*LastPendingBatchTxByAddrResponse, error)
	LastPendingContractCallTxByAddr(ctx context.Context, in *LastPendingContractCallTxByAddrRequest, opts ...grpc.CallOption) (*LastPendingContractCallTxByAddrResponse, error)
	LastEventNonceByAddr(ctx context.Context, in *LastEventNonceByAddrRequest, opts ...grpc.CallOption) (*LastEventNonceByAddrResponse, error)
	BatchFees(ctx context.Context, in *BatchFeeRequest, opts ...grpc.CallOption) (*BatchFeeResponse, error)
	BatchTxs(ctx context.Context, in *BatchTxsRequest, opts ...grpc.CallOption) (*BatchTxsResponse, error)
	ContractCallTxs(ctx context.Context, in *ContractCallTxsRequest, opts ...grpc.CallOption) (*ContractCallTxsResponse, error)
	BatchTxByNonce(ctx context.Context, in *BatchTxByNonceRequest, opts ...grpc.CallOption) (*BatchTxByNonceResponse, error)
	BatchTxSignatures(ctx context.Context, in *BatchTxSignaturesRequest, opts ...grpc.CallOption) (*BatchTxSignaturesResponse, error)
	ContractCallTxSignatures(ctx context.Context, in *ContractCallTxSignaturesRequest, opts ...grpc.CallOption) (*ContractCallTxSignaturesResponse, error)
	ERC20ToDenom(ctx context.Context, in *ERC20ToDenomRequest, opts ...grpc.CallOption) (*ERC20ToDenomResponse, error)
	DenomToERC20(ctx context.Context, in *DenomToERC20Request, opts ...grpc.CallOption) (*DenomToERC20Response, error)
	GetDelegateKeyByValidator(ctx context.Context, in *DelegateKeysByValidatorAddress, opts ...grpc.CallOption) (*DelegateKeysByValidatorAddressResponse, error)
	GetDelegateKeyByEth(ctx context.Context, in *DelegateKeysByEthAddress, opts ...grpc.CallOption) (*DelegateKeysByEthAddressResponse, error)
	GetDelegateKeyByOrchestrator(ctx context.Context, in *DelegateKeysByOrchestratorAddress, opts ...grpc.CallOption) (*DelegateKeysByOrchestratorAddressResponse, error)
	GetPendingSendToEthereum(ctx context.Context, in *PendingSendToEthereumRequest, opts ...grpc.CallOption) (*PendingSendToEthereumResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error) {
	out := new(ParamsResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentSignerSetTx(ctx context.Context, in *CurrentSignerSetTxRequest, opts ...grpc.CallOption) (*CurrentSignerSetTxResponse, error) {
	out := new(CurrentSignerSetTxResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/CurrentSignerSetTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignerSetTx(ctx context.Context, in *SignerSetTxRequest, opts ...grpc.CallOption) (*SignerSetTxResponse, error) {
	out := new(SignerSetTxResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/SignerSetTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignerSetTxSignature(ctx context.Context, in *SignerSetTxSignatureRequest, opts ...grpc.CallOption) (*SignerSetTxSignatureResponse, error) {
	out := new(SignerSetTxSignatureResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/SignerSetTxSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignerSetTxSignaturesByNonce(ctx context.Context, in *SignerSetTxSignaturesByNonceRequest, opts ...grpc.CallOption) (*SignerSetTxSignaturesByNonceResponse, error) {
	out := new(SignerSetTxSignaturesByNonceResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/SignerSetTxSignaturesByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastSignerSetTxs(ctx context.Context, in *LastSignerSetTxsRequest, opts ...grpc.CallOption) (*LastSignerSetTxsResponse, error) {
	out := new(LastSignerSetTxsResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/LastSignerSetTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingSignerSetTxByAddr(ctx context.Context, in *LastPendingSignerSetTxByAddrRequest, opts ...grpc.CallOption) (*LastPendingSignerSetTxByAddrResponse, error) {
	out := new(LastPendingSignerSetTxByAddrResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/LastPendingSignerSetTxByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingBatchTxByAddr(ctx context.Context, in *LastPendingBatchTxByAddrRequest, opts ...grpc.CallOption) (*LastPendingBatchTxByAddrResponse, error) {
	out := new(LastPendingBatchTxByAddrResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/LastPendingBatchTxByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingContractCallTxByAddr(ctx context.Context, in *LastPendingContractCallTxByAddrRequest, opts ...grpc.CallOption) (*LastPendingContractCallTxByAddrResponse, error) {
	out := new(LastPendingContractCallTxByAddrResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/LastPendingContractCallTxByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastEventNonceByAddr(ctx context.Context, in *LastEventNonceByAddrRequest, opts ...grpc.CallOption) (*LastEventNonceByAddrResponse, error) {
	out := new(LastEventNonceByAddrResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/LastEventNonceByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchFees(ctx context.Context, in *BatchFeeRequest, opts ...grpc.CallOption) (*BatchFeeResponse, error) {
	out := new(BatchFeeResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/BatchFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchTxs(ctx context.Context, in *BatchTxsRequest, opts ...grpc.CallOption) (*BatchTxsResponse, error) {
	out := new(BatchTxsResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/BatchTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractCallTxs(ctx context.Context, in *ContractCallTxsRequest, opts ...grpc.CallOption) (*ContractCallTxsResponse, error) {
	out := new(ContractCallTxsResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/ContractCallTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchTxByNonce(ctx context.Context, in *BatchTxByNonceRequest, opts ...grpc.CallOption) (*BatchTxByNonceResponse, error) {
	out := new(BatchTxByNonceResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/BatchTxByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchTxSignatures(ctx context.Context, in *BatchTxSignaturesRequest, opts ...grpc.CallOption) (*BatchTxSignaturesResponse, error) {
	out := new(BatchTxSignaturesResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/BatchTxSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractCallTxSignatures(ctx context.Context, in *ContractCallTxSignaturesRequest, opts ...grpc.CallOption) (*ContractCallTxSignaturesResponse, error) {
	out := new(ContractCallTxSignaturesResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/ContractCallTxSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ERC20ToDenom(ctx context.Context, in *ERC20ToDenomRequest, opts ...grpc.CallOption) (*ERC20ToDenomResponse, error) {
	out := new(ERC20ToDenomResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/ERC20ToDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomToERC20(ctx context.Context, in *DenomToERC20Request, opts ...grpc.CallOption) (*DenomToERC20Response, error) {
	out := new(DenomToERC20Response)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/DenomToERC20", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateKeyByValidator(ctx context.Context, in *DelegateKeysByValidatorAddress, opts ...grpc.CallOption) (*DelegateKeysByValidatorAddressResponse, error) {
	out := new(DelegateKeysByValidatorAddressResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/GetDelegateKeyByValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateKeyByEth(ctx context.Context, in *DelegateKeysByEthAddress, opts ...grpc.CallOption) (*DelegateKeysByEthAddressResponse, error) {
	out := new(DelegateKeysByEthAddressResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/GetDelegateKeyByEth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateKeyByOrchestrator(ctx context.Context, in *DelegateKeysByOrchestratorAddress, opts ...grpc.CallOption) (*DelegateKeysByOrchestratorAddressResponse, error) {
	out := new(DelegateKeysByOrchestratorAddressResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/GetDelegateKeyByOrchestrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingSendToEthereum(ctx context.Context, in *PendingSendToEthereumRequest, opts ...grpc.CallOption) (*PendingSendToEthereumResponse, error) {
	out := new(PendingSendToEthereumResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Query/GetPendingSendToEthereum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Deployments queries deployments
	Params(context.Context, *ParamsRequest) (*ParamsResponse, error)
	CurrentSignerSetTx(context.Context, *CurrentSignerSetTxRequest) (*CurrentSignerSetTxResponse, error)
	SignerSetTx(context.Context, *SignerSetTxRequest) (*SignerSetTxResponse, error)
	SignerSetTxSignature(context.Context, *SignerSetTxSignatureRequest) (*SignerSetTxSignatureResponse, error)
	SignerSetTxSignaturesByNonce(context.Context, *SignerSetTxSignaturesByNonceRequest) (*SignerSetTxSignaturesByNonceResponse, error)
	LastSignerSetTxs(context.Context, *LastSignerSetTxsRequest) (*LastSignerSetTxsResponse, error)
	LastPendingSignerSetTxByAddr(context.Context, *LastPendingSignerSetTxByAddrRequest) (*LastPendingSignerSetTxByAddrResponse, error)
	LastPendingBatchTxByAddr(context.Context, *LastPendingBatchTxByAddrRequest) (*LastPendingBatchTxByAddrResponse, error)
	LastPendingContractCallTxByAddr(context.Context, *LastPendingContractCallTxByAddrRequest) (*LastPendingContractCallTxByAddrResponse, error)
	LastEventNonceByAddr(context.Context, *LastEventNonceByAddrRequest) (*LastEventNonceByAddrResponse, error)
	BatchFees(context.Context, *BatchFeeRequest) (*BatchFeeResponse, error)
	BatchTxs(context.Context, *BatchTxsRequest) (*BatchTxsResponse, error)
	ContractCallTxs(context.Context, *ContractCallTxsRequest) (*ContractCallTxsResponse, error)
	BatchTxByNonce(context.Context, *BatchTxByNonceRequest) (*BatchTxByNonceResponse, error)
	BatchTxSignatures(context.Context, *BatchTxSignaturesRequest) (*BatchTxSignaturesResponse, error)
	ContractCallTxSignatures(context.Context, *ContractCallTxSignaturesRequest) (*ContractCallTxSignaturesResponse, error)
	ERC20ToDenom(context.Context, *ERC20ToDenomRequest) (*ERC20ToDenomResponse, error)
	DenomToERC20(context.Context, *DenomToERC20Request) (*DenomToERC20Response, error)
	GetDelegateKeyByValidator(context.Context, *DelegateKeysByValidatorAddress) (*DelegateKeysByValidatorAddressResponse, error)
	GetDelegateKeyByEth(context.Context, *DelegateKeysByEthAddress) (*DelegateKeysByEthAddressResponse, error)
	GetDelegateKeyByOrchestrator(context.Context, *DelegateKeysByOrchestratorAddress) (*DelegateKeysByOrchestratorAddressResponse, error)
	GetPendingSendToEthereum(context.Context, *PendingSendToEthereumRequest) (*PendingSendToEthereumResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *ParamsRequest) (*ParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CurrentSignerSetTx(ctx context.Context, req *CurrentSignerSetTxRequest) (*CurrentSignerSetTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentSignerSetTx not implemented")
}
func (*UnimplementedQueryServer) SignerSetTx(ctx context.Context, req *SignerSetTxRequest) (*SignerSetTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignerSetTx not implemented")
}
func (*UnimplementedQueryServer) SignerSetTxSignature(ctx context.Context, req *SignerSetTxSignatureRequest) (*SignerSetTxSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignerSetTxSignature not implemented")
}
func (*UnimplementedQueryServer) SignerSetTxSignaturesByNonce(ctx context.Context, req *SignerSetTxSignaturesByNonceRequest) (*SignerSetTxSignaturesByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignerSetTxSignaturesByNonce not implemented")
}
func (*UnimplementedQueryServer) LastSignerSetTxs(ctx context.Context, req *LastSignerSetTxsRequest) (*LastSignerSetTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastSignerSetTxs not implemented")
}
func (*UnimplementedQueryServer) LastPendingSignerSetTxByAddr(ctx context.Context, req *LastPendingSignerSetTxByAddrRequest) (*LastPendingSignerSetTxByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingSignerSetTxByAddr not implemented")
}
func (*UnimplementedQueryServer) LastPendingBatchTxByAddr(ctx context.Context, req *LastPendingBatchTxByAddrRequest) (*LastPendingBatchTxByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingBatchTxByAddr not implemented")
}
func (*UnimplementedQueryServer) LastPendingContractCallTxByAddr(ctx context.Context, req *LastPendingContractCallTxByAddrRequest) (*LastPendingContractCallTxByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingContractCallTxByAddr not implemented")
}
func (*UnimplementedQueryServer) LastEventNonceByAddr(ctx context.Context, req *LastEventNonceByAddrRequest) (*LastEventNonceByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastEventNonceByAddr not implemented")
}
func (*UnimplementedQueryServer) BatchFees(ctx context.Context, req *BatchFeeRequest) (*BatchFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchFees not implemented")
}
func (*UnimplementedQueryServer) BatchTxs(ctx context.Context, req *BatchTxsRequest) (*BatchTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTxs not implemented")
}
func (*UnimplementedQueryServer) ContractCallTxs(ctx context.Context, req *ContractCallTxsRequest) (*ContractCallTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCallTxs not implemented")
}
func (*UnimplementedQueryServer) BatchTxByNonce(ctx context.Context, req *BatchTxByNonceRequest) (*BatchTxByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTxByNonce not implemented")
}
func (*UnimplementedQueryServer) BatchTxSignatures(ctx context.Context, req *BatchTxSignaturesRequest) (*BatchTxSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTxSignatures not implemented")
}
func (*UnimplementedQueryServer) ContractCallTxSignatures(ctx context.Context, req *ContractCallTxSignaturesRequest) (*ContractCallTxSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCallTxSignatures not implemented")
}
func (*UnimplementedQueryServer) ERC20ToDenom(ctx context.Context, req *ERC20ToDenomRequest) (*ERC20ToDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20ToDenom not implemented")
}
func (*UnimplementedQueryServer) DenomToERC20(ctx context.Context, req *DenomToERC20Request) (*DenomToERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomToERC20 not implemented")
}
func (*UnimplementedQueryServer) GetDelegateKeyByValidator(ctx context.Context, req *DelegateKeysByValidatorAddress) (*DelegateKeysByValidatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateKeyByValidator not implemented")
}
func (*UnimplementedQueryServer) GetDelegateKeyByEth(ctx context.Context, req *DelegateKeysByEthAddress) (*DelegateKeysByEthAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateKeyByEth not implemented")
}
func (*UnimplementedQueryServer) GetDelegateKeyByOrchestrator(ctx context.Context, req *DelegateKeysByOrchestratorAddress) (*DelegateKeysByOrchestratorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateKeyByOrchestrator not implemented")
}
func (*UnimplementedQueryServer) GetPendingSendToEthereum(ctx context.Context, req *PendingSendToEthereumRequest) (*PendingSendToEthereumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingSendToEthereum not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*ParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentSignerSetTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentSignerSetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentSignerSetTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/CurrentSignerSetTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentSignerSetTx(ctx, req.(*CurrentSignerSetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignerSetTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignerSetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignerSetTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/SignerSetTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignerSetTx(ctx, req.(*SignerSetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignerSetTxSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignerSetTxSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignerSetTxSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/SignerSetTxSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignerSetTxSignature(ctx, req.(*SignerSetTxSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignerSetTxSignaturesByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignerSetTxSignaturesByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignerSetTxSignaturesByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/SignerSetTxSignaturesByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignerSetTxSignaturesByNonce(ctx, req.(*SignerSetTxSignaturesByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastSignerSetTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastSignerSetTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastSignerSetTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/LastSignerSetTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastSignerSetTxs(ctx, req.(*LastSignerSetTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingSignerSetTxByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastPendingSignerSetTxByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingSignerSetTxByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/LastPendingSignerSetTxByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingSignerSetTxByAddr(ctx, req.(*LastPendingSignerSetTxByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingBatchTxByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastPendingBatchTxByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingBatchTxByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/LastPendingBatchTxByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingBatchTxByAddr(ctx, req.(*LastPendingBatchTxByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingContractCallTxByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastPendingContractCallTxByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingContractCallTxByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/LastPendingContractCallTxByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingContractCallTxByAddr(ctx, req.(*LastPendingContractCallTxByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastEventNonceByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastEventNonceByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastEventNonceByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/LastEventNonceByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastEventNonceByAddr(ctx, req.(*LastEventNonceByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/BatchFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchFees(ctx, req.(*BatchFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/BatchTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchTxs(ctx, req.(*BatchTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractCallTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCallTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractCallTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/ContractCallTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractCallTxs(ctx, req.(*ContractCallTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchTxByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTxByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchTxByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/BatchTxByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchTxByNonce(ctx, req.(*BatchTxByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchTxSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTxSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchTxSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/BatchTxSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchTxSignatures(ctx, req.(*BatchTxSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractCallTxSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCallTxSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractCallTxSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/ContractCallTxSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractCallTxSignatures(ctx, req.(*ContractCallTxSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ERC20ToDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ERC20ToDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ERC20ToDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/ERC20ToDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ERC20ToDenom(ctx, req.(*ERC20ToDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomToERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenomToERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomToERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/DenomToERC20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomToERC20(ctx, req.(*DenomToERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateKeyByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegateKeysByValidatorAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateKeyByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/GetDelegateKeyByValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateKeyByValidator(ctx, req.(*DelegateKeysByValidatorAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateKeyByEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegateKeysByEthAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateKeyByEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/GetDelegateKeyByEth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateKeyByEth(ctx, req.(*DelegateKeysByEthAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateKeyByOrchestrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegateKeysByOrchestratorAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateKeyByOrchestrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/GetDelegateKeyByOrchestrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateKeyByOrchestrator(ctx, req.(*DelegateKeysByOrchestratorAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingSendToEthereum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingSendToEthereumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingSendToEthereum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Query/GetPendingSendToEthereum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingSendToEthereum(ctx, req.(*PendingSendToEthereumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CurrentSignerSetTx",
			Handler:    _Query_CurrentSignerSetTx_Handler,
		},
		{
			MethodName: "SignerSetTx",
			Handler:    _Query_SignerSetTx_Handler,
		},
		{
			MethodName: "SignerSetTxSignature",
			Handler:    _Query_SignerSetTxSignature_Handler,
		},
		{
			MethodName: "SignerSetTxSignaturesByNonce",
			Handler:    _Query_SignerSetTxSignaturesByNonce_Handler,
		},
		{
			MethodName: "LastSignerSetTxs",
			Handler:    _Query_LastSignerSetTxs_Handler,
		},
		{
			MethodName: "LastPendingSignerSetTxByAddr",
			Handler:    _Query_LastPendingSignerSetTxByAddr_Handler,
		},
		{
			MethodName: "LastPendingBatchTxByAddr",
			Handler:    _Query_LastPendingBatchTxByAddr_Handler,
		},
		{
			MethodName: "LastPendingContractCallTxByAddr",
			Handler:    _Query_LastPendingContractCallTxByAddr_Handler,
		},
		{
			MethodName: "LastEventNonceByAddr",
			Handler:    _Query_LastEventNonceByAddr_Handler,
		},
		{
			MethodName: "BatchFees",
			Handler:    _Query_BatchFees_Handler,
		},
		{
			MethodName: "BatchTxs",
			Handler:    _Query_BatchTxs_Handler,
		},
		{
			MethodName: "ContractCallTxs",
			Handler:    _Query_ContractCallTxs_Handler,
		},
		{
			MethodName: "BatchTxByNonce",
			Handler:    _Query_BatchTxByNonce_Handler,
		},
		{
			MethodName: "BatchTxSignatures",
			Handler:    _Query_BatchTxSignatures_Handler,
		},
		{
			MethodName: "ContractCallTxSignatures",
			Handler:    _Query_ContractCallTxSignatures_Handler,
		},
		{
			MethodName: "ERC20ToDenom",
			Handler:    _Query_ERC20ToDenom_Handler,
		},
		{
			MethodName: "DenomToERC20",
			Handler:    _Query_DenomToERC20_Handler,
		},
		{
			MethodName: "GetDelegateKeyByValidator",
			Handler:    _Query_GetDelegateKeyByValidator_Handler,
		},
		{
			MethodName: "GetDelegateKeyByEth",
			Handler:    _Query_GetDelegateKeyByEth_Handler,
		},
		{
			MethodName: "GetDelegateKeyByOrchestrator",
			Handler:    _Query_GetDelegateKeyByOrchestrator_Handler,
		},
		{
			MethodName: "GetPendingSendToEthereum",
			Handler:    _Query_GetPendingSendToEthereum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravity/v1/query.proto",
}

func (m *ParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CurrentSignerSetTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentSignerSetTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentSignerSetTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CurrentSignerSetTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentSignerSetTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentSignerSetTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignerSetTx != nil {
		{
			size, err := m.SignerSetTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignerSetTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerSetTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerSetTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignerSetTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerSetTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerSetTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignerSetTx != nil {
		{
			size, err := m.SignerSetTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignerSetTxSignatureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerSetTxSignatureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerSetTxSignatureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignerSetTxSignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerSetTxSignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerSetTxSignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignatureMsg != nil {
		{
			size, err := m.SignatureMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignerSetTxSignaturesByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerSetTxSignaturesByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerSetTxSignaturesByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignerSetTxSignaturesByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerSetTxSignaturesByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerSetTxSignaturesByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignatureMsgs) > 0 {
		for iNdEx := len(m.SignatureMsgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureMsgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LastSignerSetTxsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastSignerSetTxsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastSignerSetTxsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LastSignerSetTxsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastSignerSetTxsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastSignerSetTxsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignerSetTxs) > 0 {
		for iNdEx := len(m.SignerSetTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignerSetTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LastPendingSignerSetTxByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastPendingSignerSetTxByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastPendingSignerSetTxByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LastPendingSignerSetTxByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastPendingSignerSetTxByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastPendingSignerSetTxByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignerSetTxs) > 0 {
		for iNdEx := len(m.SignerSetTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignerSetTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BatchFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BatchFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchFees) > 0 {
		for iNdEx := len(m.BatchFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LastPendingBatchTxByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastPendingBatchTxByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastPendingBatchTxByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LastPendingBatchTxByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastPendingBatchTxByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastPendingBatchTxByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Batch != nil {
		{
			size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LastPendingContractCallTxByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastPendingContractCallTxByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastPendingContractCallTxByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LastPendingContractCallTxByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastPendingContractCallTxByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastPendingContractCallTxByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Call != nil {
		{
			size, err := m.Call.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchTxsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTxsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTxsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BatchTxsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTxsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTxsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for iNdEx := len(m.Batches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContractCallTxsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCallTxsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCallTxsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContractCallTxsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCallTxsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCallTxsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Calls) > 0 {
		for iNdEx := len(m.Calls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Calls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BatchTxByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTxByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTxByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchTxByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTxByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTxByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Batch != nil {
		{
			size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchTxSignaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTxSignaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTxSignaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchTxSignaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTxSignaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTxSignaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignatureMsgs) > 0 {
		for iNdEx := len(m.SignatureMsgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureMsgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContractCallTxSignaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCallTxSignaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCallTxSignaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvalidationNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InvalidationId) > 0 {
		i -= len(m.InvalidationId)
		copy(dAtA[i:], m.InvalidationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InvalidationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractCallTxSignaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCallTxSignaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCallTxSignaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignatureMsgs) > 0 {
		for iNdEx := len(m.SignatureMsgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureMsgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LastEventNonceByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastEventNonceByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastEventNonceByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LastEventNonceByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastEventNonceByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastEventNonceByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ERC20ToDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20ToDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20ToDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Erc20) > 0 {
		i -= len(m.Erc20)
		copy(dAtA[i:], m.Erc20)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Erc20)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ERC20ToDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20ToDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20ToDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CosmosOriginated {
		i--
		if m.CosmosOriginated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomToERC20Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomToERC20Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomToERC20Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomToERC20Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomToERC20Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomToERC20Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CosmosOriginated {
		i--
		if m.CosmosOriginated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Erc20) > 0 {
		i -= len(m.Erc20)
		copy(dAtA[i:], m.Erc20)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Erc20)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegateKeysByValidatorAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateKeysByValidatorAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateKeysByValidatorAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegateKeysByValidatorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateKeysByValidatorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateKeysByValidatorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegateKeysByEthAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateKeysByEthAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateKeysByEthAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegateKeysByEthAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateKeysByEthAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateKeysByEthAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegateKeysByOrchestratorAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateKeysByOrchestratorAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateKeysByOrchestratorAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegateKeysByOrchestratorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateKeysByOrchestratorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateKeysByOrchestratorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingSendToEthereumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingSendToEthereumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingSendToEthereumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingSendToEthereumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingSendToEthereumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingSendToEthereumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbatchedTransfers) > 0 {
		for iNdEx := len(m.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbatchedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TransfersInBatches) > 0 {
		for iNdEx := len(m.TransfersInBatches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransfersInBatches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *CurrentSignerSetTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CurrentSignerSetTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignerSetTx != nil {
		l = m.SignerSetTx.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SignerSetTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *SignerSetTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignerSetTx != nil {
		l = m.SignerSetTx.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SignerSetTxSignatureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SignerSetTxSignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignatureMsg != nil {
		l = m.SignatureMsg.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SignerSetTxSignaturesByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *SignerSetTxSignaturesByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignatureMsgs) > 0 {
		for _, e := range m.SignatureMsgs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *LastSignerSetTxsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LastSignerSetTxsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignerSetTxs) > 0 {
		for _, e := range m.SignerSetTxs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *LastPendingSignerSetTxByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *LastPendingSignerSetTxByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignerSetTxs) > 0 {
		for _, e := range m.SignerSetTxs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *BatchFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BatchFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BatchFees) > 0 {
		for _, e := range m.BatchFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *LastPendingBatchTxByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *LastPendingBatchTxByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *LastPendingContractCallTxByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *LastPendingContractCallTxByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Call != nil {
		l = m.Call.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BatchTxsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BatchTxsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for _, e := range m.Batches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ContractCallTxsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContractCallTxsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Calls) > 0 {
		for _, e := range m.Calls {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *BatchTxByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BatchTxByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BatchTxSignaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BatchTxSignaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignatureMsgs) > 0 {
		for _, e := range m.SignatureMsgs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ContractCallTxSignaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvalidationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.InvalidationNonce != 0 {
		n += 1 + sovQuery(uint64(m.InvalidationNonce))
	}
	return n
}

func (m *ContractCallTxSignaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignatureMsgs) > 0 {
		for _, e := range m.SignatureMsgs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *LastEventNonceByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *LastEventNonceByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovQuery(uint64(m.EventNonce))
	}
	return n
}

func (m *ERC20ToDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Erc20)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ERC20ToDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CosmosOriginated {
		n += 2
	}
	return n
}

func (m *DenomToERC20Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DenomToERC20Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Erc20)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CosmosOriginated {
		n += 2
	}
	return n
}

func (m *DelegateKeysByValidatorAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DelegateKeysByValidatorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DelegateKeysByEthAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DelegateKeysByEthAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DelegateKeysByOrchestratorAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DelegateKeysByOrchestratorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PendingSendToEthereumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PendingSendToEthereumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransfersInBatches) > 0 {
		for _, e := range m.TransfersInBatches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.UnbatchedTransfers) > 0 {
		for _, e := range m.UnbatchedTransfers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentSignerSetTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentSignerSetTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentSignerSetTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentSignerSetTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentSignerSetTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentSignerSetTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignerSetTx == nil {
				m.SignerSetTx = &SignerSetTx{}
			}
			if err := m.SignerSetTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignerSetTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerSetTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerSetTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignerSetTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerSetTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerSetTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignerSetTx == nil {
				m.SignerSetTx = &SignerSetTx{}
			}
			if err := m.SignerSetTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignerSetTxSignatureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerSetTxSignatureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerSetTxSignatureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignerSetTxSignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerSetTxSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerSetTxSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignatureMsg == nil {
				m.SignatureMsg = &MsgSignerSetTxSignature{}
			}
			if err := m.SignatureMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignerSetTxSignaturesByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerSetTxSignaturesByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerSetTxSignaturesByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignerSetTxSignaturesByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerSetTxSignaturesByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerSetTxSignaturesByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureMsgs = append(m.SignatureMsgs, &MsgSignerSetTxSignature{})
			if err := m.SignatureMsgs[len(m.SignatureMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastSignerSetTxsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastSignerSetTxsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastSignerSetTxsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastSignerSetTxsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastSignerSetTxsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastSignerSetTxsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerSetTxs = append(m.SignerSetTxs, &SignerSetTx{})
			if err := m.SignerSetTxs[len(m.SignerSetTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastPendingSignerSetTxByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastPendingSignerSetTxByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastPendingSignerSetTxByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastPendingSignerSetTxByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastPendingSignerSetTxByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastPendingSignerSetTxByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerSetTxs = append(m.SignerSetTxs, &SignerSetTx{})
			if err := m.SignerSetTxs[len(m.SignerSetTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchFees = append(m.BatchFees, &BatchFees{})
			if err := m.BatchFees[len(m.BatchFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastPendingBatchTxByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastPendingBatchTxByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastPendingBatchTxByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastPendingBatchTxByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastPendingBatchTxByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastPendingBatchTxByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &BatchTx{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastPendingContractCallTxByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastPendingContractCallTxByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastPendingContractCallTxByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastPendingContractCallTxByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastPendingContractCallTxByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastPendingContractCallTxByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Call == nil {
				m.Call = &ContractCallTx{}
			}
			if err := m.Call.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTxsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTxsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTxsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTxsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTxsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTxsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batches = append(m.Batches, &BatchTx{})
			if err := m.Batches[len(m.Batches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCallTxsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCallTxsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCallTxsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCallTxsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCallTxsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCallTxsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Calls = append(m.Calls, &ContractCallTx{})
			if err := m.Calls[len(m.Calls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTxByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTxByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTxByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTxByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTxByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTxByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &BatchTx{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTxSignaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTxSignaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTxSignaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTxSignaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTxSignaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTxSignaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureMsgs = append(m.SignatureMsgs, &MsgBatchTxSignature{})
			if err := m.SignatureMsgs[len(m.SignatureMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCallTxSignaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCallTxSignaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCallTxSignaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidationId = append(m.InvalidationId[:0], dAtA[iNdEx:postIndex]...)
			if m.InvalidationId == nil {
				m.InvalidationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCallTxSignaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCallTxSignaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCallTxSignaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureMsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureMsgs = append(m.SignatureMsgs, &MsgContractCallTxSignature{})
			if err := m.SignatureMsgs[len(m.SignatureMsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastEventNonceByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastEventNonceByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastEventNonceByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastEventNonceByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastEventNonceByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastEventNonceByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC20ToDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20ToDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20ToDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC20ToDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20ToDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20ToDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosOriginated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CosmosOriginated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomToERC20Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomToERC20Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomToERC20Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomToERC20Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomToERC20Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomToERC20Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosOriginated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CosmosOriginated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateKeysByValidatorAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateKeysByValidatorAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateKeysByValidatorAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateKeysByValidatorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateKeysByValidatorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateKeysByValidatorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateKeysByEthAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateKeysByEthAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateKeysByEthAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateKeysByEthAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateKeysByEthAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateKeysByEthAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateKeysByOrchestratorAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateKeysByOrchestratorAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateKeysByOrchestratorAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateKeysByOrchestratorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateKeysByOrchestratorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateKeysByOrchestratorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingSendToEthereumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingSendToEthereumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingSendToEthereumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingSendToEthereumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingSendToEthereumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingSendToEthereumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransfersInBatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransfersInBatches = append(m.TransfersInBatches, &SendToEthereum{})
			if err := m.TransfersInBatches[len(m.TransfersInBatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbatchedTransfers = append(m.UnbatchedTransfers, &SendToEthereum{})
			if err := m.UnbatchedTransfers[len(m.UnbatchedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
