// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgDelegateKeys
// this message allows validators to delegate their voting responsibilities
// to a given key. This key is then used as an optional authentication method
// for sigining oracle claims
// VALIDATOR
// The validator field is a cosmosvaloper1... string (i.e. sdk.ValAddress)
// that references a validator in the active set
// ORCHESTRATOR
// The orchestrator field is a cosmos1... string  (i.e. sdk.AccAddress) that
// references the key that is being delegated to
// ETH_ADDRESS
// This is a hex encoded 0x Ethereum public key that will be used by this validator
// on Ethereum
type MsgDelegateKeys struct {
	Validator    string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Orchestrator string `protobuf:"bytes,2,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	EthAddress   string `protobuf:"bytes,3,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
}

func (m *MsgDelegateKeys) Reset()         { *m = MsgDelegateKeys{} }
func (m *MsgDelegateKeys) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateKeys) ProtoMessage()    {}
func (*MsgDelegateKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{0}
}
func (m *MsgDelegateKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateKeys.Merge(m, src)
}
func (m *MsgDelegateKeys) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateKeys.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateKeys proto.InternalMessageInfo

func (m *MsgDelegateKeys) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgDelegateKeys) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgDelegateKeys) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

type MsgDelegateKeysResponse struct {
}

func (m *MsgDelegateKeysResponse) Reset()         { *m = MsgDelegateKeysResponse{} }
func (m *MsgDelegateKeysResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateKeysResponse) ProtoMessage()    {}
func (*MsgDelegateKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{1}
}
func (m *MsgDelegateKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateKeysResponse.Merge(m, src)
}
func (m *MsgDelegateKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateKeysResponse proto.InternalMessageInfo

// MsgSignerSetTxSignature
// this is the message sent by the validators when they wish to submit their
// signatures over the validator set at a given block height. A validator must
// first call MsgSetEthAddress to set their Ethereum address to be used for
// signing. Then someone (anyone) must make a ValsetRequest, the request is
// essentially a messaging mechanism to determine which block all validators
// should submit signatures over. Finally validators sign the validator set,
// powers, and Ethereum addresses of the entire validator set at the height of a
// ValsetRequest and submit that signature with this message.
//
// If a sufficient number of validators (66% of voting power) (A) have set
// Ethereum addresses and (B) submit MsgSignerSetTxSignature messages with their
// signatures it is then possible for anyone to view these signatures in the
// chain store and submit them to Ethereum to update the validator set
// -------------
type MsgSignerSetTxSignature struct {
	Nonce        uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Orchestrator string `protobuf:"bytes,2,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	EthAddress   string `protobuf:"bytes,3,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
	Signature    string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgSignerSetTxSignature) Reset()         { *m = MsgSignerSetTxSignature{} }
func (m *MsgSignerSetTxSignature) String() string { return proto.CompactTextString(m) }
func (*MsgSignerSetTxSignature) ProtoMessage()    {}
func (*MsgSignerSetTxSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{2}
}
func (m *MsgSignerSetTxSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignerSetTxSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignerSetTxSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignerSetTxSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignerSetTxSignature.Merge(m, src)
}
func (m *MsgSignerSetTxSignature) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignerSetTxSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignerSetTxSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignerSetTxSignature proto.InternalMessageInfo

func (m *MsgSignerSetTxSignature) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgSignerSetTxSignature) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgSignerSetTxSignature) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *MsgSignerSetTxSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgSignerSetTxSignatureResponse struct {
}

func (m *MsgSignerSetTxSignatureResponse) Reset()         { *m = MsgSignerSetTxSignatureResponse{} }
func (m *MsgSignerSetTxSignatureResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignerSetTxSignatureResponse) ProtoMessage()    {}
func (*MsgSignerSetTxSignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{3}
}
func (m *MsgSignerSetTxSignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignerSetTxSignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignerSetTxSignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignerSetTxSignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignerSetTxSignatureResponse.Merge(m, src)
}
func (m *MsgSignerSetTxSignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignerSetTxSignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignerSetTxSignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignerSetTxSignatureResponse proto.InternalMessageInfo

// MsgSendToEthereum
// This is the message that a user calls when they want to bridge an asset
// it will later be removed when it is included in a batch and successfully
// submitted tokens are removed from the users balance immediately
// -------------
// AMOUNT:
// the coin to send across the bridge, note the restriction that this is a
// single coin not a set of coins that is normal in other Cosmos messages
// FEE:
// the fee paid for the bridge, distinct from the fee paid to the chain to
// actually send this message in the first place. So a successful send has
// two layers of fees for the user
type MsgSendToEthereum struct {
	Sender    string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	EthDest   string     `protobuf:"bytes,2,opt,name=eth_dest,json=ethDest,proto3" json:"eth_dest,omitempty"`
	Amount    types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	BridgeFee types.Coin `protobuf:"bytes,4,opt,name=bridge_fee,json=bridgeFee,proto3" json:"bridge_fee"`
}

func (m *MsgSendToEthereum) Reset()         { *m = MsgSendToEthereum{} }
func (m *MsgSendToEthereum) String() string { return proto.CompactTextString(m) }
func (*MsgSendToEthereum) ProtoMessage()    {}
func (*MsgSendToEthereum) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{4}
}
func (m *MsgSendToEthereum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToEthereum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToEthereum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToEthereum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToEthereum.Merge(m, src)
}
func (m *MsgSendToEthereum) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToEthereum) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToEthereum.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToEthereum proto.InternalMessageInfo

func (m *MsgSendToEthereum) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendToEthereum) GetEthDest() string {
	if m != nil {
		return m.EthDest
	}
	return ""
}

func (m *MsgSendToEthereum) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgSendToEthereum) GetBridgeFee() types.Coin {
	if m != nil {
		return m.BridgeFee
	}
	return types.Coin{}
}

type MsgSendToEthereumResponse struct {
}

func (m *MsgSendToEthereumResponse) Reset()         { *m = MsgSendToEthereumResponse{} }
func (m *MsgSendToEthereumResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToEthereumResponse) ProtoMessage()    {}
func (*MsgSendToEthereumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{5}
}
func (m *MsgSendToEthereumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToEthereumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToEthereumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToEthereumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToEthereumResponse.Merge(m, src)
}
func (m *MsgSendToEthereumResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToEthereumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToEthereumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToEthereumResponse proto.InternalMessageInfo

// MsgRequestBatchTx
// this is a message anyone can send that requests a batch of transactions to
// send across the bridge be created for whatever block height this message is
// included in. This acts as a coordination point, the handler for this message
// looks at the AddToOutgoingPool tx's in the store and generates a batch, also
// available in the store tied to this message. The validators then grab this
// batch, sign it, submit the signatures with a MsgBatchTxSignature before a relayer
// can finally submit the batch
// -------------
type MsgRequestBatchTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgRequestBatchTx) Reset()         { *m = MsgRequestBatchTx{} }
func (m *MsgRequestBatchTx) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatchTx) ProtoMessage()    {}
func (*MsgRequestBatchTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{6}
}
func (m *MsgRequestBatchTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatchTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatchTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatchTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatchTx.Merge(m, src)
}
func (m *MsgRequestBatchTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatchTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatchTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatchTx proto.InternalMessageInfo

func (m *MsgRequestBatchTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRequestBatchTx) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type MsgRequestBatchTxResponse struct {
}

func (m *MsgRequestBatchTxResponse) Reset()         { *m = MsgRequestBatchTxResponse{} }
func (m *MsgRequestBatchTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatchTxResponse) ProtoMessage()    {}
func (*MsgRequestBatchTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{7}
}
func (m *MsgRequestBatchTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatchTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatchTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatchTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatchTxResponse.Merge(m, src)
}
func (m *MsgRequestBatchTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatchTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatchTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatchTxResponse proto.InternalMessageInfo

// MsgBatchTxSignature
// When validators observe a MsgRequestBatchTx they form a batch by ordering
// transactions currently in the txqueue in order of highest to lowest fee,
// cutting off when the batch either reaches a hardcoded maximum size (to be
// decided, probably around 100) or when transactions stop being profitable
// (TODO determine this without nondeterminism) This message includes the batch
// as well as an Ethereum signature over this batch by the validator
// -------------
type MsgBatchTxSignature struct {
	Nonce         uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TokenContract string `protobuf:"bytes,2,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	EthSigner     string `protobuf:"bytes,3,opt,name=eth_signer,json=ethSigner,proto3" json:"eth_signer,omitempty"`
	Orchestrator  string `protobuf:"bytes,4,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	Signature     string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgBatchTxSignature) Reset()         { *m = MsgBatchTxSignature{} }
func (m *MsgBatchTxSignature) String() string { return proto.CompactTextString(m) }
func (*MsgBatchTxSignature) ProtoMessage()    {}
func (*MsgBatchTxSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{8}
}
func (m *MsgBatchTxSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchTxSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchTxSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchTxSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchTxSignature.Merge(m, src)
}
func (m *MsgBatchTxSignature) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchTxSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchTxSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchTxSignature proto.InternalMessageInfo

func (m *MsgBatchTxSignature) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgBatchTxSignature) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgBatchTxSignature) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgBatchTxSignature) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgBatchTxSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgBatchTxSignatureResponse struct {
}

func (m *MsgBatchTxSignatureResponse) Reset()         { *m = MsgBatchTxSignatureResponse{} }
func (m *MsgBatchTxSignatureResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBatchTxSignatureResponse) ProtoMessage()    {}
func (*MsgBatchTxSignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{9}
}
func (m *MsgBatchTxSignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchTxSignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchTxSignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchTxSignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchTxSignatureResponse.Merge(m, src)
}
func (m *MsgBatchTxSignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchTxSignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchTxSignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchTxSignatureResponse proto.InternalMessageInfo

// MsgContractCallTxSignature
// When validators observe a MsgRequestBatchTx they form a batch by ordering
// transactions currently in the txqueue in order of highest to lowest fee,
// cutting off when the batch either reaches a hardcoded maximum size (to be
// decided, probably around 100) or when transactions stop being profitable
// (TODO determine this without nondeterminism) This message includes the batch
// as well as an Ethereum signature over this batch by the validator
// -------------
type MsgContractCallTxSignature struct {
	InvalidationId    string `protobuf:"bytes,1,opt,name=invalidation_id,json=invalidationId,proto3" json:"invalidation_id,omitempty"`
	InvalidationNonce uint64 `protobuf:"varint,2,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
	EthSigner         string `protobuf:"bytes,3,opt,name=eth_signer,json=ethSigner,proto3" json:"eth_signer,omitempty"`
	Orchestrator      string `protobuf:"bytes,4,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	Signature         string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgContractCallTxSignature) Reset()         { *m = MsgContractCallTxSignature{} }
func (m *MsgContractCallTxSignature) String() string { return proto.CompactTextString(m) }
func (*MsgContractCallTxSignature) ProtoMessage()    {}
func (*MsgContractCallTxSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{10}
}
func (m *MsgContractCallTxSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgContractCallTxSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgContractCallTxSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgContractCallTxSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgContractCallTxSignature.Merge(m, src)
}
func (m *MsgContractCallTxSignature) XXX_Size() int {
	return m.Size()
}
func (m *MsgContractCallTxSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgContractCallTxSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgContractCallTxSignature proto.InternalMessageInfo

func (m *MsgContractCallTxSignature) GetInvalidationId() string {
	if m != nil {
		return m.InvalidationId
	}
	return ""
}

func (m *MsgContractCallTxSignature) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

func (m *MsgContractCallTxSignature) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgContractCallTxSignature) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgContractCallTxSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgContractCallTxSignatureResponse struct {
}

func (m *MsgContractCallTxSignatureResponse) Reset()         { *m = MsgContractCallTxSignatureResponse{} }
func (m *MsgContractCallTxSignatureResponse) String() string { return proto.CompactTextString(m) }
func (*MsgContractCallTxSignatureResponse) ProtoMessage()    {}
func (*MsgContractCallTxSignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{11}
}
func (m *MsgContractCallTxSignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgContractCallTxSignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgContractCallTxSignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgContractCallTxSignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgContractCallTxSignatureResponse.Merge(m, src)
}
func (m *MsgContractCallTxSignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgContractCallTxSignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgContractCallTxSignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgContractCallTxSignatureResponse proto.InternalMessageInfo

// EthereumBridgeDepositClaim
// When more than 66% of the active validator set has
// claimed to have seen the deposit enter the ethereum blockchain coins are
// issued to the Cosmos address in question
// -------------
type MsgSendToCosmosEvent struct {
	EventNonce     uint64                                 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	BlockHeight    uint64                                 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TokenContract  string                                 `protobuf:"bytes,3,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Amount         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	EthereumSender string                                 `protobuf:"bytes,5,opt,name=ethereum_sender,json=ethereumSender,proto3" json:"ethereum_sender,omitempty"`
	CosmosReceiver string                                 `protobuf:"bytes,6,opt,name=cosmos_receiver,json=cosmosReceiver,proto3" json:"cosmos_receiver,omitempty"`
	Orchestrator   string                                 `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgSendToCosmosEvent) Reset()         { *m = MsgSendToCosmosEvent{} }
func (m *MsgSendToCosmosEvent) String() string { return proto.CompactTextString(m) }
func (*MsgSendToCosmosEvent) ProtoMessage()    {}
func (*MsgSendToCosmosEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{12}
}
func (m *MsgSendToCosmosEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToCosmosEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToCosmosEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToCosmosEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToCosmosEvent.Merge(m, src)
}
func (m *MsgSendToCosmosEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToCosmosEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToCosmosEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToCosmosEvent proto.InternalMessageInfo

func (m *MsgSendToCosmosEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgSendToCosmosEvent) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgSendToCosmosEvent) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgSendToCosmosEvent) GetEthereumSender() string {
	if m != nil {
		return m.EthereumSender
	}
	return ""
}

func (m *MsgSendToCosmosEvent) GetCosmosReceiver() string {
	if m != nil {
		return m.CosmosReceiver
	}
	return ""
}

func (m *MsgSendToCosmosEvent) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type MsgSendToCosmosEventResponse struct {
}

func (m *MsgSendToCosmosEventResponse) Reset()         { *m = MsgSendToCosmosEventResponse{} }
func (m *MsgSendToCosmosEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToCosmosEventResponse) ProtoMessage()    {}
func (*MsgSendToCosmosEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{13}
}
func (m *MsgSendToCosmosEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToCosmosEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToCosmosEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToCosmosEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToCosmosEventResponse.Merge(m, src)
}
func (m *MsgSendToCosmosEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToCosmosEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToCosmosEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToCosmosEventResponse proto.InternalMessageInfo

// WithdrawClaim claims that a batch of withdrawal
// operations on the bridge contract was executed.
type MsgBatchExecutedEvent struct {
	EventNonce    uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	BlockHeight   uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BatchNonce    uint64 `protobuf:"varint,3,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	TokenContract string `protobuf:"bytes,4,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Orchestrator  string `protobuf:"bytes,5,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgBatchExecutedEvent) Reset()         { *m = MsgBatchExecutedEvent{} }
func (m *MsgBatchExecutedEvent) String() string { return proto.CompactTextString(m) }
func (*MsgBatchExecutedEvent) ProtoMessage()    {}
func (*MsgBatchExecutedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{14}
}
func (m *MsgBatchExecutedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchExecutedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchExecutedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchExecutedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchExecutedEvent.Merge(m, src)
}
func (m *MsgBatchExecutedEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchExecutedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchExecutedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchExecutedEvent proto.InternalMessageInfo

func (m *MsgBatchExecutedEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgBatchExecutedEvent) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgBatchExecutedEvent) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *MsgBatchExecutedEvent) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgBatchExecutedEvent) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type MsgBatchExecutedEventResponse struct {
}

func (m *MsgBatchExecutedEventResponse) Reset()         { *m = MsgBatchExecutedEventResponse{} }
func (m *MsgBatchExecutedEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBatchExecutedEventResponse) ProtoMessage()    {}
func (*MsgBatchExecutedEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{15}
}
func (m *MsgBatchExecutedEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchExecutedEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchExecutedEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchExecutedEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchExecutedEventResponse.Merge(m, src)
}
func (m *MsgBatchExecutedEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchExecutedEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchExecutedEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchExecutedEventResponse proto.InternalMessageInfo

// ERC20DeployedClaim allows the Cosmos module
// to learn about an ERC20 that someone deployed
// to represent a Cosmos asset
type MsgERC20DeployedEvent struct {
	EventNonce    uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	BlockHeight   uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	CosmosDenom   string `protobuf:"bytes,3,opt,name=cosmos_denom,json=cosmosDenom,proto3" json:"cosmos_denom,omitempty"`
	TokenContract string `protobuf:"bytes,4,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Name          string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Symbol        string `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals      uint64 `protobuf:"varint,7,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Orchestrator  string `protobuf:"bytes,8,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgERC20DeployedEvent) Reset()         { *m = MsgERC20DeployedEvent{} }
func (m *MsgERC20DeployedEvent) String() string { return proto.CompactTextString(m) }
func (*MsgERC20DeployedEvent) ProtoMessage()    {}
func (*MsgERC20DeployedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{16}
}
func (m *MsgERC20DeployedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgERC20DeployedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgERC20DeployedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgERC20DeployedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgERC20DeployedEvent.Merge(m, src)
}
func (m *MsgERC20DeployedEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgERC20DeployedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgERC20DeployedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgERC20DeployedEvent proto.InternalMessageInfo

func (m *MsgERC20DeployedEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgERC20DeployedEvent) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgERC20DeployedEvent) GetCosmosDenom() string {
	if m != nil {
		return m.CosmosDenom
	}
	return ""
}

func (m *MsgERC20DeployedEvent) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgERC20DeployedEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgERC20DeployedEvent) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgERC20DeployedEvent) GetDecimals() uint64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *MsgERC20DeployedEvent) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type MsgERC20DeployedEventResponse struct {
}

func (m *MsgERC20DeployedEventResponse) Reset()         { *m = MsgERC20DeployedEventResponse{} }
func (m *MsgERC20DeployedEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgERC20DeployedEventResponse) ProtoMessage()    {}
func (*MsgERC20DeployedEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{17}
}
func (m *MsgERC20DeployedEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgERC20DeployedEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgERC20DeployedEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgERC20DeployedEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgERC20DeployedEventResponse.Merge(m, src)
}
func (m *MsgERC20DeployedEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgERC20DeployedEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgERC20DeployedEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgERC20DeployedEventResponse proto.InternalMessageInfo

// This informs the Cosmos module that a logic
// call has been executed
type MsgContractCallExecutedEvent struct {
	EventNonce        uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	BlockHeight       uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	InvalidationId    []byte `protobuf:"bytes,3,opt,name=invalidation_id,json=invalidationId,proto3" json:"invalidation_id,omitempty"`
	InvalidationNonce uint64 `protobuf:"varint,4,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
	Orchestrator      string `protobuf:"bytes,5,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgContractCallExecutedEvent) Reset()         { *m = MsgContractCallExecutedEvent{} }
func (m *MsgContractCallExecutedEvent) String() string { return proto.CompactTextString(m) }
func (*MsgContractCallExecutedEvent) ProtoMessage()    {}
func (*MsgContractCallExecutedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{18}
}
func (m *MsgContractCallExecutedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgContractCallExecutedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgContractCallExecutedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgContractCallExecutedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgContractCallExecutedEvent.Merge(m, src)
}
func (m *MsgContractCallExecutedEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgContractCallExecutedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgContractCallExecutedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgContractCallExecutedEvent proto.InternalMessageInfo

func (m *MsgContractCallExecutedEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgContractCallExecutedEvent) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgContractCallExecutedEvent) GetInvalidationId() []byte {
	if m != nil {
		return m.InvalidationId
	}
	return nil
}

func (m *MsgContractCallExecutedEvent) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

func (m *MsgContractCallExecutedEvent) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type MsgContractCallExecutedEventResponse struct {
}

func (m *MsgContractCallExecutedEventResponse) Reset()         { *m = MsgContractCallExecutedEventResponse{} }
func (m *MsgContractCallExecutedEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgContractCallExecutedEventResponse) ProtoMessage()    {}
func (*MsgContractCallExecutedEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{19}
}
func (m *MsgContractCallExecutedEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgContractCallExecutedEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgContractCallExecutedEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgContractCallExecutedEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgContractCallExecutedEventResponse.Merge(m, src)
}
func (m *MsgContractCallExecutedEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgContractCallExecutedEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgContractCallExecutedEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgContractCallExecutedEventResponse proto.InternalMessageInfo

// This informs the Cosmos module that a validator
// set has been updated.
type MsgSignerSetUpdatedEvent struct {
	EventNonce     uint64            `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	SignerSetNonce uint64            `protobuf:"varint,2,opt,name=signer_set_nonce,json=signerSetNonce,proto3" json:"signer_set_nonce,omitempty"`
	BlockHeight    uint64            `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Members        []*EthereumSigner `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	// TODO: Why aren't we using ERC20 here?
	RewardAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=reward_amount,json=rewardAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reward_amount"`
	RewardToken  string                                 `protobuf:"bytes,6,opt,name=reward_token,json=rewardToken,proto3" json:"reward_token,omitempty"`
	Orchestrator string                                 `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgSignerSetUpdatedEvent) Reset()         { *m = MsgSignerSetUpdatedEvent{} }
func (m *MsgSignerSetUpdatedEvent) String() string { return proto.CompactTextString(m) }
func (*MsgSignerSetUpdatedEvent) ProtoMessage()    {}
func (*MsgSignerSetUpdatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{20}
}
func (m *MsgSignerSetUpdatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignerSetUpdatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignerSetUpdatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignerSetUpdatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignerSetUpdatedEvent.Merge(m, src)
}
func (m *MsgSignerSetUpdatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignerSetUpdatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignerSetUpdatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignerSetUpdatedEvent proto.InternalMessageInfo

func (m *MsgSignerSetUpdatedEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgSignerSetUpdatedEvent) GetSignerSetNonce() uint64 {
	if m != nil {
		return m.SignerSetNonce
	}
	return 0
}

func (m *MsgSignerSetUpdatedEvent) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgSignerSetUpdatedEvent) GetMembers() []*EthereumSigner {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *MsgSignerSetUpdatedEvent) GetRewardToken() string {
	if m != nil {
		return m.RewardToken
	}
	return ""
}

func (m *MsgSignerSetUpdatedEvent) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type MsgSignerSetUpdatedEventResponse struct {
}

func (m *MsgSignerSetUpdatedEventResponse) Reset()         { *m = MsgSignerSetUpdatedEventResponse{} }
func (m *MsgSignerSetUpdatedEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignerSetUpdatedEventResponse) ProtoMessage()    {}
func (*MsgSignerSetUpdatedEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{21}
}
func (m *MsgSignerSetUpdatedEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignerSetUpdatedEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignerSetUpdatedEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignerSetUpdatedEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignerSetUpdatedEventResponse.Merge(m, src)
}
func (m *MsgSignerSetUpdatedEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignerSetUpdatedEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignerSetUpdatedEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignerSetUpdatedEventResponse proto.InternalMessageInfo

// This call allows the sender (and only the sender)
// to cancel a given MsgSendToEthereum and recieve a refund
// of the tokens
type MsgCancelSendToEthereum struct {
	TransactionId uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Sender        string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCancelSendToEthereum) Reset()         { *m = MsgCancelSendToEthereum{} }
func (m *MsgCancelSendToEthereum) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToEthereum) ProtoMessage()    {}
func (*MsgCancelSendToEthereum) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{22}
}
func (m *MsgCancelSendToEthereum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToEthereum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToEthereum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToEthereum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToEthereum.Merge(m, src)
}
func (m *MsgCancelSendToEthereum) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToEthereum) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToEthereum.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToEthereum proto.InternalMessageInfo

func (m *MsgCancelSendToEthereum) GetTransactionId() uint64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *MsgCancelSendToEthereum) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgCancelSendToEthereumResponse struct {
}

func (m *MsgCancelSendToEthereumResponse) Reset()         { *m = MsgCancelSendToEthereumResponse{} }
func (m *MsgCancelSendToEthereumResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToEthereumResponse) ProtoMessage()    {}
func (*MsgCancelSendToEthereumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{23}
}
func (m *MsgCancelSendToEthereumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToEthereumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToEthereumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToEthereumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToEthereumResponse.Merge(m, src)
}
func (m *MsgCancelSendToEthereumResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToEthereumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToEthereumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToEthereumResponse proto.InternalMessageInfo

// This call allows anyone to submit evidence that a
// validator has signed a valset, batch, or logic call that never
// existed. Subject contains the batch, valset, or logic call.
type MsgSubmitBadEthereumSignatureEvidence struct {
	Subject   *types1.Any `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Signature string      `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgSubmitBadEthereumSignatureEvidence) Reset()         { *m = MsgSubmitBadEthereumSignatureEvidence{} }
func (m *MsgSubmitBadEthereumSignatureEvidence) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBadEthereumSignatureEvidence) ProtoMessage()    {}
func (*MsgSubmitBadEthereumSignatureEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{24}
}
func (m *MsgSubmitBadEthereumSignatureEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBadEthereumSignatureEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBadEthereumSignatureEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBadEthereumSignatureEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBadEthereumSignatureEvidence.Merge(m, src)
}
func (m *MsgSubmitBadEthereumSignatureEvidence) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBadEthereumSignatureEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBadEthereumSignatureEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBadEthereumSignatureEvidence proto.InternalMessageInfo

func (m *MsgSubmitBadEthereumSignatureEvidence) GetSubject() *types1.Any {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *MsgSubmitBadEthereumSignatureEvidence) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgSubmitBadEthereumSignatureEvidenceResponse struct {
}

func (m *MsgSubmitBadEthereumSignatureEvidenceResponse) Reset() {
	*m = MsgSubmitBadEthereumSignatureEvidenceResponse{}
}
func (m *MsgSubmitBadEthereumSignatureEvidenceResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgSubmitBadEthereumSignatureEvidenceResponse) ProtoMessage() {}
func (*MsgSubmitBadEthereumSignatureEvidenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f8523f2f6feb451, []int{25}
}
func (m *MsgSubmitBadEthereumSignatureEvidenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBadEthereumSignatureEvidenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBadEthereumSignatureEvidenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBadEthereumSignatureEvidenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBadEthereumSignatureEvidenceResponse.Merge(m, src)
}
func (m *MsgSubmitBadEthereumSignatureEvidenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBadEthereumSignatureEvidenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBadEthereumSignatureEvidenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBadEthereumSignatureEvidenceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDelegateKeys)(nil), "gravity.v1.MsgDelegateKeys")
	proto.RegisterType((*MsgDelegateKeysResponse)(nil), "gravity.v1.MsgDelegateKeysResponse")
	proto.RegisterType((*MsgSignerSetTxSignature)(nil), "gravity.v1.MsgSignerSetTxSignature")
	proto.RegisterType((*MsgSignerSetTxSignatureResponse)(nil), "gravity.v1.MsgSignerSetTxSignatureResponse")
	proto.RegisterType((*MsgSendToEthereum)(nil), "gravity.v1.MsgSendToEthereum")
	proto.RegisterType((*MsgSendToEthereumResponse)(nil), "gravity.v1.MsgSendToEthereumResponse")
	proto.RegisterType((*MsgRequestBatchTx)(nil), "gravity.v1.MsgRequestBatchTx")
	proto.RegisterType((*MsgRequestBatchTxResponse)(nil), "gravity.v1.MsgRequestBatchTxResponse")
	proto.RegisterType((*MsgBatchTxSignature)(nil), "gravity.v1.MsgBatchTxSignature")
	proto.RegisterType((*MsgBatchTxSignatureResponse)(nil), "gravity.v1.MsgBatchTxSignatureResponse")
	proto.RegisterType((*MsgContractCallTxSignature)(nil), "gravity.v1.MsgContractCallTxSignature")
	proto.RegisterType((*MsgContractCallTxSignatureResponse)(nil), "gravity.v1.MsgContractCallTxSignatureResponse")
	proto.RegisterType((*MsgSendToCosmosEvent)(nil), "gravity.v1.MsgSendToCosmosEvent")
	proto.RegisterType((*MsgSendToCosmosEventResponse)(nil), "gravity.v1.MsgSendToCosmosEventResponse")
	proto.RegisterType((*MsgBatchExecutedEvent)(nil), "gravity.v1.MsgBatchExecutedEvent")
	proto.RegisterType((*MsgBatchExecutedEventResponse)(nil), "gravity.v1.MsgBatchExecutedEventResponse")
	proto.RegisterType((*MsgERC20DeployedEvent)(nil), "gravity.v1.MsgERC20DeployedEvent")
	proto.RegisterType((*MsgERC20DeployedEventResponse)(nil), "gravity.v1.MsgERC20DeployedEventResponse")
	proto.RegisterType((*MsgContractCallExecutedEvent)(nil), "gravity.v1.MsgContractCallExecutedEvent")
	proto.RegisterType((*MsgContractCallExecutedEventResponse)(nil), "gravity.v1.MsgContractCallExecutedEventResponse")
	proto.RegisterType((*MsgSignerSetUpdatedEvent)(nil), "gravity.v1.MsgSignerSetUpdatedEvent")
	proto.RegisterType((*MsgSignerSetUpdatedEventResponse)(nil), "gravity.v1.MsgSignerSetUpdatedEventResponse")
	proto.RegisterType((*MsgCancelSendToEthereum)(nil), "gravity.v1.MsgCancelSendToEthereum")
	proto.RegisterType((*MsgCancelSendToEthereumResponse)(nil), "gravity.v1.MsgCancelSendToEthereumResponse")
	proto.RegisterType((*MsgSubmitBadEthereumSignatureEvidence)(nil), "gravity.v1.MsgSubmitBadEthereumSignatureEvidence")
	proto.RegisterType((*MsgSubmitBadEthereumSignatureEvidenceResponse)(nil), "gravity.v1.MsgSubmitBadEthereumSignatureEvidenceResponse")
}

func init() { proto.RegisterFile("gravity/v1/msgs.proto", fileDescriptor_2f8523f2f6feb451) }

var fileDescriptor_2f8523f2f6feb451 = []byte{
	// 1536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x6e, 0xdb, 0xc6,
	0x16, 0x36, 0x65, 0xd9, 0x8e, 0x8f, 0x1c, 0x3b, 0xe1, 0x75, 0x6e, 0x24, 0xda, 0x96, 0x6c, 0xc6,
	0x7f, 0x41, 0x62, 0x32, 0xf6, 0xbd, 0x40, 0x70, 0x37, 0x17, 0xf0, 0x5f, 0xd0, 0xa0, 0x70, 0x80,
	0xca, 0x2e, 0x50, 0x74, 0x43, 0x50, 0xe4, 0x84, 0x62, 0x43, 0x72, 0x5c, 0xce, 0x48, 0xb6, 0x36,
	0x2d, 0x90, 0x45, 0x57, 0x59, 0xa4, 0x0d, 0xfa, 0x0a, 0x7d, 0x81, 0x3e, 0x40, 0x57, 0x45, 0xb3,
	0x0c, 0x50, 0x14, 0x08, 0xb2, 0x08, 0x8a, 0xa4, 0x0f, 0x52, 0x70, 0x66, 0xc8, 0x50, 0x24, 0x25,
	0xab, 0x85, 0xbb, 0x32, 0xe7, 0xcc, 0x99, 0x39, 0xdf, 0xf9, 0xce, 0xcf, 0x1c, 0x0b, 0x6e, 0x38,
	0xa1, 0xd9, 0x75, 0x69, 0x4f, 0xef, 0x6e, 0xeb, 0x3e, 0x71, 0x88, 0x76, 0x1a, 0x62, 0x8a, 0x65,
	0x10, 0x62, 0xad, 0xbb, 0xad, 0xd4, 0x2d, 0x4c, 0x7c, 0x4c, 0xf4, 0x96, 0x49, 0x90, 0xde, 0xdd,
	0x6e, 0x21, 0x6a, 0x6e, 0xeb, 0x16, 0x76, 0x03, 0xae, 0xab, 0xcc, 0x3b, 0xd8, 0xc1, 0xec, 0x53,
	0x8f, 0xbe, 0x84, 0x74, 0xd1, 0xc1, 0xd8, 0xf1, 0x90, 0x6e, 0x9e, 0xba, 0xba, 0x19, 0x04, 0x98,
	0x9a, 0xd4, 0xc5, 0x81, 0xb8, 0x5f, 0xa9, 0xa6, 0xcc, 0xc6, 0xa6, 0xf8, 0x4e, 0x4d, 0x9c, 0x63,
	0xab, 0x56, 0xe7, 0xb1, 0x6e, 0x06, 0x62, 0x4b, 0xa5, 0x30, 0x77, 0x44, 0x9c, 0x03, 0xe4, 0x21,
	0xc7, 0xa4, 0xe8, 0x63, 0xd4, 0x23, 0xf2, 0x22, 0x4c, 0x77, 0x4d, 0xcf, 0xb5, 0x4d, 0x8a, 0xc3,
	0xaa, 0xb4, 0x2c, 0x6d, 0x4e, 0x37, 0x3f, 0x08, 0x64, 0x15, 0x66, 0x70, 0x68, 0xb5, 0x11, 0xa1,
	0x21, 0x53, 0x28, 0x31, 0x85, 0x3e, 0x99, 0xdc, 0x80, 0x0a, 0xa2, 0x6d, 0xc3, 0xb4, 0xed, 0x10,
	0x11, 0x52, 0x1d, 0x67, 0x2a, 0x80, 0x68, 0x7b, 0x97, 0x4b, 0xd4, 0x1a, 0xdc, 0xcc, 0x58, 0x6d,
	0x22, 0x72, 0x8a, 0x03, 0x82, 0xd4, 0xef, 0x24, 0xb6, 0x77, 0xec, 0x3a, 0x01, 0x0a, 0x8f, 0x11,
	0x3d, 0x39, 0x8f, 0x3e, 0x4d, 0xda, 0x09, 0x91, 0x3c, 0x0f, 0x13, 0x01, 0x0e, 0x2c, 0xc4, 0x50,
	0x95, 0x9b, 0x7c, 0x71, 0x29, 0x88, 0x22, 0xa7, 0x49, 0x6c, 0xa7, 0x5a, 0xe6, 0x4e, 0x27, 0x02,
	0x75, 0x05, 0x1a, 0x03, 0x30, 0x25, 0xb8, 0x7f, 0x92, 0xe0, 0x7a, 0xa4, 0x83, 0x02, 0xfb, 0x04,
	0x1f, 0xd2, 0x36, 0x0a, 0x51, 0xc7, 0x97, 0xff, 0x0d, 0x93, 0x04, 0x05, 0x36, 0x8a, 0x89, 0x14,
	0x2b, 0xb9, 0x06, 0x57, 0x22, 0x3c, 0x36, 0x22, 0x54, 0xe0, 0x9d, 0x42, 0xb4, 0x7d, 0x80, 0x08,
	0x95, 0xef, 0xc3, 0xa4, 0xe9, 0xe3, 0x4e, 0x40, 0x19, 0xca, 0xca, 0x4e, 0x4d, 0xe3, 0xb9, 0xa2,
	0x45, 0xb9, 0xa2, 0x89, 0x5c, 0xd1, 0xf6, 0xb1, 0x1b, 0xec, 0x95, 0x5f, 0xbe, 0x6d, 0x8c, 0x35,
	0x85, 0xba, 0xfc, 0x7f, 0x80, 0x56, 0xe8, 0xda, 0x0e, 0x32, 0x1e, 0x23, 0xee, 0xc3, 0x08, 0x87,
	0xa7, 0xf9, 0x91, 0x07, 0x08, 0xa9, 0x0b, 0x50, 0xcb, 0x39, 0x90, 0xb8, 0xb7, 0xcb, 0xbc, 0x6b,
	0xa2, 0x2f, 0x3b, 0x88, 0xd0, 0x3d, 0x93, 0x5a, 0xed, 0x93, 0xf3, 0x81, 0xde, 0xcd, 0xc3, 0x84,
	0x8d, 0x02, 0xec, 0x0b, 0xd7, 0xf8, 0x42, 0xdc, 0xdf, 0x7f, 0x45, 0x72, 0xff, 0x8f, 0x12, 0xfc,
	0xeb, 0x88, 0x38, 0x42, 0x7c, 0x51, 0xc8, 0xd7, 0x60, 0x96, 0xe2, 0x27, 0x28, 0x30, 0x2c, 0x1c,
	0xd0, 0xd0, 0xb4, 0x62, 0x12, 0xaf, 0x32, 0xe9, 0xbe, 0x10, 0xca, 0x4b, 0x10, 0x85, 0xd8, 0x20,
	0x2c, 0x6e, 0x22, 0xe8, 0xd3, 0x88, 0xb6, 0x79, 0x20, 0x73, 0x89, 0x53, 0x2e, 0x48, 0x9c, 0xbe,
	0xbc, 0x98, 0xc8, 0xe6, 0xc5, 0x12, 0x2c, 0x14, 0x80, 0x4e, 0x9c, 0xfa, 0x4d, 0x02, 0xe5, 0x88,
	0x38, 0x31, 0x9e, 0x7d, 0xd3, 0xf3, 0xd2, 0xbe, 0x6d, 0xc0, 0x9c, 0x1b, 0x88, 0xca, 0x72, 0x71,
	0x60, 0xb8, 0xb6, 0xe0, 0x71, 0x36, 0x2d, 0x7e, 0x68, 0xcb, 0x5b, 0x20, 0xf7, 0x29, 0x72, 0x46,
	0x4a, 0x8c, 0x91, 0xeb, 0xe9, 0x9d, 0x47, 0x8c, 0x9d, 0x7f, 0xdc, 0xed, 0x55, 0x50, 0x07, 0xbb,
	0xf5, 0xa1, 0x22, 0x4a, 0x30, 0x9f, 0x24, 0xd4, 0x3e, 0x4b, 0xc3, 0xc3, 0x2e, 0x0a, 0x28, 0x2b,
	0xc6, 0xe8, 0xc3, 0x48, 0x47, 0x16, 0x98, 0x88, 0x3b, 0xb0, 0x02, 0x33, 0x2d, 0x0f, 0x5b, 0x4f,
	0x8c, 0x36, 0x72, 0x9d, 0x36, 0x15, 0x9e, 0x56, 0x98, 0xec, 0x23, 0x26, 0x2a, 0xc8, 0x80, 0xf1,
	0xa2, 0x0c, 0x78, 0x90, 0x14, 0x13, 0xf3, 0x72, 0x4f, 0x8b, 0x92, 0xfe, 0xcd, 0xdb, 0xc6, 0xba,
	0xe3, 0xd2, 0x76, 0xa7, 0xa5, 0x59, 0xd8, 0xd7, 0x45, 0x2b, 0xe6, 0x7f, 0xb6, 0x88, 0xfd, 0x44,
	0xa7, 0xbd, 0x53, 0x44, 0xb4, 0x87, 0x01, 0x4d, 0x6a, 0x6b, 0x03, 0xe6, 0x90, 0x28, 0x09, 0x43,
	0xa4, 0x3c, 0x67, 0x65, 0x36, 0x16, 0x1f, 0xf3, 0xd4, 0xdf, 0x80, 0x39, 0x7e, 0x91, 0x11, 0x22,
	0x0b, 0xb9, 0x5d, 0x14, 0x56, 0x27, 0xb9, 0x22, 0x17, 0x37, 0x85, 0x34, 0x17, 0x85, 0xa9, 0x7c,
	0x14, 0xd4, 0x3a, 0x2c, 0x16, 0x11, 0x98, 0x30, 0xfc, 0x8b, 0x04, 0x37, 0xe2, 0xfc, 0x3b, 0x3c,
	0x47, 0x56, 0x87, 0x22, 0xfb, 0xf2, 0x28, 0x6e, 0x40, 0xa5, 0x15, 0xdd, 0x2c, 0xee, 0x18, 0xe7,
	0x77, 0x30, 0xd1, 0xa3, 0x01, 0x55, 0x58, 0x2e, 0x8a, 0x41, 0xd6, 0xd3, 0x89, 0x02, 0x4f, 0x1b,
	0xb0, 0x54, 0xe8, 0x48, 0xe2, 0xea, 0xb7, 0x25, 0xe6, 0xea, 0x61, 0x73, 0x7f, 0xe7, 0xde, 0x01,
	0x3a, 0xf5, 0x70, 0xef, 0x32, 0x5d, 0x5d, 0x81, 0x19, 0x11, 0x35, 0xde, 0xb7, 0x78, 0x2e, 0x55,
	0xb8, 0xec, 0x20, 0x12, 0x8d, 0xea, 0xac, 0x0c, 0xe5, 0xc0, 0xf4, 0xe3, 0x9a, 0x61, 0xdf, 0xac,
	0x4d, 0xf6, 0xfc, 0x16, 0xf6, 0x44, 0x2a, 0x88, 0x95, 0xac, 0xc0, 0x15, 0x1b, 0x59, 0xae, 0x6f,
	0x7a, 0x84, 0x85, 0xbf, 0xdc, 0x4c, 0xd6, 0x39, 0xd2, 0xae, 0x0c, 0x24, 0x2d, 0x4f, 0x49, 0x42,
	0xda, 0x5b, 0x89, 0x25, 0x50, 0xba, 0x50, 0x2f, 0x3f, 0x4d, 0x0a, 0xba, 0x58, 0x44, 0xdf, 0xcc,
	0x88, 0x5d, 0xac, 0x3c, 0xa8, 0x8b, 0x8d, 0x92, 0x36, 0xeb, 0xb0, 0x3a, 0xcc, 0xbf, 0x84, 0x88,
	0x37, 0x25, 0xa8, 0xa6, 0x1f, 0xf0, 0x4f, 0x4f, 0x6d, 0x73, 0x74, 0x12, 0x36, 0xe1, 0x1a, 0xef,
	0xa5, 0x06, 0x41, 0xb4, 0xaf, 0xf9, 0xce, 0x92, 0xf8, 0xc6, 0x62, 0xba, 0xc6, 0xf3, 0x74, 0xfd,
	0x17, 0xa6, 0x7c, 0xe4, 0xb7, 0x50, 0x48, 0xaa, 0xe5, 0xe5, 0xf1, 0xcd, 0xca, 0x8e, 0xa2, 0x7d,
	0x98, 0x0b, 0xb5, 0xf8, 0xdd, 0xe5, 0x48, 0x9b, 0xb1, 0xaa, 0x7c, 0x0c, 0x57, 0x43, 0x74, 0x66,
	0x86, 0xb6, 0x21, 0xda, 0xd9, 0xc4, 0xdf, 0x6a, 0x67, 0x33, 0xfc, 0x92, 0x5d, 0xde, 0xd4, 0x56,
	0x40, 0xac, 0x0d, 0x96, 0xc3, 0x22, 0x3b, 0x2b, 0x5c, 0x76, 0x12, 0x89, 0x46, 0xea, 0x52, 0x2a,
	0x2c, 0x0f, 0xe2, 0x36, 0x09, 0xc0, 0x67, 0x6c, 0xa8, 0xdb, 0x37, 0x03, 0x0b, 0x79, 0x99, 0x11,
	0x29, 0x2a, 0xac, 0xd0, 0x0c, 0x88, 0x69, 0xa5, 0x1f, 0xc1, 0x72, 0xf3, 0x6a, 0x4a, 0xfa, 0xd0,
	0x4e, 0xcd, 0x1a, 0xa5, 0xf4, 0xac, 0x21, 0x46, 0xb3, 0xa2, 0x9b, 0x13, 0xe3, 0x1d, 0x58, 0x8b,
	0x00, 0x76, 0x5a, 0xbe, 0x4b, 0xf7, 0x4c, 0x3b, 0xcd, 0x31, 0x7b, 0xb1, 0x0e, 0xbb, 0xae, 0x8d,
	0xa2, 0xf0, 0x69, 0x30, 0x45, 0x3a, 0xad, 0x2f, 0x90, 0x45, 0x19, 0x86, 0xca, 0xce, 0xbc, 0xc6,
	0x27, 0x67, 0x2d, 0x9e, 0x9c, 0xb5, 0xdd, 0xa0, 0xd7, 0x8c, 0x95, 0xfa, 0x5f, 0xc9, 0x52, 0xf6,
	0x95, 0xd4, 0x61, 0x6b, 0x24, 0xb3, 0x31, 0xce, 0x9d, 0xd7, 0xb3, 0x30, 0x7e, 0x44, 0x1c, 0xf9,
	0x99, 0x04, 0xf3, 0x85, 0xf3, 0xef, 0xad, 0x74, 0xaa, 0x0c, 0x18, 0x48, 0x95, 0x3b, 0x23, 0x28,
	0x25, 0xd4, 0xa8, 0x4f, 0x7f, 0xfd, 0xe3, 0x45, 0x69, 0x51, 0x55, 0xf4, 0xd4, 0x3f, 0x0f, 0x5d,
	0xd3, 0x8b, 0x12, 0xdd, 0xc2, 0xc1, 0x63, 0x37, 0xf4, 0xe5, 0x33, 0x98, 0xcd, 0x84, 0x6c, 0x29,
	0x6b, 0xa2, 0x6f, 0x5b, 0x59, 0x1b, 0xba, 0x9d, 0xd8, 0x6e, 0x30, 0xdb, 0x35, 0xf5, 0x66, 0xda,
	0x76, 0x14, 0x55, 0x83, 0x62, 0x03, 0xd1, 0xb6, 0xdc, 0x83, 0xd9, 0xcc, 0xc0, 0x99, 0x35, 0xdc,
	0xbf, 0x9d, 0x33, 0x3c, 0x60, 0xd6, 0x5c, 0x61, 0x86, 0x17, 0xd4, 0x5a, 0xda, 0x70, 0xc8, 0x75,
	0x0d, 0xf6, 0xbe, 0xc9, 0x5f, 0xc3, 0xb5, 0xdc, 0x28, 0xda, 0xc8, 0xdc, 0x9e, 0x55, 0x50, 0x36,
	0x2e, 0x50, 0x18, 0x0e, 0x40, 0xd0, 0x2d, 0x00, 0xbc, 0x90, 0xe0, 0xe6, 0xa0, 0xb9, 0x71, 0x3d,
	0x63, 0x67, 0x80, 0x9e, 0xa2, 0x8d, 0xa6, 0x97, 0xc0, 0x5a, 0x66, 0xb0, 0x14, 0xb5, 0x9a, 0x83,
	0xe5, 0x1b, 0x1e, 0x76, 0x5c, 0x4b, 0x7e, 0x2a, 0xc1, 0xf5, 0xfc, 0x3c, 0xb7, 0x5c, 0x18, 0xef,
	0x94, 0x86, 0xb2, 0x79, 0x91, 0xc6, 0x70, 0x6a, 0x6c, 0x74, 0x8a, 0x89, 0x4b, 0x0d, 0xcb, 0x33,
	0x5d, 0x5f, 0xfe, 0x46, 0x02, 0xb9, 0x60, 0xe4, 0x59, 0x29, 0x62, 0xbf, 0x4f, 0x45, 0xb9, 0x7d,
	0xa1, 0xca, 0xf0, 0xc2, 0x38, 0x73, 0x69, 0xdb, 0x0e, 0xcd, 0x33, 0x01, 0xe4, 0x7b, 0x09, 0x6e,
	0x14, 0x3f, 0x29, 0xab, 0x83, 0x6a, 0x30, 0xad, 0xa5, 0xdc, 0x1d, 0x45, 0x2b, 0x41, 0xb4, 0xc9,
	0x10, 0xa9, 0xea, 0x72, 0x41, 0xa9, 0x76, 0xf8, 0x01, 0x81, 0xeb, 0x99, 0x04, 0x72, 0xc1, 0xa0,
	0x94, 0x25, 0x28, 0xaf, 0x92, 0x23, 0x68, 0xc8, 0x6c, 0x51, 0x08, 0x07, 0x85, 0xd6, 0xce, 0x3d,
	0xc3, 0x16, 0x07, 0x04, 0x9c, 0x1f, 0x24, 0xa8, 0x0d, 0x1e, 0x41, 0x36, 0x87, 0x24, 0x69, 0x7f,
	0xf4, 0xee, 0x8d, 0xaa, 0x99, 0x60, 0xdc, 0x62, 0x18, 0x37, 0xd4, 0xb5, 0x34, 0x46, 0x96, 0xc9,
	0x86, 0x65, 0x7a, 0x9e, 0x81, 0xc4, 0x29, 0x01, 0xf4, 0x2b, 0x98, 0xe9, 0xfb, 0x21, 0x64, 0x21,
	0x63, 0x30, 0xbd, 0xa9, 0xdc, 0x1a, 0xb2, 0x99, 0x00, 0xb8, 0xcb, 0x00, 0xac, 0xab, 0xab, 0xfd,
	0x2d, 0x8e, 0x1a, 0xe9, 0x07, 0x34, 0xfe, 0x55, 0x42, 0x7e, 0x2e, 0xc1, 0x7c, 0xe1, 0x13, 0x99,
	0xb5, 0x55, 0xa4, 0x94, 0xeb, 0xfb, 0x43, 0x9f, 0xc4, 0x75, 0x06, 0x6c, 0x59, 0xad, 0xf7, 0x95,
	0x3a, 0x3b, 0x61, 0xa4, 0x5b, 0xf0, 0xcf, 0x12, 0xa8, 0x23, 0x3c, 0x9c, 0xdb, 0xd9, 0x4c, 0xbe,
	0xf0, 0x88, 0xf2, 0xbf, 0xbf, 0x7c, 0x24, 0x01, 0xbf, 0xcd, 0xc0, 0xdf, 0x51, 0x6f, 0xf7, 0xb1,
	0xca, 0xce, 0x1b, 0x2d, 0xd3, 0x36, 0x92, 0x27, 0xd8, 0x40, 0xe2, 0xe8, 0xde, 0x27, 0x2f, 0xdf,
	0xd5, 0xa5, 0x57, 0xef, 0xea, 0xd2, 0xef, 0xef, 0xea, 0xd2, 0xf3, 0xf7, 0xf5, 0xb1, 0x57, 0xef,
	0xeb, 0x63, 0xaf, 0xdf, 0xd7, 0xc7, 0x3e, 0xbf, 0x9f, 0x1f, 0x9d, 0xc4, 0xad, 0x5b, 0xfc, 0xa7,
	0x11, 0xdd, 0xc7, 0x76, 0xc7, 0x43, 0xfa, 0x79, 0x62, 0x8d, 0xcd, 0x53, 0xad, 0x49, 0x36, 0x13,
	0xfc, 0xe7, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x7e, 0x77, 0xcd, 0xee, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SignerSetTxSignature(ctx context.Context, in *MsgSignerSetTxSignature, opts ...grpc.CallOption) (*MsgSignerSetTxSignatureResponse, error)
	SendToEthereum(ctx context.Context, in *MsgSendToEthereum, opts ...grpc.CallOption) (*MsgSendToEthereumResponse, error)
	RequestBatchTx(ctx context.Context, in *MsgRequestBatchTx, opts ...grpc.CallOption) (*MsgRequestBatchTxResponse, error)
	BatchTxSignature(ctx context.Context, in *MsgBatchTxSignature, opts ...grpc.CallOption) (*MsgBatchTxSignatureResponse, error)
	ContractCallTxSignature(ctx context.Context, in *MsgContractCallTxSignature, opts ...grpc.CallOption) (*MsgContractCallTxSignatureResponse, error)
	SendToCosmosEvent(ctx context.Context, in *MsgSendToCosmosEvent, opts ...grpc.CallOption) (*MsgSendToCosmosEventResponse, error)
	BatchExecutedEvent(ctx context.Context, in *MsgBatchExecutedEvent, opts ...grpc.CallOption) (*MsgBatchExecutedEventResponse, error)
	SignerSetUpdatedEvent(ctx context.Context, in *MsgSignerSetUpdatedEvent, opts ...grpc.CallOption) (*MsgSignerSetUpdatedEventResponse, error)
	ERC20DeployedEvent(ctx context.Context, in *MsgERC20DeployedEvent, opts ...grpc.CallOption) (*MsgERC20DeployedEventResponse, error)
	ContractCallExecutedEvent(ctx context.Context, in *MsgContractCallExecutedEvent, opts ...grpc.CallOption) (*MsgContractCallExecutedEventResponse, error)
	DelegateKeys(ctx context.Context, in *MsgDelegateKeys, opts ...grpc.CallOption) (*MsgDelegateKeysResponse, error)
	CancelSendToEthereum(ctx context.Context, in *MsgCancelSendToEthereum, opts ...grpc.CallOption) (*MsgCancelSendToEthereumResponse, error)
	SubmitBadEthereumSignatureEvidence(ctx context.Context, in *MsgSubmitBadEthereumSignatureEvidence, opts ...grpc.CallOption) (*MsgSubmitBadEthereumSignatureEvidenceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SignerSetTxSignature(ctx context.Context, in *MsgSignerSetTxSignature, opts ...grpc.CallOption) (*MsgSignerSetTxSignatureResponse, error) {
	out := new(MsgSignerSetTxSignatureResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/SignerSetTxSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendToEthereum(ctx context.Context, in *MsgSendToEthereum, opts ...grpc.CallOption) (*MsgSendToEthereumResponse, error) {
	out := new(MsgSendToEthereumResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/SendToEthereum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestBatchTx(ctx context.Context, in *MsgRequestBatchTx, opts ...grpc.CallOption) (*MsgRequestBatchTxResponse, error) {
	out := new(MsgRequestBatchTxResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/RequestBatchTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BatchTxSignature(ctx context.Context, in *MsgBatchTxSignature, opts ...grpc.CallOption) (*MsgBatchTxSignatureResponse, error) {
	out := new(MsgBatchTxSignatureResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/BatchTxSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ContractCallTxSignature(ctx context.Context, in *MsgContractCallTxSignature, opts ...grpc.CallOption) (*MsgContractCallTxSignatureResponse, error) {
	out := new(MsgContractCallTxSignatureResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/ContractCallTxSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendToCosmosEvent(ctx context.Context, in *MsgSendToCosmosEvent, opts ...grpc.CallOption) (*MsgSendToCosmosEventResponse, error) {
	out := new(MsgSendToCosmosEventResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/SendToCosmosEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BatchExecutedEvent(ctx context.Context, in *MsgBatchExecutedEvent, opts ...grpc.CallOption) (*MsgBatchExecutedEventResponse, error) {
	out := new(MsgBatchExecutedEventResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/BatchExecutedEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignerSetUpdatedEvent(ctx context.Context, in *MsgSignerSetUpdatedEvent, opts ...grpc.CallOption) (*MsgSignerSetUpdatedEventResponse, error) {
	out := new(MsgSignerSetUpdatedEventResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/SignerSetUpdatedEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ERC20DeployedEvent(ctx context.Context, in *MsgERC20DeployedEvent, opts ...grpc.CallOption) (*MsgERC20DeployedEventResponse, error) {
	out := new(MsgERC20DeployedEventResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/ERC20DeployedEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ContractCallExecutedEvent(ctx context.Context, in *MsgContractCallExecutedEvent, opts ...grpc.CallOption) (*MsgContractCallExecutedEventResponse, error) {
	out := new(MsgContractCallExecutedEventResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/ContractCallExecutedEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DelegateKeys(ctx context.Context, in *MsgDelegateKeys, opts ...grpc.CallOption) (*MsgDelegateKeysResponse, error) {
	out := new(MsgDelegateKeysResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/DelegateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSendToEthereum(ctx context.Context, in *MsgCancelSendToEthereum, opts ...grpc.CallOption) (*MsgCancelSendToEthereumResponse, error) {
	out := new(MsgCancelSendToEthereumResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/CancelSendToEthereum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitBadEthereumSignatureEvidence(ctx context.Context, in *MsgSubmitBadEthereumSignatureEvidence, opts ...grpc.CallOption) (*MsgSubmitBadEthereumSignatureEvidenceResponse, error) {
	out := new(MsgSubmitBadEthereumSignatureEvidenceResponse)
	err := c.cc.Invoke(ctx, "/gravity.v1.Msg/SubmitBadEthereumSignatureEvidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SignerSetTxSignature(context.Context, *MsgSignerSetTxSignature) (*MsgSignerSetTxSignatureResponse, error)
	SendToEthereum(context.Context, *MsgSendToEthereum) (*MsgSendToEthereumResponse, error)
	RequestBatchTx(context.Context, *MsgRequestBatchTx) (*MsgRequestBatchTxResponse, error)
	BatchTxSignature(context.Context, *MsgBatchTxSignature) (*MsgBatchTxSignatureResponse, error)
	ContractCallTxSignature(context.Context, *MsgContractCallTxSignature) (*MsgContractCallTxSignatureResponse, error)
	SendToCosmosEvent(context.Context, *MsgSendToCosmosEvent) (*MsgSendToCosmosEventResponse, error)
	BatchExecutedEvent(context.Context, *MsgBatchExecutedEvent) (*MsgBatchExecutedEventResponse, error)
	SignerSetUpdatedEvent(context.Context, *MsgSignerSetUpdatedEvent) (*MsgSignerSetUpdatedEventResponse, error)
	ERC20DeployedEvent(context.Context, *MsgERC20DeployedEvent) (*MsgERC20DeployedEventResponse, error)
	ContractCallExecutedEvent(context.Context, *MsgContractCallExecutedEvent) (*MsgContractCallExecutedEventResponse, error)
	DelegateKeys(context.Context, *MsgDelegateKeys) (*MsgDelegateKeysResponse, error)
	CancelSendToEthereum(context.Context, *MsgCancelSendToEthereum) (*MsgCancelSendToEthereumResponse, error)
	SubmitBadEthereumSignatureEvidence(context.Context, *MsgSubmitBadEthereumSignatureEvidence) (*MsgSubmitBadEthereumSignatureEvidenceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SignerSetTxSignature(ctx context.Context, req *MsgSignerSetTxSignature) (*MsgSignerSetTxSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignerSetTxSignature not implemented")
}
func (*UnimplementedMsgServer) SendToEthereum(ctx context.Context, req *MsgSendToEthereum) (*MsgSendToEthereumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToEthereum not implemented")
}
func (*UnimplementedMsgServer) RequestBatchTx(ctx context.Context, req *MsgRequestBatchTx) (*MsgRequestBatchTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBatchTx not implemented")
}
func (*UnimplementedMsgServer) BatchTxSignature(ctx context.Context, req *MsgBatchTxSignature) (*MsgBatchTxSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTxSignature not implemented")
}
func (*UnimplementedMsgServer) ContractCallTxSignature(ctx context.Context, req *MsgContractCallTxSignature) (*MsgContractCallTxSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCallTxSignature not implemented")
}
func (*UnimplementedMsgServer) SendToCosmosEvent(ctx context.Context, req *MsgSendToCosmosEvent) (*MsgSendToCosmosEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToCosmosEvent not implemented")
}
func (*UnimplementedMsgServer) BatchExecutedEvent(ctx context.Context, req *MsgBatchExecutedEvent) (*MsgBatchExecutedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchExecutedEvent not implemented")
}
func (*UnimplementedMsgServer) SignerSetUpdatedEvent(ctx context.Context, req *MsgSignerSetUpdatedEvent) (*MsgSignerSetUpdatedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignerSetUpdatedEvent not implemented")
}
func (*UnimplementedMsgServer) ERC20DeployedEvent(ctx context.Context, req *MsgERC20DeployedEvent) (*MsgERC20DeployedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20DeployedEvent not implemented")
}
func (*UnimplementedMsgServer) ContractCallExecutedEvent(ctx context.Context, req *MsgContractCallExecutedEvent) (*MsgContractCallExecutedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCallExecutedEvent not implemented")
}
func (*UnimplementedMsgServer) DelegateKeys(ctx context.Context, req *MsgDelegateKeys) (*MsgDelegateKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateKeys not implemented")
}
func (*UnimplementedMsgServer) CancelSendToEthereum(ctx context.Context, req *MsgCancelSendToEthereum) (*MsgCancelSendToEthereumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSendToEthereum not implemented")
}
func (*UnimplementedMsgServer) SubmitBadEthereumSignatureEvidence(ctx context.Context, req *MsgSubmitBadEthereumSignatureEvidence) (*MsgSubmitBadEthereumSignatureEvidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBadEthereumSignatureEvidence not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SignerSetTxSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignerSetTxSignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignerSetTxSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/SignerSetTxSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignerSetTxSignature(ctx, req.(*MsgSignerSetTxSignature))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendToEthereum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToEthereum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToEthereum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/SendToEthereum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToEthereum(ctx, req.(*MsgSendToEthereum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestBatchTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestBatchTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestBatchTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/RequestBatchTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestBatchTx(ctx, req.(*MsgRequestBatchTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BatchTxSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBatchTxSignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BatchTxSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/BatchTxSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BatchTxSignature(ctx, req.(*MsgBatchTxSignature))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ContractCallTxSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgContractCallTxSignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ContractCallTxSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/ContractCallTxSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ContractCallTxSignature(ctx, req.(*MsgContractCallTxSignature))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendToCosmosEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToCosmosEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToCosmosEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/SendToCosmosEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToCosmosEvent(ctx, req.(*MsgSendToCosmosEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BatchExecutedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBatchExecutedEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BatchExecutedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/BatchExecutedEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BatchExecutedEvent(ctx, req.(*MsgBatchExecutedEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignerSetUpdatedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignerSetUpdatedEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignerSetUpdatedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/SignerSetUpdatedEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignerSetUpdatedEvent(ctx, req.(*MsgSignerSetUpdatedEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ERC20DeployedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgERC20DeployedEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ERC20DeployedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/ERC20DeployedEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ERC20DeployedEvent(ctx, req.(*MsgERC20DeployedEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ContractCallExecutedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgContractCallExecutedEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ContractCallExecutedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/ContractCallExecutedEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ContractCallExecutedEvent(ctx, req.(*MsgContractCallExecutedEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DelegateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelegateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/DelegateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelegateKeys(ctx, req.(*MsgDelegateKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSendToEthereum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSendToEthereum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSendToEthereum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/CancelSendToEthereum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSendToEthereum(ctx, req.(*MsgCancelSendToEthereum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitBadEthereumSignatureEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitBadEthereumSignatureEvidence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitBadEthereumSignatureEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v1.Msg/SubmitBadEthereumSignatureEvidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitBadEthereumSignatureEvidence(ctx, req.(*MsgSubmitBadEthereumSignatureEvidence))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignerSetTxSignature",
			Handler:    _Msg_SignerSetTxSignature_Handler,
		},
		{
			MethodName: "SendToEthereum",
			Handler:    _Msg_SendToEthereum_Handler,
		},
		{
			MethodName: "RequestBatchTx",
			Handler:    _Msg_RequestBatchTx_Handler,
		},
		{
			MethodName: "BatchTxSignature",
			Handler:    _Msg_BatchTxSignature_Handler,
		},
		{
			MethodName: "ContractCallTxSignature",
			Handler:    _Msg_ContractCallTxSignature_Handler,
		},
		{
			MethodName: "SendToCosmosEvent",
			Handler:    _Msg_SendToCosmosEvent_Handler,
		},
		{
			MethodName: "BatchExecutedEvent",
			Handler:    _Msg_BatchExecutedEvent_Handler,
		},
		{
			MethodName: "SignerSetUpdatedEvent",
			Handler:    _Msg_SignerSetUpdatedEvent_Handler,
		},
		{
			MethodName: "ERC20DeployedEvent",
			Handler:    _Msg_ERC20DeployedEvent_Handler,
		},
		{
			MethodName: "ContractCallExecutedEvent",
			Handler:    _Msg_ContractCallExecutedEvent_Handler,
		},
		{
			MethodName: "DelegateKeys",
			Handler:    _Msg_DelegateKeys_Handler,
		},
		{
			MethodName: "CancelSendToEthereum",
			Handler:    _Msg_CancelSendToEthereum_Handler,
		},
		{
			MethodName: "SubmitBadEthereumSignatureEvidence",
			Handler:    _Msg_SubmitBadEthereumSignatureEvidence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravity/v1/msgs.proto",
}

func (m *MsgDelegateKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSignerSetTxSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignerSetTxSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignerSetTxSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignerSetTxSignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignerSetTxSignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignerSetTxSignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendToEthereum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToEthereum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToEthereum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BridgeFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.EthDest) > 0 {
		i -= len(m.EthDest)
		copy(dAtA[i:], m.EthDest)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthDest)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToEthereumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToEthereumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToEthereumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatchTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatchTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatchTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatchTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatchTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatchTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBatchTxSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchTxSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchTxSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBatchTxSignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchTxSignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchTxSignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgContractCallTxSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgContractCallTxSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgContractCallTxSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InvalidationNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InvalidationId) > 0 {
		i -= len(m.InvalidationId)
		copy(dAtA[i:], m.InvalidationId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.InvalidationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgContractCallTxSignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgContractCallTxSignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgContractCallTxSignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendToCosmosEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToCosmosEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToCosmosEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CosmosReceiver) > 0 {
		i -= len(m.CosmosReceiver)
		copy(dAtA[i:], m.CosmosReceiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CosmosReceiver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthereumSender) > 0 {
		i -= len(m.EthereumSender)
		copy(dAtA[i:], m.EthereumSender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthereumSender)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToCosmosEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToCosmosEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToCosmosEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBatchExecutedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchExecutedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchExecutedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x22
	}
	if m.BatchNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBatchExecutedEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchExecutedEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchExecutedEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgERC20DeployedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgERC20DeployedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgERC20DeployedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x42
	}
	if m.Decimals != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CosmosDenom) > 0 {
		i -= len(m.CosmosDenom)
		copy(dAtA[i:], m.CosmosDenom)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CosmosDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgERC20DeployedEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgERC20DeployedEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgERC20DeployedEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgContractCallExecutedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgContractCallExecutedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgContractCallExecutedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.InvalidationNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.InvalidationId) > 0 {
		i -= len(m.InvalidationId)
		copy(dAtA[i:], m.InvalidationId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.InvalidationId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgContractCallExecutedEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgContractCallExecutedEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgContractCallExecutedEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSignerSetUpdatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignerSetUpdatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignerSetUpdatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RewardToken) > 0 {
		i -= len(m.RewardToken)
		copy(dAtA[i:], m.RewardToken)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.RewardToken)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.RewardAmount.Size()
		i -= size
		if _, err := m.RewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.SignerSetNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SignerSetNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignerSetUpdatedEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignerSetUpdatedEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignerSetUpdatedEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToEthereum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToEthereum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToEthereum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.TransactionId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToEthereumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToEthereumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToEthereumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBadEthereumSignatureEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBadEthereumSignatureEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBadEthereumSignatureEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBadEthereumSignatureEvidenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBadEthereumSignatureEvidenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBadEthereumSignatureEvidenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDelegateKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgDelegateKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSignerSetTxSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovMsgs(uint64(m.Nonce))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSignerSetTxSignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendToEthereum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthDest)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = m.BridgeFee.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgSendToEthereumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestBatchTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgRequestBatchTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBatchTxSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovMsgs(uint64(m.Nonce))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgBatchTxSignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgContractCallTxSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvalidationId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.InvalidationNonce != 0 {
		n += 1 + sovMsgs(uint64(m.InvalidationNonce))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgContractCallTxSignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendToCosmosEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.BlockHeight))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.EthereumSender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.CosmosReceiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSendToCosmosEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBatchExecutedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.BlockHeight))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovMsgs(uint64(m.BatchNonce))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgBatchExecutedEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgERC20DeployedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.BlockHeight))
	}
	l = len(m.CosmosDenom)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovMsgs(uint64(m.Decimals))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgERC20DeployedEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgContractCallExecutedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.BlockHeight))
	}
	l = len(m.InvalidationId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.InvalidationNonce != 0 {
		n += 1 + sovMsgs(uint64(m.InvalidationNonce))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgContractCallExecutedEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSignerSetUpdatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.SignerSetNonce != 0 {
		n += 1 + sovMsgs(uint64(m.SignerSetNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.BlockHeight))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	l = m.RewardAmount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.RewardToken)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSignerSetUpdatedEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelSendToEthereum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionId != 0 {
		n += 1 + sovMsgs(uint64(m.TransactionId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgCancelSendToEthereumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitBadEthereumSignatureEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSubmitBadEthereumSignatureEvidenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDelegateKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignerSetTxSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignerSetTxSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignerSetTxSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignerSetTxSignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignerSetTxSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignerSetTxSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToEthereum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToEthereum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToEthereum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthDest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthDest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToEthereumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToEthereumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToEthereumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatchTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatchTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatchTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatchTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatchTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatchTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBatchTxSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchTxSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchTxSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBatchTxSignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchTxSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchTxSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgContractCallTxSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgContractCallTxSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgContractCallTxSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgContractCallTxSignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgContractCallTxSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgContractCallTxSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToCosmosEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToCosmosEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToCosmosEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToCosmosEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToCosmosEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToCosmosEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBatchExecutedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchExecutedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchExecutedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBatchExecutedEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchExecutedEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchExecutedEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgERC20DeployedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgERC20DeployedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgERC20DeployedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgERC20DeployedEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgERC20DeployedEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgERC20DeployedEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgContractCallExecutedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgContractCallExecutedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgContractCallExecutedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidationId = append(m.InvalidationId[:0], dAtA[iNdEx:postIndex]...)
			if m.InvalidationId == nil {
				m.InvalidationId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgContractCallExecutedEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgContractCallExecutedEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgContractCallExecutedEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignerSetUpdatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignerSetUpdatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignerSetUpdatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetNonce", wireType)
			}
			m.SignerSetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignerSetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &EthereumSigner{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignerSetUpdatedEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignerSetUpdatedEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignerSetUpdatedEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToEthereum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToEthereum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToEthereum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToEthereumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToEthereumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToEthereumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitBadEthereumSignatureEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBadEthereumSignatureEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBadEthereumSignatureEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &types1.Any{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitBadEthereumSignatureEvidenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBadEthereumSignatureEvidenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBadEthereumSignatureEvidenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
