syntax = "proto3";
package gravity.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/cosmos/gravity-bridge/module/x/gravity/types";

// EventType is the cosmos type of an event from Ethereum
enum EventType {
  option (gogoproto.goproto_enum_prefix) = false;

  EVENT_TYPE_UNSPECIFIED         = 0;
  EVENT_TYPE_DEPOSIT             = 1;
  EVENT_TYPE_WITHDRAW            = 2;
  EVENT_TYPE_COSMOS_ERC20_DEPLOYED      = 3;
  EVENT_TYPE_CONTRACT_CALL_EXECUTED = 4;
  EVENT_TYPE_SIGNER_SET_UPDATED      = 5;
}

// EthereumEventVoteRecord is an aggregate of `claims` that eventually becomes `accepted` by
// all orchestrators
message EthereumEventVoteRecord {
  // This field stores whether the EthereumEventVoteRecord has had its event applied to the Cosmos state. This happens when
  // enough (usually >2/3s) of the validator power votes that they saw the event on Ethereum.
  // For example, once a DepositClaim has modified the token balance of the account that it was deposited to,
  // this boolean will be set to true.
  bool accepted = 1;
  // This is an array of the addresses of the validators which have voted that they saw the event on Ethereum.
  repeated string votes = 2;
  // This is the Cosmos block height that this event was first submitted by a validator.
  uint64 height = 3;
  // The Ethereum event that this EthereumEventVoteRecord is recording votes for.
  google.protobuf.Any event = 4;
}

// LatestEthereumBlockHeight stores the last observed
// Ethereum block height along with the Cosmos block height that
// it was observed at. These two numbers can be used to project
// outward and always produce batches with timeouts in the future
// even if no Ethereum block height has been relayed for a long time
message LatestEthereumBlockHeight {
  uint64 cosmos_block_height   = 1;
  uint64 ethereum_block_height = 2;
}

// EthereumSigner represents a validator's ETH address and its power
message EthereumSigner {
  uint64 power            = 1;
  string ethereum_address = 2;
}

// Valset is the Ethereum Bridge Multsig Set, each gravity validator also
// maintains an ETH key to sign messages, these are used to check signatures on
// ETH because of the significant gas savings
message SignerSetTx {
  uint64                   nonce   = 1;
  repeated EthereumSigner  members = 2;
  uint64                   height  = 3;
  // TODO: replace these two fields with ERC20Token
  string reward_amount         = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
  // the reward token in it's Ethereum hex address representation
  string reward_token               = 5;
}

// OutgoingTxBatch represents a batch of transactions going from gravity to ETH
message BatchTx {
  uint64                      batch_nonce    = 1;
  uint64                      batch_timeout  = 2;
  repeated SendToEthereum   transactions   = 3;
  string                      token_contract = 4;
  uint64                      block          = 5;
}

// SendToEthereum represents an individual send from gravity to ETH
message SendToEthereum {
  uint64     id           = 1;
  string     sender       = 2;
  string     dest_address = 3;
  ERC20Token transfer  = 4;
  ERC20Token fee    = 5;
}

// OutgoingLogicCall represents an individual logic call from gravity to ETH
message ContractCallTx {
  repeated ERC20Token transfers              = 1;
  repeated ERC20Token fees                   = 2;
  string              contract_call_address  = 3;
  bytes               contract_call_payload  = 4;
  uint64              timeout                = 5;
  bytes               invalidation_id        = 6;
  uint64              invalidation_nonce     = 7;
}

// ERC20Token unique identifier for an Ethereum ERC20 token.
// CONTRACT:
// The contract address on ETH of the token, this could be a Cosmos
// originated token, if so it will be the ERC20 address of the representation
// (note: developers should look up the token symbol using the address on ETH to display for UI)
message ERC20Token {
  string contract = 1;
  string amount   = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}

// IDSet represents a set of IDs
message IDSet {
  repeated uint64 ids = 1;
}

// TODO: Is this being used?
message BatchFees {
  string token      = 1;
  string total_fees = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

// This records the relationship between an ERC20 token and the denom
// of the corresponding Cosmos originated asset
message ERC20ToDenom {
  string erc20 = 1;
  string denom = 2;
}