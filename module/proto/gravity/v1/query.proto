syntax = "proto3";
package gravity.v1;

import "gravity/v1/genesis.proto";
import "gravity/v1/types.proto";
import "gravity/v1/msgs.proto";
import "gravity/v1/pool.proto";
import "gravity/v1/batch.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/cosmos/gravity-bridge/module/x/gravity/types";

// Query defines the gRPC querier service
service Query {
  // Deployments queries deployments
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/gravity/v1beta/params";
  }
  rpc CurrentSignerSetTx(QueryCurrentSignerSetTxRequest) returns (QueryCurrentSignerSetTxResponse) {
    option (google.api.http).get = "/gravity/v1beta/valset/current";
  }
  rpc SignerSetTxRequest(QuerySignerSetTxRequest) returns (QuerySignerSetTxResponse) {
    option (google.api.http).get = "/gravity/v1beta/valset";
  }
  rpc SignerSetTxSignature(QuerySignerSetTxSignatureRequest) returns (QuerySignerSetTxSignatureResponse) {
    option (google.api.http).get = "/gravity/v1beta/valset/confirm";
  }
  rpc SignerSetTxSignaturesByNonce(QuerySignerSetTxSignaturesByNonceRequest) returns (QuerySignerSetTxSignaturesByNonceRequest) {
    option (google.api.http).get = "/gravity/v1beta/confirms/{nonce}";
  }
  rpc LastSignerSetTxs(QueryLastSignerSetTxsRequest) returns (QueryLastSignerSetTxsResponse) {
    option (google.api.http).get = "/gravity/v1beta/valset/requests";
  }
  rpc LastPendingSignerSetTxByAddr(QueryLastPendingSignerSetTxByAddrRequest) returns (QueryLastPendingSignerSetTxByAddrResponse) {
    option (google.api.http).get = "/gravity/v1beta/valset/last";
  }
  rpc LastPendingBatchTxByAddr(QueryLastPendingBatchTxByAddrRequest) returns (QueryLastPendingBatchTxByAddrResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/{address}";
  }
  rpc LastPendingContractCallTxByAddr(QueryLastPendingContractCallTxByAddrRequest) returns (QueryLastPendingContractCallTxByAddrResponse) {
    option (google.api.http).get = "/gravity/v1beta/logic/{address}";
  }
  rpc LastEventNonceByAddr(QueryLastEventNonceByAddrRequest) returns (QueryLastEventNonceByAddrResponse) {
    option (google.api.http).get = "/gravity/v1beta/oracle/eventnonce/{address}";
  }
  rpc BatchFees(QueryBatchFeeRequest) returns (QueryBatchFeeResponse) {
    option (google.api.http).get = "/gravity/v1beta/batchfees";
  }

  rpc BatchTxs(QueryBatchTxsRequest) returns (QueryBatchTxsResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/outgoingtx";
  }
  rpc ContractCallTxs(QueryContractCallTxsRequest) returns (QueryContractCallTxsResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/outgoinglogic";
  }
  rpc BatchTxByNonce(QueryBatchTxByNonceRequest) returns (QueryBatchTxByNonceResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/{nonce}";
  }
  rpc BatchTxSignatures(QueryBatchTxSignaturesRequest) returns (QueryBatchTxSignaturesResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/confirms";
  }
  rpc ContractCallTxSignatures(QueryContractCallTxSignaturesRequest) returns (QueryContractCallTxSignaturesResponse) {
    option (google.api.http).get = "/gravity/v1beta/logic/confirms";
  }
  rpc ERC20ToDenom(QueryERC20ToDenomRequest) returns (QueryERC20ToDenomResponse) {
    option (google.api.http).get = "/gravity/v1beta/cosmos_originated/erc20_to_denom";
  }
  rpc DenomToERC20(QueryDenomToERC20Request) returns (QueryDenomToERC20Response) {
    option (google.api.http).get = "/gravity/v1beta/cosmos_originated/denom_to_erc20";
  }

  rpc GetDelegateKeyByValidator(QueryDelegateKeysByValidatorAddress) returns (QueryDelegateKeysByValidatorAddressResponse) {
    option (google.api.http).get = "/gravity/v1beta/query_delegate_keys_by_validator";
  }
  rpc GetDelegateKeyByEth(QueryDelegateKeysByEthAddress) returns (QueryDelegateKeysByEthAddressResponse) {
    option (google.api.http).get = "/gravity/v1beta/query_delegate_keys_by_eth";
  }
  rpc GetDelegateKeyByOrchestrator(QueryDelegateKeysByOrchestratorAddress) returns (QueryDelegateKeysByOrchestratorAddressResponse) {
    option (google.api.http).get = "/gravity/v1beta/query_delegate_keys_by_orchestrator";
  }

  rpc GetPendingSendToEthereum(QueryPendingSendToEthereumRequest) returns (QueryPendingSendToEthereumResponse) {
    option (google.api.http).get = "/gravity/v1beta/query_pending_send_to_eth";
  }
}

message QueryParamsRequest {}
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryCurrentSignerSetTxRequest {}
message QueryCurrentSignerSetTxResponse {
  SignerSetTx signer_set_tx = 1;
}

message QuerySignerSetTxRequest {
  uint64 nonce = 1;
}
message QuerySignerSetTxResponse {
  SignerSetTx signer_set_tx = 1;
}

message QuerySignerSetTxSignatureRequest {
  uint64 nonce   = 1;
  string address = 2;
}
message QuerySignerSetTxSignatureResponse {
  MsgSignerSetTxSignature signature_msg = 1;
}

message QuerySignerSetTxSignaturesByNonceRequest {
  uint64 nonce = 1;
}
message QuerySignerSetTxSignaturesByNonceResponse {
  repeated MsgSignerSetTxSignature signature_msg = 1;
}

message QueryLastSignerSetTxsRequest {}
message QueryLastSignerSetTxsResponse {
  repeated SignerSetTx signer_set_txs = 1;
}

message QueryLastPendingSignerSetTxByAddrRequest {
  string address = 1;
}
message QueryLastPendingSignerSetTxByAddrResponse {
  repeated SignerSetTx signer_set_txs = 1;
}

message QueryBatchFeeRequest {}
message QueryBatchFeeResponse {
  repeated BatchFees batch_fees = 1;
}

message QueryLastPendingBatchTxByAddrRequest {
  string address = 1;
}
message QueryLastPendingBatchTxByAddrResponse {
  BatchTx batch = 1;
}

message QueryLastPendingContractCallTxByAddrRequest {
  string address = 1;
}
message QueryLastPendingContractCallTxByAddrResponse {
  ContractCallTx call = 1;
}

message QueryBatchTxsRequest {}
message QueryBatchTxsResponse {
  repeated BatchTx batches = 1;
}

message QueryContractCallTxsRequest {}
message QueryContractCallTxsResponse {
  repeated ContractCallTx calls = 1;
}

message QueryBatchTxByNonceRequest {
  uint64 nonce            = 1;
  string contract_address = 2;
}
message QueryBatchTxByNonceResponse {
  BatchTx batch = 1;
}

message QueryBatchTxSignaturesRequest {
  uint64 nonce            = 1;
  string contract_address = 2;
}
message QueryBatchTxSignaturesResponse {
  repeated MsgBatchTxSignature signature_msg = 1;
}

message QueryContractCallTxSignaturesRequest {
  bytes  invalidation_id    = 1;
  uint64 invalidation_nonce = 2;
}
message QueryContractCallTxSignaturesResponse {
  repeated MsgContractCallTxSignature confirms = 1;
}

message QueryLastEventNonceByAddrRequest {
  string address = 1;
}
message QueryLastEventNonceByAddrResponse {
  uint64 event_nonce = 1;
}

message QueryERC20ToDenomRequest {
  string erc20 = 1;
}
message QueryERC20ToDenomResponse {
  string denom             = 1;
  bool   cosmos_originated = 2;
}

message QueryDenomToERC20Request {
  string denom = 1;
}
message QueryDenomToERC20Response {
  string erc20             = 1;
  bool   cosmos_originated = 2;
}

message QueryDelegateKeysByValidatorAddress {
  string validator_address = 1;
}
message QueryDelegateKeysByValidatorAddressResponse {
  string eth_address          = 1;
  string orchestrator_address = 2;
}

message QueryDelegateKeysByEthAddress {
  string eth_address = 1;
}
message QueryDelegateKeysByEthAddressResponse {
  string validator_address    = 1;
  string orchestrator_address = 2;
}

message QueryDelegateKeysByOrchestratorAddress {
  string orchestrator_address = 1;
}
message QueryDelegateKeysByOrchestratorAddressResponse {
  string validator_address = 1;
  string eth_address       = 2;
}

message QueryPendingSendToEthereumRequest {
  string sender_address = 1;
}
message QueryPendingSendToEthereumResponse {
  repeated SendToEthereum transfers_in_batches = 1;
  repeated SendToEthereum unbatched_transfers  = 2;
}
