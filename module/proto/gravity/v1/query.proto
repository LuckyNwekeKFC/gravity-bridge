syntax = "proto3";
package gravity.v1;

import "gravity/v1/genesis.proto";
import "gravity/v1/types.proto";
import "gravity/v1/msgs.proto";
import "gravity/v1/pool.proto";
import "gravity/v1/batch.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/cosmos/gravity-bridge/module/x/gravity/types";

// Query defines the gRPC querier service
service Query {
  // Deployments queries deployments
  rpc Params(ParamsRequest) returns (ParamsResponse) {
    option (google.api.http).get = "/gravity/v1beta/params";
  }
  rpc CurrentSignerSetTx(CurrentSignerSetTxRequest) returns (CurrentSignerSetTxResponse) {
    option (google.api.http).get = "/gravity/v1beta/valset/current";
  }
  rpc SignerSetTx(SignerSetTxRequest) returns (SignerSetTxResponse) {
    option (google.api.http).get = "/gravity/v1beta/valset";
  }
  rpc SignerSetTxSignature(SignerSetTxSignatureRequest) returns (SignerSetTxSignatureResponse) {
    option (google.api.http).get = "/gravity/v1beta/valset/confirm";
  }
  rpc SignerSetTxSignaturesByNonce(SignerSetTxSignaturesByNonceRequest) returns (SignerSetTxSignaturesByNonceResponse) {
    option (google.api.http).get = "/gravity/v1beta/confirms/{nonce}";
  }
  rpc LastSignerSetTxs(LastSignerSetTxsRequest) returns (LastSignerSetTxsResponse) {
    option (google.api.http).get = "/gravity/v1beta/valset/requests";
  }
  rpc LastPendingSignerSetTxByAddr(LastPendingSignerSetTxByAddrRequest) returns (LastPendingSignerSetTxByAddrResponse) {
    option (google.api.http).get = "/gravity/v1beta/valset/last";
  }
  rpc LastPendingBatchTxByAddr(LastPendingBatchTxByAddrRequest) returns (LastPendingBatchTxByAddrResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/{address}";
  }
  rpc LastPendingContractCallTxByAddr(LastPendingContractCallTxByAddrRequest) returns (LastPendingContractCallTxByAddrResponse) {
    option (google.api.http).get = "/gravity/v1beta/logic/{address}";
  }
  rpc LastEventNonceByAddr(LastEventNonceByAddrRequest) returns (LastEventNonceByAddrResponse) {
    option (google.api.http).get = "/gravity/v1beta/oracle/eventnonce/{address}";
  }
  rpc BatchFees(BatchFeeRequest) returns (BatchFeeResponse) {
    option (google.api.http).get = "/gravity/v1beta/batchfees";
  }

  rpc BatchTxs(BatchTxsRequest) returns (BatchTxsResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/outgoingtx";
  }
  rpc ContractCallTxs(ContractCallTxsRequest) returns (ContractCallTxsResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/outgoinglogic";
  }
  rpc BatchTxByNonce(BatchTxByNonceRequest) returns (BatchTxByNonceResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/{nonce}";
  }
  rpc BatchTxSignatures(BatchTxSignaturesRequest) returns (BatchTxSignaturesResponse) {
    option (google.api.http).get = "/gravity/v1beta/batch/confirms";
  }
  rpc ContractCallTxSignatures(ContractCallTxSignaturesRequest) returns (ContractCallTxSignaturesResponse) {
    option (google.api.http).get = "/gravity/v1beta/logic/confirms";
  }
  rpc ERC20ToDenom(ERC20ToDenomRequest) returns (ERC20ToDenomResponse) {
    option (google.api.http).get = "/gravity/v1beta/cosmos_originated/erc20_to_denom";
  }
  rpc DenomToERC20(DenomToERC20Request) returns (DenomToERC20Response) {
    option (google.api.http).get = "/gravity/v1beta/cosmos_originated/denom_to_erc20";
  }

  rpc GetDelegateKeyByValidator(DelegateKeysByValidatorAddress) returns (DelegateKeysByValidatorAddressResponse) {
    option (google.api.http).get = "/gravity/v1beta/query_delegate_keys_by_validator";
  }
  rpc GetDelegateKeyByEth(DelegateKeysByEthAddress) returns (DelegateKeysByEthAddressResponse) {
    option (google.api.http).get = "/gravity/v1beta/query_delegate_keys_by_eth";
  }
  rpc GetDelegateKeyByOrchestrator(DelegateKeysByOrchestratorAddress) returns (DelegateKeysByOrchestratorAddressResponse) {
    option (google.api.http).get = "/gravity/v1beta/query_delegate_keys_by_orchestrator";
  }

  rpc GetPendingSendToEthereum(PendingSendToEthereumRequest) returns (PendingSendToEthereumResponse) {
    option (google.api.http).get = "/gravity/v1beta/query_pending_send_to_eth";
  }
}

message ParamsRequest {}
message ParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message CurrentSignerSetTxRequest {}
message CurrentSignerSetTxResponse {
  SignerSetTx signer_set_tx = 1;
}

message SignerSetTxRequest {
  uint64 nonce = 1;
}
message SignerSetTxResponse {
  SignerSetTx signer_set_tx = 1;
}

message SignerSetTxSignatureRequest {
  uint64 nonce   = 1;
  string address = 2;
}
message SignerSetTxSignatureResponse {
  MsgSignerSetTxSignature signature_msg = 1;
}

message SignerSetTxSignaturesByNonceRequest {
  uint64 nonce = 1;
}
message SignerSetTxSignaturesByNonceResponse {
  repeated MsgSignerSetTxSignature signature_msgs = 1;
}

message LastSignerSetTxsRequest {}
message LastSignerSetTxsResponse {
  repeated SignerSetTx signer_set_txs = 1;
}

message LastPendingSignerSetTxByAddrRequest {
  string address = 1;
}
message LastPendingSignerSetTxByAddrResponse {
  repeated SignerSetTx signer_set_txs = 1;
}

message BatchFeeRequest {}
message BatchFeeResponse {
  repeated BatchFees batch_fees = 1;
}

message LastPendingBatchTxByAddrRequest {
  string address = 1;
}
message LastPendingBatchTxByAddrResponse {
  BatchTx batch = 1;
}

message LastPendingContractCallTxByAddrRequest {
  string address = 1;
}
message LastPendingContractCallTxByAddrResponse {
  ContractCallTx call = 1;
}

message BatchTxsRequest {}
message BatchTxsResponse {
  repeated BatchTx batches = 1;
}

message ContractCallTxsRequest {}
message ContractCallTxsResponse {
  repeated ContractCallTx calls = 1;
}

message BatchTxByNonceRequest {
  uint64 nonce            = 1;
  string contract_address = 2;
}
message BatchTxByNonceResponse {
  BatchTx batch = 1;
}

message BatchTxSignaturesRequest {
  uint64 nonce            = 1;
  string contract_address = 2;
}
message BatchTxSignaturesResponse {
  repeated MsgBatchTxSignature signature_msgs = 1;
}

message ContractCallTxSignaturesRequest {
  bytes  invalidation_id    = 1;
  uint64 invalidation_nonce = 2;
}
message ContractCallTxSignaturesResponse {
  repeated MsgContractCallTxSignature signature_msgs = 1;
}

message LastEventNonceByAddrRequest {
  string address = 1;
}
message LastEventNonceByAddrResponse {
  uint64 event_nonce = 1;
}

message ERC20ToDenomRequest {
  string erc20 = 1;
}
message ERC20ToDenomResponse {
  string denom             = 1;
  bool   cosmos_originated = 2;
}

message DenomToERC20Request {
  string denom = 1;
}
message DenomToERC20Response {
  string erc20             = 1;
  bool   cosmos_originated = 2;
}

message DelegateKeysByValidatorAddress {
  string validator_address = 1;
}
message DelegateKeysByValidatorAddressResponse {
  string eth_address          = 1;
  string orchestrator_address = 2;
}

message DelegateKeysByEthAddress {
  string eth_address = 1;
}
message DelegateKeysByEthAddressResponse {
  string validator_address    = 1;
  string orchestrator_address = 2;
}

message DelegateKeysByOrchestratorAddress {
  string orchestrator_address = 1;
}
message DelegateKeysByOrchestratorAddressResponse {
  string validator_address = 1;
  string eth_address       = 2;
}

message PendingSendToEthereumRequest {
  string sender_address = 1;
}
message PendingSendToEthereumResponse {
  repeated SendToEthereum transfers_in_batches = 1;
  repeated SendToEthereum unbatched_transfers  = 2;
}
